// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_database.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

// ignore_for_file: unnecessary_brace_in_string_interps, unnecessary_this
class SessionUserData extends DataClass implements Insertable<SessionUserData> {
  final int userId;
  final int? anioAcademicoId;
  final int? programaEducativoId;
  final String? urlServerLocal;
  final bool? complete;
  SessionUserData(
      {required this.userId,
      this.anioAcademicoId,
      this.programaEducativoId,
      this.urlServerLocal,
      this.complete});
  factory SessionUserData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return SessionUserData(
      userId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}user_id'])!,
      anioAcademicoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}anio_academico_id']),
      programaEducativoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}programa_educativo_id']),
      urlServerLocal: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}url_server_local']),
      complete: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}complete']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['user_id'] = Variable<int>(userId);
    if (!nullToAbsent || anioAcademicoId != null) {
      map['anio_academico_id'] = Variable<int?>(anioAcademicoId);
    }
    if (!nullToAbsent || programaEducativoId != null) {
      map['programa_educativo_id'] = Variable<int?>(programaEducativoId);
    }
    if (!nullToAbsent || urlServerLocal != null) {
      map['url_server_local'] = Variable<String?>(urlServerLocal);
    }
    if (!nullToAbsent || complete != null) {
      map['complete'] = Variable<bool?>(complete);
    }
    return map;
  }

  SessionUserCompanion toCompanion(bool nullToAbsent) {
    return SessionUserCompanion(
      userId: Value(userId),
      anioAcademicoId: anioAcademicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(anioAcademicoId),
      programaEducativoId: programaEducativoId == null && nullToAbsent
          ? const Value.absent()
          : Value(programaEducativoId),
      urlServerLocal: urlServerLocal == null && nullToAbsent
          ? const Value.absent()
          : Value(urlServerLocal),
      complete: complete == null && nullToAbsent
          ? const Value.absent()
          : Value(complete),
    );
  }

  factory SessionUserData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return SessionUserData(
      userId: serializer.fromJson<int>(json['userId']),
      anioAcademicoId: serializer.fromJson<int?>(json['anioAcademicoId']),
      programaEducativoId:
          serializer.fromJson<int?>(json['programaEducativoId']),
      urlServerLocal: serializer.fromJson<String?>(json['urlServerLocal']),
      complete: serializer.fromJson<bool?>(json['complete']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'userId': serializer.toJson<int>(userId),
      'anioAcademicoId': serializer.toJson<int?>(anioAcademicoId),
      'programaEducativoId': serializer.toJson<int?>(programaEducativoId),
      'urlServerLocal': serializer.toJson<String?>(urlServerLocal),
      'complete': serializer.toJson<bool?>(complete),
    };
  }

  SessionUserData copyWith(
          {int? userId,
          int? anioAcademicoId,
          int? programaEducativoId,
          String? urlServerLocal,
          bool? complete}) =>
      SessionUserData(
        userId: userId ?? this.userId,
        anioAcademicoId: anioAcademicoId ?? this.anioAcademicoId,
        programaEducativoId: programaEducativoId ?? this.programaEducativoId,
        urlServerLocal: urlServerLocal ?? this.urlServerLocal,
        complete: complete ?? this.complete,
      );
  @override
  String toString() {
    return (StringBuffer('SessionUserData(')
          ..write('userId: $userId, ')
          ..write('anioAcademicoId: $anioAcademicoId, ')
          ..write('programaEducativoId: $programaEducativoId, ')
          ..write('urlServerLocal: $urlServerLocal, ')
          ..write('complete: $complete')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      userId.hashCode,
      $mrjc(
          anioAcademicoId.hashCode,
          $mrjc(programaEducativoId.hashCode,
              $mrjc(urlServerLocal.hashCode, complete.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SessionUserData &&
          other.userId == this.userId &&
          other.anioAcademicoId == this.anioAcademicoId &&
          other.programaEducativoId == this.programaEducativoId &&
          other.urlServerLocal == this.urlServerLocal &&
          other.complete == this.complete);
}

class SessionUserCompanion extends UpdateCompanion<SessionUserData> {
  final Value<int> userId;
  final Value<int?> anioAcademicoId;
  final Value<int?> programaEducativoId;
  final Value<String?> urlServerLocal;
  final Value<bool?> complete;
  const SessionUserCompanion({
    this.userId = const Value.absent(),
    this.anioAcademicoId = const Value.absent(),
    this.programaEducativoId = const Value.absent(),
    this.urlServerLocal = const Value.absent(),
    this.complete = const Value.absent(),
  });
  SessionUserCompanion.insert({
    this.userId = const Value.absent(),
    this.anioAcademicoId = const Value.absent(),
    this.programaEducativoId = const Value.absent(),
    this.urlServerLocal = const Value.absent(),
    this.complete = const Value.absent(),
  });
  static Insertable<SessionUserData> custom({
    Expression<int>? userId,
    Expression<int?>? anioAcademicoId,
    Expression<int?>? programaEducativoId,
    Expression<String?>? urlServerLocal,
    Expression<bool?>? complete,
  }) {
    return RawValuesInsertable({
      if (userId != null) 'user_id': userId,
      if (anioAcademicoId != null) 'anio_academico_id': anioAcademicoId,
      if (programaEducativoId != null)
        'programa_educativo_id': programaEducativoId,
      if (urlServerLocal != null) 'url_server_local': urlServerLocal,
      if (complete != null) 'complete': complete,
    });
  }

  SessionUserCompanion copyWith(
      {Value<int>? userId,
      Value<int?>? anioAcademicoId,
      Value<int?>? programaEducativoId,
      Value<String?>? urlServerLocal,
      Value<bool?>? complete}) {
    return SessionUserCompanion(
      userId: userId ?? this.userId,
      anioAcademicoId: anioAcademicoId ?? this.anioAcademicoId,
      programaEducativoId: programaEducativoId ?? this.programaEducativoId,
      urlServerLocal: urlServerLocal ?? this.urlServerLocal,
      complete: complete ?? this.complete,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (userId.present) {
      map['user_id'] = Variable<int>(userId.value);
    }
    if (anioAcademicoId.present) {
      map['anio_academico_id'] = Variable<int?>(anioAcademicoId.value);
    }
    if (programaEducativoId.present) {
      map['programa_educativo_id'] = Variable<int?>(programaEducativoId.value);
    }
    if (urlServerLocal.present) {
      map['url_server_local'] = Variable<String?>(urlServerLocal.value);
    }
    if (complete.present) {
      map['complete'] = Variable<bool?>(complete.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SessionUserCompanion(')
          ..write('userId: $userId, ')
          ..write('anioAcademicoId: $anioAcademicoId, ')
          ..write('programaEducativoId: $programaEducativoId, ')
          ..write('urlServerLocal: $urlServerLocal, ')
          ..write('complete: $complete')
          ..write(')'))
        .toString();
  }
}

class $SessionUserTable extends SessionUser
    with TableInfo<$SessionUserTable, SessionUserData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $SessionUserTable(this._db, [this._alias]);
  final VerificationMeta _userIdMeta = const VerificationMeta('userId');
  late final GeneratedColumn<int?> userId = GeneratedColumn<int?>(
      'user_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _anioAcademicoIdMeta =
      const VerificationMeta('anioAcademicoId');
  late final GeneratedColumn<int?> anioAcademicoId = GeneratedColumn<int?>(
      'anio_academico_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _programaEducativoIdMeta =
      const VerificationMeta('programaEducativoId');
  late final GeneratedColumn<int?> programaEducativoId = GeneratedColumn<int?>(
      'programa_educativo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _urlServerLocalMeta =
      const VerificationMeta('urlServerLocal');
  late final GeneratedColumn<String?> urlServerLocal = GeneratedColumn<String?>(
      'url_server_local', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _completeMeta = const VerificationMeta('complete');
  late final GeneratedColumn<bool?> complete = GeneratedColumn<bool?>(
      'complete', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (complete IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns =>
      [userId, anioAcademicoId, programaEducativoId, urlServerLocal, complete];
  @override
  String get aliasedName => _alias ?? 'session_user';
  @override
  String get actualTableName => 'session_user';
  @override
  VerificationContext validateIntegrity(Insertable<SessionUserData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('user_id')) {
      context.handle(_userIdMeta,
          userId.isAcceptableOrUnknown(data['user_id']!, _userIdMeta));
    }
    if (data.containsKey('anio_academico_id')) {
      context.handle(
          _anioAcademicoIdMeta,
          anioAcademicoId.isAcceptableOrUnknown(
              data['anio_academico_id']!, _anioAcademicoIdMeta));
    }
    if (data.containsKey('programa_educativo_id')) {
      context.handle(
          _programaEducativoIdMeta,
          programaEducativoId.isAcceptableOrUnknown(
              data['programa_educativo_id']!, _programaEducativoIdMeta));
    }
    if (data.containsKey('url_server_local')) {
      context.handle(
          _urlServerLocalMeta,
          urlServerLocal.isAcceptableOrUnknown(
              data['url_server_local']!, _urlServerLocalMeta));
    }
    if (data.containsKey('complete')) {
      context.handle(_completeMeta,
          complete.isAcceptableOrUnknown(data['complete']!, _completeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {userId};
  @override
  SessionUserData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return SessionUserData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $SessionUserTable createAlias(String alias) {
    return $SessionUserTable(_db, alias);
  }
}

class UsuarioRolGeoreferenciaData extends DataClass
    implements Insertable<UsuarioRolGeoreferenciaData> {
  final int usuarioRolGeoreferenciaId;
  final int? usuarioId;
  final int? rolId;
  final int? geoReferenciaId;
  final int? entidadId;
  UsuarioRolGeoreferenciaData(
      {required this.usuarioRolGeoreferenciaId,
      this.usuarioId,
      this.rolId,
      this.geoReferenciaId,
      this.entidadId});
  factory UsuarioRolGeoreferenciaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return UsuarioRolGeoreferenciaData(
      usuarioRolGeoreferenciaId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_rol_georeferencia_id'])!,
      usuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_id']),
      rolId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rol_id']),
      geoReferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}geo_referencia_id']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['usuario_rol_georeferencia_id'] =
        Variable<int>(usuarioRolGeoreferenciaId);
    if (!nullToAbsent || usuarioId != null) {
      map['usuario_id'] = Variable<int?>(usuarioId);
    }
    if (!nullToAbsent || rolId != null) {
      map['rol_id'] = Variable<int?>(rolId);
    }
    if (!nullToAbsent || geoReferenciaId != null) {
      map['geo_referencia_id'] = Variable<int?>(geoReferenciaId);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    return map;
  }

  UsuarioRolGeoreferenciaCompanion toCompanion(bool nullToAbsent) {
    return UsuarioRolGeoreferenciaCompanion(
      usuarioRolGeoreferenciaId: Value(usuarioRolGeoreferenciaId),
      usuarioId: usuarioId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioId),
      rolId:
          rolId == null && nullToAbsent ? const Value.absent() : Value(rolId),
      geoReferenciaId: geoReferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(geoReferenciaId),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
    );
  }

  factory UsuarioRolGeoreferenciaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return UsuarioRolGeoreferenciaData(
      usuarioRolGeoreferenciaId:
          serializer.fromJson<int>(json['usuarioRolGeoreferenciaId']),
      usuarioId: serializer.fromJson<int?>(json['usuarioId']),
      rolId: serializer.fromJson<int?>(json['rolId']),
      geoReferenciaId: serializer.fromJson<int?>(json['geoReferenciaId']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'usuarioRolGeoreferenciaId':
          serializer.toJson<int>(usuarioRolGeoreferenciaId),
      'usuarioId': serializer.toJson<int?>(usuarioId),
      'rolId': serializer.toJson<int?>(rolId),
      'geoReferenciaId': serializer.toJson<int?>(geoReferenciaId),
      'entidadId': serializer.toJson<int?>(entidadId),
    };
  }

  UsuarioRolGeoreferenciaData copyWith(
          {int? usuarioRolGeoreferenciaId,
          int? usuarioId,
          int? rolId,
          int? geoReferenciaId,
          int? entidadId}) =>
      UsuarioRolGeoreferenciaData(
        usuarioRolGeoreferenciaId:
            usuarioRolGeoreferenciaId ?? this.usuarioRolGeoreferenciaId,
        usuarioId: usuarioId ?? this.usuarioId,
        rolId: rolId ?? this.rolId,
        geoReferenciaId: geoReferenciaId ?? this.geoReferenciaId,
        entidadId: entidadId ?? this.entidadId,
      );
  @override
  String toString() {
    return (StringBuffer('UsuarioRolGeoreferenciaData(')
          ..write('usuarioRolGeoreferenciaId: $usuarioRolGeoreferenciaId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('rolId: $rolId, ')
          ..write('geoReferenciaId: $geoReferenciaId, ')
          ..write('entidadId: $entidadId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      usuarioRolGeoreferenciaId.hashCode,
      $mrjc(
          usuarioId.hashCode,
          $mrjc(rolId.hashCode,
              $mrjc(geoReferenciaId.hashCode, entidadId.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UsuarioRolGeoreferenciaData &&
          other.usuarioRolGeoreferenciaId == this.usuarioRolGeoreferenciaId &&
          other.usuarioId == this.usuarioId &&
          other.rolId == this.rolId &&
          other.geoReferenciaId == this.geoReferenciaId &&
          other.entidadId == this.entidadId);
}

class UsuarioRolGeoreferenciaCompanion
    extends UpdateCompanion<UsuarioRolGeoreferenciaData> {
  final Value<int> usuarioRolGeoreferenciaId;
  final Value<int?> usuarioId;
  final Value<int?> rolId;
  final Value<int?> geoReferenciaId;
  final Value<int?> entidadId;
  const UsuarioRolGeoreferenciaCompanion({
    this.usuarioRolGeoreferenciaId = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.rolId = const Value.absent(),
    this.geoReferenciaId = const Value.absent(),
    this.entidadId = const Value.absent(),
  });
  UsuarioRolGeoreferenciaCompanion.insert({
    this.usuarioRolGeoreferenciaId = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.rolId = const Value.absent(),
    this.geoReferenciaId = const Value.absent(),
    this.entidadId = const Value.absent(),
  });
  static Insertable<UsuarioRolGeoreferenciaData> custom({
    Expression<int>? usuarioRolGeoreferenciaId,
    Expression<int?>? usuarioId,
    Expression<int?>? rolId,
    Expression<int?>? geoReferenciaId,
    Expression<int?>? entidadId,
  }) {
    return RawValuesInsertable({
      if (usuarioRolGeoreferenciaId != null)
        'usuario_rol_georeferencia_id': usuarioRolGeoreferenciaId,
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (rolId != null) 'rol_id': rolId,
      if (geoReferenciaId != null) 'geo_referencia_id': geoReferenciaId,
      if (entidadId != null) 'entidad_id': entidadId,
    });
  }

  UsuarioRolGeoreferenciaCompanion copyWith(
      {Value<int>? usuarioRolGeoreferenciaId,
      Value<int?>? usuarioId,
      Value<int?>? rolId,
      Value<int?>? geoReferenciaId,
      Value<int?>? entidadId}) {
    return UsuarioRolGeoreferenciaCompanion(
      usuarioRolGeoreferenciaId:
          usuarioRolGeoreferenciaId ?? this.usuarioRolGeoreferenciaId,
      usuarioId: usuarioId ?? this.usuarioId,
      rolId: rolId ?? this.rolId,
      geoReferenciaId: geoReferenciaId ?? this.geoReferenciaId,
      entidadId: entidadId ?? this.entidadId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (usuarioRolGeoreferenciaId.present) {
      map['usuario_rol_georeferencia_id'] =
          Variable<int>(usuarioRolGeoreferenciaId.value);
    }
    if (usuarioId.present) {
      map['usuario_id'] = Variable<int?>(usuarioId.value);
    }
    if (rolId.present) {
      map['rol_id'] = Variable<int?>(rolId.value);
    }
    if (geoReferenciaId.present) {
      map['geo_referencia_id'] = Variable<int?>(geoReferenciaId.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UsuarioRolGeoreferenciaCompanion(')
          ..write('usuarioRolGeoreferenciaId: $usuarioRolGeoreferenciaId, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('rolId: $rolId, ')
          ..write('geoReferenciaId: $geoReferenciaId, ')
          ..write('entidadId: $entidadId')
          ..write(')'))
        .toString();
  }
}

class $UsuarioRolGeoreferenciaTable extends UsuarioRolGeoreferencia
    with TableInfo<$UsuarioRolGeoreferenciaTable, UsuarioRolGeoreferenciaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $UsuarioRolGeoreferenciaTable(this._db, [this._alias]);
  final VerificationMeta _usuarioRolGeoreferenciaIdMeta =
      const VerificationMeta('usuarioRolGeoreferenciaId');
  late final GeneratedColumn<int?> usuarioRolGeoreferenciaId =
      GeneratedColumn<int?>('usuario_rol_georeferencia_id', aliasedName, false,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioIdMeta = const VerificationMeta('usuarioId');
  late final GeneratedColumn<int?> usuarioId = GeneratedColumn<int?>(
      'usuario_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rolIdMeta = const VerificationMeta('rolId');
  late final GeneratedColumn<int?> rolId = GeneratedColumn<int?>(
      'rol_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _geoReferenciaIdMeta =
      const VerificationMeta('geoReferenciaId');
  late final GeneratedColumn<int?> geoReferenciaId = GeneratedColumn<int?>(
      'geo_referencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [usuarioRolGeoreferenciaId, usuarioId, rolId, geoReferenciaId, entidadId];
  @override
  String get aliasedName => _alias ?? 'usuario_rol_georeferencia';
  @override
  String get actualTableName => 'usuario_rol_georeferencia';
  @override
  VerificationContext validateIntegrity(
      Insertable<UsuarioRolGeoreferenciaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('usuario_rol_georeferencia_id')) {
      context.handle(
          _usuarioRolGeoreferenciaIdMeta,
          usuarioRolGeoreferenciaId.isAcceptableOrUnknown(
              data['usuario_rol_georeferencia_id']!,
              _usuarioRolGeoreferenciaIdMeta));
    }
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    }
    if (data.containsKey('rol_id')) {
      context.handle(
          _rolIdMeta, rolId.isAcceptableOrUnknown(data['rol_id']!, _rolIdMeta));
    }
    if (data.containsKey('geo_referencia_id')) {
      context.handle(
          _geoReferenciaIdMeta,
          geoReferenciaId.isAcceptableOrUnknown(
              data['geo_referencia_id']!, _geoReferenciaIdMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {usuarioRolGeoreferenciaId};
  @override
  UsuarioRolGeoreferenciaData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return UsuarioRolGeoreferenciaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $UsuarioRolGeoreferenciaTable createAlias(String alias) {
    return $UsuarioRolGeoreferenciaTable(_db, alias);
  }
}

class RolData extends DataClass implements Insertable<RolData> {
  final int rolId;
  final String? nombre;
  final int? parentId;
  final bool? estado;
  RolData({required this.rolId, this.nombre, this.parentId, this.estado});
  factory RolData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RolData(
      rolId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rol_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      parentId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parent_id']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['rol_id'] = Variable<int>(rolId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || parentId != null) {
      map['parent_id'] = Variable<int?>(parentId);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    return map;
  }

  RolCompanion toCompanion(bool nullToAbsent) {
    return RolCompanion(
      rolId: Value(rolId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      parentId: parentId == null && nullToAbsent
          ? const Value.absent()
          : Value(parentId),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
    );
  }

  factory RolData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RolData(
      rolId: serializer.fromJson<int>(json['rolId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      parentId: serializer.fromJson<int?>(json['parentId']),
      estado: serializer.fromJson<bool?>(json['estado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'rolId': serializer.toJson<int>(rolId),
      'nombre': serializer.toJson<String?>(nombre),
      'parentId': serializer.toJson<int?>(parentId),
      'estado': serializer.toJson<bool?>(estado),
    };
  }

  RolData copyWith({int? rolId, String? nombre, int? parentId, bool? estado}) =>
      RolData(
        rolId: rolId ?? this.rolId,
        nombre: nombre ?? this.nombre,
        parentId: parentId ?? this.parentId,
        estado: estado ?? this.estado,
      );
  @override
  String toString() {
    return (StringBuffer('RolData(')
          ..write('rolId: $rolId, ')
          ..write('nombre: $nombre, ')
          ..write('parentId: $parentId, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(rolId.hashCode,
      $mrjc(nombre.hashCode, $mrjc(parentId.hashCode, estado.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RolData &&
          other.rolId == this.rolId &&
          other.nombre == this.nombre &&
          other.parentId == this.parentId &&
          other.estado == this.estado);
}

class RolCompanion extends UpdateCompanion<RolData> {
  final Value<int> rolId;
  final Value<String?> nombre;
  final Value<int?> parentId;
  final Value<bool?> estado;
  const RolCompanion({
    this.rolId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.parentId = const Value.absent(),
    this.estado = const Value.absent(),
  });
  RolCompanion.insert({
    this.rolId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.parentId = const Value.absent(),
    this.estado = const Value.absent(),
  });
  static Insertable<RolData> custom({
    Expression<int>? rolId,
    Expression<String?>? nombre,
    Expression<int?>? parentId,
    Expression<bool?>? estado,
  }) {
    return RawValuesInsertable({
      if (rolId != null) 'rol_id': rolId,
      if (nombre != null) 'nombre': nombre,
      if (parentId != null) 'parent_id': parentId,
      if (estado != null) 'estado': estado,
    });
  }

  RolCompanion copyWith(
      {Value<int>? rolId,
      Value<String?>? nombre,
      Value<int?>? parentId,
      Value<bool?>? estado}) {
    return RolCompanion(
      rolId: rolId ?? this.rolId,
      nombre: nombre ?? this.nombre,
      parentId: parentId ?? this.parentId,
      estado: estado ?? this.estado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (rolId.present) {
      map['rol_id'] = Variable<int>(rolId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (parentId.present) {
      map['parent_id'] = Variable<int?>(parentId.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RolCompanion(')
          ..write('rolId: $rolId, ')
          ..write('nombre: $nombre, ')
          ..write('parentId: $parentId, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }
}

class $RolTable extends Rol with TableInfo<$RolTable, RolData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RolTable(this._db, [this._alias]);
  final VerificationMeta _rolIdMeta = const VerificationMeta('rolId');
  late final GeneratedColumn<int?> rolId = GeneratedColumn<int?>(
      'rol_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _parentIdMeta = const VerificationMeta('parentId');
  late final GeneratedColumn<int?> parentId = GeneratedColumn<int?>(
      'parent_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns => [rolId, nombre, parentId, estado];
  @override
  String get aliasedName => _alias ?? 'rol';
  @override
  String get actualTableName => 'rol';
  @override
  VerificationContext validateIntegrity(Insertable<RolData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('rol_id')) {
      context.handle(
          _rolIdMeta, rolId.isAcceptableOrUnknown(data['rol_id']!, _rolIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('parent_id')) {
      context.handle(_parentIdMeta,
          parentId.isAcceptableOrUnknown(data['parent_id']!, _parentIdMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {rolId};
  @override
  RolData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return RolData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RolTable createAlias(String alias) {
    return $RolTable(_db, alias);
  }
}

class GeoreferenciaData extends DataClass
    implements Insertable<GeoreferenciaData> {
  final int georeferenciaId;
  final String? nombre;
  final int? entidadId;
  final String? geoAlias;
  final int? estadoId;
  GeoreferenciaData(
      {required this.georeferenciaId,
      this.nombre,
      this.entidadId,
      this.geoAlias,
      this.estadoId});
  factory GeoreferenciaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return GeoreferenciaData(
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      geoAlias: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}geo_alias']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['georeferencia_id'] = Variable<int>(georeferenciaId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || geoAlias != null) {
      map['geo_alias'] = Variable<String?>(geoAlias);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    return map;
  }

  GeoreferenciaCompanion toCompanion(bool nullToAbsent) {
    return GeoreferenciaCompanion(
      georeferenciaId: Value(georeferenciaId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      geoAlias: geoAlias == null && nullToAbsent
          ? const Value.absent()
          : Value(geoAlias),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
    );
  }

  factory GeoreferenciaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return GeoreferenciaData(
      georeferenciaId: serializer.fromJson<int>(json['georeferenciaId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      geoAlias: serializer.fromJson<String?>(json['geoAlias']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'georeferenciaId': serializer.toJson<int>(georeferenciaId),
      'nombre': serializer.toJson<String?>(nombre),
      'entidadId': serializer.toJson<int?>(entidadId),
      'geoAlias': serializer.toJson<String?>(geoAlias),
      'estadoId': serializer.toJson<int?>(estadoId),
    };
  }

  GeoreferenciaData copyWith(
          {int? georeferenciaId,
          String? nombre,
          int? entidadId,
          String? geoAlias,
          int? estadoId}) =>
      GeoreferenciaData(
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        nombre: nombre ?? this.nombre,
        entidadId: entidadId ?? this.entidadId,
        geoAlias: geoAlias ?? this.geoAlias,
        estadoId: estadoId ?? this.estadoId,
      );
  @override
  String toString() {
    return (StringBuffer('GeoreferenciaData(')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('nombre: $nombre, ')
          ..write('entidadId: $entidadId, ')
          ..write('geoAlias: $geoAlias, ')
          ..write('estadoId: $estadoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      georeferenciaId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(entidadId.hashCode,
              $mrjc(geoAlias.hashCode, estadoId.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is GeoreferenciaData &&
          other.georeferenciaId == this.georeferenciaId &&
          other.nombre == this.nombre &&
          other.entidadId == this.entidadId &&
          other.geoAlias == this.geoAlias &&
          other.estadoId == this.estadoId);
}

class GeoreferenciaCompanion extends UpdateCompanion<GeoreferenciaData> {
  final Value<int> georeferenciaId;
  final Value<String?> nombre;
  final Value<int?> entidadId;
  final Value<String?> geoAlias;
  final Value<int?> estadoId;
  const GeoreferenciaCompanion({
    this.georeferenciaId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.geoAlias = const Value.absent(),
    this.estadoId = const Value.absent(),
  });
  GeoreferenciaCompanion.insert({
    this.georeferenciaId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.geoAlias = const Value.absent(),
    this.estadoId = const Value.absent(),
  });
  static Insertable<GeoreferenciaData> custom({
    Expression<int>? georeferenciaId,
    Expression<String?>? nombre,
    Expression<int?>? entidadId,
    Expression<String?>? geoAlias,
    Expression<int?>? estadoId,
  }) {
    return RawValuesInsertable({
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (nombre != null) 'nombre': nombre,
      if (entidadId != null) 'entidad_id': entidadId,
      if (geoAlias != null) 'geo_alias': geoAlias,
      if (estadoId != null) 'estado_id': estadoId,
    });
  }

  GeoreferenciaCompanion copyWith(
      {Value<int>? georeferenciaId,
      Value<String?>? nombre,
      Value<int?>? entidadId,
      Value<String?>? geoAlias,
      Value<int?>? estadoId}) {
    return GeoreferenciaCompanion(
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      nombre: nombre ?? this.nombre,
      entidadId: entidadId ?? this.entidadId,
      geoAlias: geoAlias ?? this.geoAlias,
      estadoId: estadoId ?? this.estadoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int>(georeferenciaId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (geoAlias.present) {
      map['geo_alias'] = Variable<String?>(geoAlias.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('GeoreferenciaCompanion(')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('nombre: $nombre, ')
          ..write('entidadId: $entidadId, ')
          ..write('geoAlias: $geoAlias, ')
          ..write('estadoId: $estadoId')
          ..write(')'))
        .toString();
  }
}

class $GeoreferenciaTable extends Georeferencia
    with TableInfo<$GeoreferenciaTable, GeoreferenciaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $GeoreferenciaTable(this._db, [this._alias]);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _geoAliasMeta = const VerificationMeta('geoAlias');
  late final GeneratedColumn<String?> geoAlias = GeneratedColumn<String?>(
      'geo_alias', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [georeferenciaId, nombre, entidadId, geoAlias, estadoId];
  @override
  String get aliasedName => _alias ?? 'georeferencia';
  @override
  String get actualTableName => 'georeferencia';
  @override
  VerificationContext validateIntegrity(Insertable<GeoreferenciaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('geo_alias')) {
      context.handle(_geoAliasMeta,
          geoAlias.isAcceptableOrUnknown(data['geo_alias']!, _geoAliasMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {georeferenciaId};
  @override
  GeoreferenciaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return GeoreferenciaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $GeoreferenciaTable createAlias(String alias) {
    return $GeoreferenciaTable(_db, alias);
  }
}

class EntidadData extends DataClass implements Insertable<EntidadData> {
  final int entidadId;
  final int? tipoId;
  final int? parentId;
  final String? nombre;
  final String? ruc;
  final String? site;
  final String? telefono;
  final String? correo;
  final String? foto;
  final int? estadoId;
  EntidadData(
      {required this.entidadId,
      this.tipoId,
      this.parentId,
      this.nombre,
      this.ruc,
      this.site,
      this.telefono,
      this.correo,
      this.foto,
      this.estadoId});
  factory EntidadData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EntidadData(
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id'])!,
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      parentId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parent_id']),
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      ruc: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ruc']),
      site: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}site']),
      telefono: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}telefono']),
      correo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}correo']),
      foto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['entidad_id'] = Variable<int>(entidadId);
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || parentId != null) {
      map['parent_id'] = Variable<int?>(parentId);
    }
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || ruc != null) {
      map['ruc'] = Variable<String?>(ruc);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String?>(site);
    }
    if (!nullToAbsent || telefono != null) {
      map['telefono'] = Variable<String?>(telefono);
    }
    if (!nullToAbsent || correo != null) {
      map['correo'] = Variable<String?>(correo);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<String?>(foto);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    return map;
  }

  EntidadCompanion toCompanion(bool nullToAbsent) {
    return EntidadCompanion(
      entidadId: Value(entidadId),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      parentId: parentId == null && nullToAbsent
          ? const Value.absent()
          : Value(parentId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      ruc: ruc == null && nullToAbsent ? const Value.absent() : Value(ruc),
      site: site == null && nullToAbsent ? const Value.absent() : Value(site),
      telefono: telefono == null && nullToAbsent
          ? const Value.absent()
          : Value(telefono),
      correo:
          correo == null && nullToAbsent ? const Value.absent() : Value(correo),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
    );
  }

  factory EntidadData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EntidadData(
      entidadId: serializer.fromJson<int>(json['entidadId']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      parentId: serializer.fromJson<int?>(json['parentId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      ruc: serializer.fromJson<String?>(json['ruc']),
      site: serializer.fromJson<String?>(json['site']),
      telefono: serializer.fromJson<String?>(json['telefono']),
      correo: serializer.fromJson<String?>(json['correo']),
      foto: serializer.fromJson<String?>(json['foto']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'entidadId': serializer.toJson<int>(entidadId),
      'tipoId': serializer.toJson<int?>(tipoId),
      'parentId': serializer.toJson<int?>(parentId),
      'nombre': serializer.toJson<String?>(nombre),
      'ruc': serializer.toJson<String?>(ruc),
      'site': serializer.toJson<String?>(site),
      'telefono': serializer.toJson<String?>(telefono),
      'correo': serializer.toJson<String?>(correo),
      'foto': serializer.toJson<String?>(foto),
      'estadoId': serializer.toJson<int?>(estadoId),
    };
  }

  EntidadData copyWith(
          {int? entidadId,
          int? tipoId,
          int? parentId,
          String? nombre,
          String? ruc,
          String? site,
          String? telefono,
          String? correo,
          String? foto,
          int? estadoId}) =>
      EntidadData(
        entidadId: entidadId ?? this.entidadId,
        tipoId: tipoId ?? this.tipoId,
        parentId: parentId ?? this.parentId,
        nombre: nombre ?? this.nombre,
        ruc: ruc ?? this.ruc,
        site: site ?? this.site,
        telefono: telefono ?? this.telefono,
        correo: correo ?? this.correo,
        foto: foto ?? this.foto,
        estadoId: estadoId ?? this.estadoId,
      );
  @override
  String toString() {
    return (StringBuffer('EntidadData(')
          ..write('entidadId: $entidadId, ')
          ..write('tipoId: $tipoId, ')
          ..write('parentId: $parentId, ')
          ..write('nombre: $nombre, ')
          ..write('ruc: $ruc, ')
          ..write('site: $site, ')
          ..write('telefono: $telefono, ')
          ..write('correo: $correo, ')
          ..write('foto: $foto, ')
          ..write('estadoId: $estadoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      entidadId.hashCode,
      $mrjc(
          tipoId.hashCode,
          $mrjc(
              parentId.hashCode,
              $mrjc(
                  nombre.hashCode,
                  $mrjc(
                      ruc.hashCode,
                      $mrjc(
                          site.hashCode,
                          $mrjc(
                              telefono.hashCode,
                              $mrjc(
                                  correo.hashCode,
                                  $mrjc(foto.hashCode,
                                      estadoId.hashCode))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EntidadData &&
          other.entidadId == this.entidadId &&
          other.tipoId == this.tipoId &&
          other.parentId == this.parentId &&
          other.nombre == this.nombre &&
          other.ruc == this.ruc &&
          other.site == this.site &&
          other.telefono == this.telefono &&
          other.correo == this.correo &&
          other.foto == this.foto &&
          other.estadoId == this.estadoId);
}

class EntidadCompanion extends UpdateCompanion<EntidadData> {
  final Value<int> entidadId;
  final Value<int?> tipoId;
  final Value<int?> parentId;
  final Value<String?> nombre;
  final Value<String?> ruc;
  final Value<String?> site;
  final Value<String?> telefono;
  final Value<String?> correo;
  final Value<String?> foto;
  final Value<int?> estadoId;
  const EntidadCompanion({
    this.entidadId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.parentId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.ruc = const Value.absent(),
    this.site = const Value.absent(),
    this.telefono = const Value.absent(),
    this.correo = const Value.absent(),
    this.foto = const Value.absent(),
    this.estadoId = const Value.absent(),
  });
  EntidadCompanion.insert({
    this.entidadId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.parentId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.ruc = const Value.absent(),
    this.site = const Value.absent(),
    this.telefono = const Value.absent(),
    this.correo = const Value.absent(),
    this.foto = const Value.absent(),
    this.estadoId = const Value.absent(),
  });
  static Insertable<EntidadData> custom({
    Expression<int>? entidadId,
    Expression<int?>? tipoId,
    Expression<int?>? parentId,
    Expression<String?>? nombre,
    Expression<String?>? ruc,
    Expression<String?>? site,
    Expression<String?>? telefono,
    Expression<String?>? correo,
    Expression<String?>? foto,
    Expression<int?>? estadoId,
  }) {
    return RawValuesInsertable({
      if (entidadId != null) 'entidad_id': entidadId,
      if (tipoId != null) 'tipo_id': tipoId,
      if (parentId != null) 'parent_id': parentId,
      if (nombre != null) 'nombre': nombre,
      if (ruc != null) 'ruc': ruc,
      if (site != null) 'site': site,
      if (telefono != null) 'telefono': telefono,
      if (correo != null) 'correo': correo,
      if (foto != null) 'foto': foto,
      if (estadoId != null) 'estado_id': estadoId,
    });
  }

  EntidadCompanion copyWith(
      {Value<int>? entidadId,
      Value<int?>? tipoId,
      Value<int?>? parentId,
      Value<String?>? nombre,
      Value<String?>? ruc,
      Value<String?>? site,
      Value<String?>? telefono,
      Value<String?>? correo,
      Value<String?>? foto,
      Value<int?>? estadoId}) {
    return EntidadCompanion(
      entidadId: entidadId ?? this.entidadId,
      tipoId: tipoId ?? this.tipoId,
      parentId: parentId ?? this.parentId,
      nombre: nombre ?? this.nombre,
      ruc: ruc ?? this.ruc,
      site: site ?? this.site,
      telefono: telefono ?? this.telefono,
      correo: correo ?? this.correo,
      foto: foto ?? this.foto,
      estadoId: estadoId ?? this.estadoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (entidadId.present) {
      map['entidad_id'] = Variable<int>(entidadId.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (parentId.present) {
      map['parent_id'] = Variable<int?>(parentId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (ruc.present) {
      map['ruc'] = Variable<String?>(ruc.value);
    }
    if (site.present) {
      map['site'] = Variable<String?>(site.value);
    }
    if (telefono.present) {
      map['telefono'] = Variable<String?>(telefono.value);
    }
    if (correo.present) {
      map['correo'] = Variable<String?>(correo.value);
    }
    if (foto.present) {
      map['foto'] = Variable<String?>(foto.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EntidadCompanion(')
          ..write('entidadId: $entidadId, ')
          ..write('tipoId: $tipoId, ')
          ..write('parentId: $parentId, ')
          ..write('nombre: $nombre, ')
          ..write('ruc: $ruc, ')
          ..write('site: $site, ')
          ..write('telefono: $telefono, ')
          ..write('correo: $correo, ')
          ..write('foto: $foto, ')
          ..write('estadoId: $estadoId')
          ..write(')'))
        .toString();
  }
}

class $EntidadTable extends Entidad with TableInfo<$EntidadTable, EntidadData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $EntidadTable(this._db, [this._alias]);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _parentIdMeta = const VerificationMeta('parentId');
  late final GeneratedColumn<int?> parentId = GeneratedColumn<int?>(
      'parent_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _rucMeta = const VerificationMeta('ruc');
  late final GeneratedColumn<String?> ruc = GeneratedColumn<String?>(
      'ruc', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _siteMeta = const VerificationMeta('site');
  late final GeneratedColumn<String?> site = GeneratedColumn<String?>(
      'site', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _telefonoMeta = const VerificationMeta('telefono');
  late final GeneratedColumn<String?> telefono = GeneratedColumn<String?>(
      'telefono', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _correoMeta = const VerificationMeta('correo');
  late final GeneratedColumn<String?> correo = GeneratedColumn<String?>(
      'correo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fotoMeta = const VerificationMeta('foto');
  late final GeneratedColumn<String?> foto = GeneratedColumn<String?>(
      'foto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        entidadId,
        tipoId,
        parentId,
        nombre,
        ruc,
        site,
        telefono,
        correo,
        foto,
        estadoId
      ];
  @override
  String get aliasedName => _alias ?? 'entidad';
  @override
  String get actualTableName => 'entidad';
  @override
  VerificationContext validateIntegrity(Insertable<EntidadData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('parent_id')) {
      context.handle(_parentIdMeta,
          parentId.isAcceptableOrUnknown(data['parent_id']!, _parentIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('ruc')) {
      context.handle(
          _rucMeta, ruc.isAcceptableOrUnknown(data['ruc']!, _rucMeta));
    }
    if (data.containsKey('site')) {
      context.handle(
          _siteMeta, site.isAcceptableOrUnknown(data['site']!, _siteMeta));
    }
    if (data.containsKey('telefono')) {
      context.handle(_telefonoMeta,
          telefono.isAcceptableOrUnknown(data['telefono']!, _telefonoMeta));
    }
    if (data.containsKey('correo')) {
      context.handle(_correoMeta,
          correo.isAcceptableOrUnknown(data['correo']!, _correoMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {entidadId};
  @override
  EntidadData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EntidadData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EntidadTable createAlias(String alias) {
    return $EntidadTable(_db, alias);
  }
}

class PersonaData extends DataClass implements Insertable<PersonaData> {
  final int personaId;
  final String? nombres;
  final String? apellidoPaterno;
  final String? apellidoMaterno;
  final String? celular;
  final String? telefono;
  final String? foto;
  final String? fechaNac;
  final String? genero;
  final String? estadoCivil;
  final String? numDoc;
  final String? ocupacion;
  final int? estadoId;
  final String? correo;
  final String? direccion;
  final String? path;
  PersonaData(
      {required this.personaId,
      this.nombres,
      this.apellidoPaterno,
      this.apellidoMaterno,
      this.celular,
      this.telefono,
      this.foto,
      this.fechaNac,
      this.genero,
      this.estadoCivil,
      this.numDoc,
      this.ocupacion,
      this.estadoId,
      this.correo,
      this.direccion,
      this.path});
  factory PersonaData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PersonaData(
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id'])!,
      nombres: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombres']),
      apellidoPaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_paterno']),
      apellidoMaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_materno']),
      celular: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}celular']),
      telefono: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}telefono']),
      foto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto']),
      fechaNac: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_nac']),
      genero: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}genero']),
      estadoCivil: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_civil']),
      numDoc: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}num_doc']),
      ocupacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ocupacion']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      correo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}correo']),
      direccion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}direccion']),
      path: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}path']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['persona_id'] = Variable<int>(personaId);
    if (!nullToAbsent || nombres != null) {
      map['nombres'] = Variable<String?>(nombres);
    }
    if (!nullToAbsent || apellidoPaterno != null) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno);
    }
    if (!nullToAbsent || apellidoMaterno != null) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno);
    }
    if (!nullToAbsent || celular != null) {
      map['celular'] = Variable<String?>(celular);
    }
    if (!nullToAbsent || telefono != null) {
      map['telefono'] = Variable<String?>(telefono);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<String?>(foto);
    }
    if (!nullToAbsent || fechaNac != null) {
      map['fecha_nac'] = Variable<String?>(fechaNac);
    }
    if (!nullToAbsent || genero != null) {
      map['genero'] = Variable<String?>(genero);
    }
    if (!nullToAbsent || estadoCivil != null) {
      map['estado_civil'] = Variable<String?>(estadoCivil);
    }
    if (!nullToAbsent || numDoc != null) {
      map['num_doc'] = Variable<String?>(numDoc);
    }
    if (!nullToAbsent || ocupacion != null) {
      map['ocupacion'] = Variable<String?>(ocupacion);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || correo != null) {
      map['correo'] = Variable<String?>(correo);
    }
    if (!nullToAbsent || direccion != null) {
      map['direccion'] = Variable<String?>(direccion);
    }
    if (!nullToAbsent || path != null) {
      map['path'] = Variable<String?>(path);
    }
    return map;
  }

  PersonaCompanion toCompanion(bool nullToAbsent) {
    return PersonaCompanion(
      personaId: Value(personaId),
      nombres: nombres == null && nullToAbsent
          ? const Value.absent()
          : Value(nombres),
      apellidoPaterno: apellidoPaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoPaterno),
      apellidoMaterno: apellidoMaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoMaterno),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      telefono: telefono == null && nullToAbsent
          ? const Value.absent()
          : Value(telefono),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      fechaNac: fechaNac == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaNac),
      genero:
          genero == null && nullToAbsent ? const Value.absent() : Value(genero),
      estadoCivil: estadoCivil == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoCivil),
      numDoc:
          numDoc == null && nullToAbsent ? const Value.absent() : Value(numDoc),
      ocupacion: ocupacion == null && nullToAbsent
          ? const Value.absent()
          : Value(ocupacion),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      correo:
          correo == null && nullToAbsent ? const Value.absent() : Value(correo),
      direccion: direccion == null && nullToAbsent
          ? const Value.absent()
          : Value(direccion),
      path: path == null && nullToAbsent ? const Value.absent() : Value(path),
    );
  }

  factory PersonaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PersonaData(
      personaId: serializer.fromJson<int>(json['personaId']),
      nombres: serializer.fromJson<String?>(json['nombres']),
      apellidoPaterno: serializer.fromJson<String?>(json['apellidoPaterno']),
      apellidoMaterno: serializer.fromJson<String?>(json['apellidoMaterno']),
      celular: serializer.fromJson<String?>(json['celular']),
      telefono: serializer.fromJson<String?>(json['telefono']),
      foto: serializer.fromJson<String?>(json['foto']),
      fechaNac: serializer.fromJson<String?>(json['fechaNac']),
      genero: serializer.fromJson<String?>(json['genero']),
      estadoCivil: serializer.fromJson<String?>(json['estadoCivil']),
      numDoc: serializer.fromJson<String?>(json['numDoc']),
      ocupacion: serializer.fromJson<String?>(json['ocupacion']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      correo: serializer.fromJson<String?>(json['correo']),
      direccion: serializer.fromJson<String?>(json['direccion']),
      path: serializer.fromJson<String?>(json['path']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'personaId': serializer.toJson<int>(personaId),
      'nombres': serializer.toJson<String?>(nombres),
      'apellidoPaterno': serializer.toJson<String?>(apellidoPaterno),
      'apellidoMaterno': serializer.toJson<String?>(apellidoMaterno),
      'celular': serializer.toJson<String?>(celular),
      'telefono': serializer.toJson<String?>(telefono),
      'foto': serializer.toJson<String?>(foto),
      'fechaNac': serializer.toJson<String?>(fechaNac),
      'genero': serializer.toJson<String?>(genero),
      'estadoCivil': serializer.toJson<String?>(estadoCivil),
      'numDoc': serializer.toJson<String?>(numDoc),
      'ocupacion': serializer.toJson<String?>(ocupacion),
      'estadoId': serializer.toJson<int?>(estadoId),
      'correo': serializer.toJson<String?>(correo),
      'direccion': serializer.toJson<String?>(direccion),
      'path': serializer.toJson<String?>(path),
    };
  }

  PersonaData copyWith(
          {int? personaId,
          String? nombres,
          String? apellidoPaterno,
          String? apellidoMaterno,
          String? celular,
          String? telefono,
          String? foto,
          String? fechaNac,
          String? genero,
          String? estadoCivil,
          String? numDoc,
          String? ocupacion,
          int? estadoId,
          String? correo,
          String? direccion,
          String? path}) =>
      PersonaData(
        personaId: personaId ?? this.personaId,
        nombres: nombres ?? this.nombres,
        apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
        apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
        celular: celular ?? this.celular,
        telefono: telefono ?? this.telefono,
        foto: foto ?? this.foto,
        fechaNac: fechaNac ?? this.fechaNac,
        genero: genero ?? this.genero,
        estadoCivil: estadoCivil ?? this.estadoCivil,
        numDoc: numDoc ?? this.numDoc,
        ocupacion: ocupacion ?? this.ocupacion,
        estadoId: estadoId ?? this.estadoId,
        correo: correo ?? this.correo,
        direccion: direccion ?? this.direccion,
        path: path ?? this.path,
      );
  @override
  String toString() {
    return (StringBuffer('PersonaData(')
          ..write('personaId: $personaId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('celular: $celular, ')
          ..write('telefono: $telefono, ')
          ..write('foto: $foto, ')
          ..write('fechaNac: $fechaNac, ')
          ..write('genero: $genero, ')
          ..write('estadoCivil: $estadoCivil, ')
          ..write('numDoc: $numDoc, ')
          ..write('ocupacion: $ocupacion, ')
          ..write('estadoId: $estadoId, ')
          ..write('correo: $correo, ')
          ..write('direccion: $direccion, ')
          ..write('path: $path')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      personaId.hashCode,
      $mrjc(
          nombres.hashCode,
          $mrjc(
              apellidoPaterno.hashCode,
              $mrjc(
                  apellidoMaterno.hashCode,
                  $mrjc(
                      celular.hashCode,
                      $mrjc(
                          telefono.hashCode,
                          $mrjc(
                              foto.hashCode,
                              $mrjc(
                                  fechaNac.hashCode,
                                  $mrjc(
                                      genero.hashCode,
                                      $mrjc(
                                          estadoCivil.hashCode,
                                          $mrjc(
                                              numDoc.hashCode,
                                              $mrjc(
                                                  ocupacion.hashCode,
                                                  $mrjc(
                                                      estadoId.hashCode,
                                                      $mrjc(
                                                          correo.hashCode,
                                                          $mrjc(
                                                              direccion
                                                                  .hashCode,
                                                              path.hashCode))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PersonaData &&
          other.personaId == this.personaId &&
          other.nombres == this.nombres &&
          other.apellidoPaterno == this.apellidoPaterno &&
          other.apellidoMaterno == this.apellidoMaterno &&
          other.celular == this.celular &&
          other.telefono == this.telefono &&
          other.foto == this.foto &&
          other.fechaNac == this.fechaNac &&
          other.genero == this.genero &&
          other.estadoCivil == this.estadoCivil &&
          other.numDoc == this.numDoc &&
          other.ocupacion == this.ocupacion &&
          other.estadoId == this.estadoId &&
          other.correo == this.correo &&
          other.direccion == this.direccion &&
          other.path == this.path);
}

class PersonaCompanion extends UpdateCompanion<PersonaData> {
  final Value<int> personaId;
  final Value<String?> nombres;
  final Value<String?> apellidoPaterno;
  final Value<String?> apellidoMaterno;
  final Value<String?> celular;
  final Value<String?> telefono;
  final Value<String?> foto;
  final Value<String?> fechaNac;
  final Value<String?> genero;
  final Value<String?> estadoCivil;
  final Value<String?> numDoc;
  final Value<String?> ocupacion;
  final Value<int?> estadoId;
  final Value<String?> correo;
  final Value<String?> direccion;
  final Value<String?> path;
  const PersonaCompanion({
    this.personaId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.celular = const Value.absent(),
    this.telefono = const Value.absent(),
    this.foto = const Value.absent(),
    this.fechaNac = const Value.absent(),
    this.genero = const Value.absent(),
    this.estadoCivil = const Value.absent(),
    this.numDoc = const Value.absent(),
    this.ocupacion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.correo = const Value.absent(),
    this.direccion = const Value.absent(),
    this.path = const Value.absent(),
  });
  PersonaCompanion.insert({
    this.personaId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.celular = const Value.absent(),
    this.telefono = const Value.absent(),
    this.foto = const Value.absent(),
    this.fechaNac = const Value.absent(),
    this.genero = const Value.absent(),
    this.estadoCivil = const Value.absent(),
    this.numDoc = const Value.absent(),
    this.ocupacion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.correo = const Value.absent(),
    this.direccion = const Value.absent(),
    this.path = const Value.absent(),
  });
  static Insertable<PersonaData> custom({
    Expression<int>? personaId,
    Expression<String?>? nombres,
    Expression<String?>? apellidoPaterno,
    Expression<String?>? apellidoMaterno,
    Expression<String?>? celular,
    Expression<String?>? telefono,
    Expression<String?>? foto,
    Expression<String?>? fechaNac,
    Expression<String?>? genero,
    Expression<String?>? estadoCivil,
    Expression<String?>? numDoc,
    Expression<String?>? ocupacion,
    Expression<int?>? estadoId,
    Expression<String?>? correo,
    Expression<String?>? direccion,
    Expression<String?>? path,
  }) {
    return RawValuesInsertable({
      if (personaId != null) 'persona_id': personaId,
      if (nombres != null) 'nombres': nombres,
      if (apellidoPaterno != null) 'apellido_paterno': apellidoPaterno,
      if (apellidoMaterno != null) 'apellido_materno': apellidoMaterno,
      if (celular != null) 'celular': celular,
      if (telefono != null) 'telefono': telefono,
      if (foto != null) 'foto': foto,
      if (fechaNac != null) 'fecha_nac': fechaNac,
      if (genero != null) 'genero': genero,
      if (estadoCivil != null) 'estado_civil': estadoCivil,
      if (numDoc != null) 'num_doc': numDoc,
      if (ocupacion != null) 'ocupacion': ocupacion,
      if (estadoId != null) 'estado_id': estadoId,
      if (correo != null) 'correo': correo,
      if (direccion != null) 'direccion': direccion,
      if (path != null) 'path': path,
    });
  }

  PersonaCompanion copyWith(
      {Value<int>? personaId,
      Value<String?>? nombres,
      Value<String?>? apellidoPaterno,
      Value<String?>? apellidoMaterno,
      Value<String?>? celular,
      Value<String?>? telefono,
      Value<String?>? foto,
      Value<String?>? fechaNac,
      Value<String?>? genero,
      Value<String?>? estadoCivil,
      Value<String?>? numDoc,
      Value<String?>? ocupacion,
      Value<int?>? estadoId,
      Value<String?>? correo,
      Value<String?>? direccion,
      Value<String?>? path}) {
    return PersonaCompanion(
      personaId: personaId ?? this.personaId,
      nombres: nombres ?? this.nombres,
      apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
      apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
      celular: celular ?? this.celular,
      telefono: telefono ?? this.telefono,
      foto: foto ?? this.foto,
      fechaNac: fechaNac ?? this.fechaNac,
      genero: genero ?? this.genero,
      estadoCivil: estadoCivil ?? this.estadoCivil,
      numDoc: numDoc ?? this.numDoc,
      ocupacion: ocupacion ?? this.ocupacion,
      estadoId: estadoId ?? this.estadoId,
      correo: correo ?? this.correo,
      direccion: direccion ?? this.direccion,
      path: path ?? this.path,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (personaId.present) {
      map['persona_id'] = Variable<int>(personaId.value);
    }
    if (nombres.present) {
      map['nombres'] = Variable<String?>(nombres.value);
    }
    if (apellidoPaterno.present) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno.value);
    }
    if (apellidoMaterno.present) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno.value);
    }
    if (celular.present) {
      map['celular'] = Variable<String?>(celular.value);
    }
    if (telefono.present) {
      map['telefono'] = Variable<String?>(telefono.value);
    }
    if (foto.present) {
      map['foto'] = Variable<String?>(foto.value);
    }
    if (fechaNac.present) {
      map['fecha_nac'] = Variable<String?>(fechaNac.value);
    }
    if (genero.present) {
      map['genero'] = Variable<String?>(genero.value);
    }
    if (estadoCivil.present) {
      map['estado_civil'] = Variable<String?>(estadoCivil.value);
    }
    if (numDoc.present) {
      map['num_doc'] = Variable<String?>(numDoc.value);
    }
    if (ocupacion.present) {
      map['ocupacion'] = Variable<String?>(ocupacion.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (correo.present) {
      map['correo'] = Variable<String?>(correo.value);
    }
    if (direccion.present) {
      map['direccion'] = Variable<String?>(direccion.value);
    }
    if (path.present) {
      map['path'] = Variable<String?>(path.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PersonaCompanion(')
          ..write('personaId: $personaId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('celular: $celular, ')
          ..write('telefono: $telefono, ')
          ..write('foto: $foto, ')
          ..write('fechaNac: $fechaNac, ')
          ..write('genero: $genero, ')
          ..write('estadoCivil: $estadoCivil, ')
          ..write('numDoc: $numDoc, ')
          ..write('ocupacion: $ocupacion, ')
          ..write('estadoId: $estadoId, ')
          ..write('correo: $correo, ')
          ..write('direccion: $direccion, ')
          ..write('path: $path')
          ..write(')'))
        .toString();
  }
}

class $PersonaTable extends Persona with TableInfo<$PersonaTable, PersonaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $PersonaTable(this._db, [this._alias]);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombresMeta = const VerificationMeta('nombres');
  late final GeneratedColumn<String?> nombres = GeneratedColumn<String?>(
      'nombres', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoPaternoMeta =
      const VerificationMeta('apellidoPaterno');
  late final GeneratedColumn<String?> apellidoPaterno =
      GeneratedColumn<String?>('apellido_paterno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoMaternoMeta =
      const VerificationMeta('apellidoMaterno');
  late final GeneratedColumn<String?> apellidoMaterno =
      GeneratedColumn<String?>('apellido_materno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
      'celular', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _telefonoMeta = const VerificationMeta('telefono');
  late final GeneratedColumn<String?> telefono = GeneratedColumn<String?>(
      'telefono', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fotoMeta = const VerificationMeta('foto');
  late final GeneratedColumn<String?> foto = GeneratedColumn<String?>(
      'foto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaNacMeta = const VerificationMeta('fechaNac');
  late final GeneratedColumn<String?> fechaNac = GeneratedColumn<String?>(
      'fecha_nac', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _generoMeta = const VerificationMeta('genero');
  late final GeneratedColumn<String?> genero = GeneratedColumn<String?>(
      'genero', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoCivilMeta =
      const VerificationMeta('estadoCivil');
  late final GeneratedColumn<String?> estadoCivil = GeneratedColumn<String?>(
      'estado_civil', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _numDocMeta = const VerificationMeta('numDoc');
  late final GeneratedColumn<String?> numDoc = GeneratedColumn<String?>(
      'num_doc', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _ocupacionMeta = const VerificationMeta('ocupacion');
  late final GeneratedColumn<String?> ocupacion = GeneratedColumn<String?>(
      'ocupacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _correoMeta = const VerificationMeta('correo');
  late final GeneratedColumn<String?> correo = GeneratedColumn<String?>(
      'correo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _direccionMeta = const VerificationMeta('direccion');
  late final GeneratedColumn<String?> direccion = GeneratedColumn<String?>(
      'direccion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _pathMeta = const VerificationMeta('path');
  late final GeneratedColumn<String?> path = GeneratedColumn<String?>(
      'path', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        personaId,
        nombres,
        apellidoPaterno,
        apellidoMaterno,
        celular,
        telefono,
        foto,
        fechaNac,
        genero,
        estadoCivil,
        numDoc,
        ocupacion,
        estadoId,
        correo,
        direccion,
        path
      ];
  @override
  String get aliasedName => _alias ?? 'persona';
  @override
  String get actualTableName => 'persona';
  @override
  VerificationContext validateIntegrity(Insertable<PersonaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    }
    if (data.containsKey('nombres')) {
      context.handle(_nombresMeta,
          nombres.isAcceptableOrUnknown(data['nombres']!, _nombresMeta));
    }
    if (data.containsKey('apellido_paterno')) {
      context.handle(
          _apellidoPaternoMeta,
          apellidoPaterno.isAcceptableOrUnknown(
              data['apellido_paterno']!, _apellidoPaternoMeta));
    }
    if (data.containsKey('apellido_materno')) {
      context.handle(
          _apellidoMaternoMeta,
          apellidoMaterno.isAcceptableOrUnknown(
              data['apellido_materno']!, _apellidoMaternoMeta));
    }
    if (data.containsKey('celular')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['celular']!, _celularMeta));
    }
    if (data.containsKey('telefono')) {
      context.handle(_telefonoMeta,
          telefono.isAcceptableOrUnknown(data['telefono']!, _telefonoMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('fecha_nac')) {
      context.handle(_fechaNacMeta,
          fechaNac.isAcceptableOrUnknown(data['fecha_nac']!, _fechaNacMeta));
    }
    if (data.containsKey('genero')) {
      context.handle(_generoMeta,
          genero.isAcceptableOrUnknown(data['genero']!, _generoMeta));
    }
    if (data.containsKey('estado_civil')) {
      context.handle(
          _estadoCivilMeta,
          estadoCivil.isAcceptableOrUnknown(
              data['estado_civil']!, _estadoCivilMeta));
    }
    if (data.containsKey('num_doc')) {
      context.handle(_numDocMeta,
          numDoc.isAcceptableOrUnknown(data['num_doc']!, _numDocMeta));
    }
    if (data.containsKey('ocupacion')) {
      context.handle(_ocupacionMeta,
          ocupacion.isAcceptableOrUnknown(data['ocupacion']!, _ocupacionMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('correo')) {
      context.handle(_correoMeta,
          correo.isAcceptableOrUnknown(data['correo']!, _correoMeta));
    }
    if (data.containsKey('direccion')) {
      context.handle(_direccionMeta,
          direccion.isAcceptableOrUnknown(data['direccion']!, _direccionMeta));
    }
    if (data.containsKey('path')) {
      context.handle(
          _pathMeta, path.isAcceptableOrUnknown(data['path']!, _pathMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {personaId};
  @override
  PersonaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PersonaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PersonaTable createAlias(String alias) {
    return $PersonaTable(_db, alias);
  }
}

class EmpleadoData extends DataClass implements Insertable<EmpleadoData> {
  final int empleadoId;
  final int? personaId;
  final String? linkURL;
  final bool? estado;
  final int? tipoId;
  final String? web;
  EmpleadoData(
      {required this.empleadoId,
      this.personaId,
      this.linkURL,
      this.estado,
      this.tipoId,
      this.web});
  factory EmpleadoData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EmpleadoData(
      empleadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}empleado_id'])!,
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id']),
      linkURL: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}link_u_r_l']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      web: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}web']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['empleado_id'] = Variable<int>(empleadoId);
    if (!nullToAbsent || personaId != null) {
      map['persona_id'] = Variable<int?>(personaId);
    }
    if (!nullToAbsent || linkURL != null) {
      map['link_u_r_l'] = Variable<String?>(linkURL);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || web != null) {
      map['web'] = Variable<String?>(web);
    }
    return map;
  }

  EmpleadoCompanion toCompanion(bool nullToAbsent) {
    return EmpleadoCompanion(
      empleadoId: Value(empleadoId),
      personaId: personaId == null && nullToAbsent
          ? const Value.absent()
          : Value(personaId),
      linkURL: linkURL == null && nullToAbsent
          ? const Value.absent()
          : Value(linkURL),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      web: web == null && nullToAbsent ? const Value.absent() : Value(web),
    );
  }

  factory EmpleadoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EmpleadoData(
      empleadoId: serializer.fromJson<int>(json['empleadoId']),
      personaId: serializer.fromJson<int?>(json['personaId']),
      linkURL: serializer.fromJson<String?>(json['linkURL']),
      estado: serializer.fromJson<bool?>(json['estado']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      web: serializer.fromJson<String?>(json['web']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'empleadoId': serializer.toJson<int>(empleadoId),
      'personaId': serializer.toJson<int?>(personaId),
      'linkURL': serializer.toJson<String?>(linkURL),
      'estado': serializer.toJson<bool?>(estado),
      'tipoId': serializer.toJson<int?>(tipoId),
      'web': serializer.toJson<String?>(web),
    };
  }

  EmpleadoData copyWith(
          {int? empleadoId,
          int? personaId,
          String? linkURL,
          bool? estado,
          int? tipoId,
          String? web}) =>
      EmpleadoData(
        empleadoId: empleadoId ?? this.empleadoId,
        personaId: personaId ?? this.personaId,
        linkURL: linkURL ?? this.linkURL,
        estado: estado ?? this.estado,
        tipoId: tipoId ?? this.tipoId,
        web: web ?? this.web,
      );
  @override
  String toString() {
    return (StringBuffer('EmpleadoData(')
          ..write('empleadoId: $empleadoId, ')
          ..write('personaId: $personaId, ')
          ..write('linkURL: $linkURL, ')
          ..write('estado: $estado, ')
          ..write('tipoId: $tipoId, ')
          ..write('web: $web')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      empleadoId.hashCode,
      $mrjc(
          personaId.hashCode,
          $mrjc(linkURL.hashCode,
              $mrjc(estado.hashCode, $mrjc(tipoId.hashCode, web.hashCode))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EmpleadoData &&
          other.empleadoId == this.empleadoId &&
          other.personaId == this.personaId &&
          other.linkURL == this.linkURL &&
          other.estado == this.estado &&
          other.tipoId == this.tipoId &&
          other.web == this.web);
}

class EmpleadoCompanion extends UpdateCompanion<EmpleadoData> {
  final Value<int> empleadoId;
  final Value<int?> personaId;
  final Value<String?> linkURL;
  final Value<bool?> estado;
  final Value<int?> tipoId;
  final Value<String?> web;
  const EmpleadoCompanion({
    this.empleadoId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.linkURL = const Value.absent(),
    this.estado = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.web = const Value.absent(),
  });
  EmpleadoCompanion.insert({
    this.empleadoId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.linkURL = const Value.absent(),
    this.estado = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.web = const Value.absent(),
  });
  static Insertable<EmpleadoData> custom({
    Expression<int>? empleadoId,
    Expression<int?>? personaId,
    Expression<String?>? linkURL,
    Expression<bool?>? estado,
    Expression<int?>? tipoId,
    Expression<String?>? web,
  }) {
    return RawValuesInsertable({
      if (empleadoId != null) 'empleado_id': empleadoId,
      if (personaId != null) 'persona_id': personaId,
      if (linkURL != null) 'link_u_r_l': linkURL,
      if (estado != null) 'estado': estado,
      if (tipoId != null) 'tipo_id': tipoId,
      if (web != null) 'web': web,
    });
  }

  EmpleadoCompanion copyWith(
      {Value<int>? empleadoId,
      Value<int?>? personaId,
      Value<String?>? linkURL,
      Value<bool?>? estado,
      Value<int?>? tipoId,
      Value<String?>? web}) {
    return EmpleadoCompanion(
      empleadoId: empleadoId ?? this.empleadoId,
      personaId: personaId ?? this.personaId,
      linkURL: linkURL ?? this.linkURL,
      estado: estado ?? this.estado,
      tipoId: tipoId ?? this.tipoId,
      web: web ?? this.web,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (empleadoId.present) {
      map['empleado_id'] = Variable<int>(empleadoId.value);
    }
    if (personaId.present) {
      map['persona_id'] = Variable<int?>(personaId.value);
    }
    if (linkURL.present) {
      map['link_u_r_l'] = Variable<String?>(linkURL.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (web.present) {
      map['web'] = Variable<String?>(web.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmpleadoCompanion(')
          ..write('empleadoId: $empleadoId, ')
          ..write('personaId: $personaId, ')
          ..write('linkURL: $linkURL, ')
          ..write('estado: $estado, ')
          ..write('tipoId: $tipoId, ')
          ..write('web: $web')
          ..write(')'))
        .toString();
  }
}

class $EmpleadoTable extends Empleado
    with TableInfo<$EmpleadoTable, EmpleadoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $EmpleadoTable(this._db, [this._alias]);
  final VerificationMeta _empleadoIdMeta = const VerificationMeta('empleadoId');
  late final GeneratedColumn<int?> empleadoId = GeneratedColumn<int?>(
      'empleado_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _linkURLMeta = const VerificationMeta('linkURL');
  late final GeneratedColumn<String?> linkURL = GeneratedColumn<String?>(
      'link_u_r_l', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _webMeta = const VerificationMeta('web');
  late final GeneratedColumn<String?> web = GeneratedColumn<String?>(
      'web', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [empleadoId, personaId, linkURL, estado, tipoId, web];
  @override
  String get aliasedName => _alias ?? 'empleado';
  @override
  String get actualTableName => 'empleado';
  @override
  VerificationContext validateIntegrity(Insertable<EmpleadoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('empleado_id')) {
      context.handle(
          _empleadoIdMeta,
          empleadoId.isAcceptableOrUnknown(
              data['empleado_id']!, _empleadoIdMeta));
    }
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    }
    if (data.containsKey('link_u_r_l')) {
      context.handle(_linkURLMeta,
          linkURL.isAcceptableOrUnknown(data['link_u_r_l']!, _linkURLMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('web')) {
      context.handle(
          _webMeta, web.isAcceptableOrUnknown(data['web']!, _webMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {empleadoId};
  @override
  EmpleadoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EmpleadoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EmpleadoTable createAlias(String alias) {
    return $EmpleadoTable(_db, alias);
  }
}

class AnioAcademicoData extends DataClass
    implements Insertable<AnioAcademicoData> {
  final int idAnioAcademico;
  final String? nombre;
  final String? fechaInicio;
  final String? fechaFin;
  final String? denominacion;
  final int? georeferenciaId;
  final int? organigramaId;
  final int? estadoId;
  final int? tipoId;
  final bool? toogle;
  AnioAcademicoData(
      {required this.idAnioAcademico,
      this.nombre,
      this.fechaInicio,
      this.fechaFin,
      this.denominacion,
      this.georeferenciaId,
      this.organigramaId,
      this.estadoId,
      this.tipoId,
      this.toogle});
  factory AnioAcademicoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return AnioAcademicoData(
      idAnioAcademico: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_anio_academico'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      fechaInicio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_inicio']),
      fechaFin: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_fin']),
      denominacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}denominacion']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      organigramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}organigrama_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      toogle: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}toogle']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_anio_academico'] = Variable<int>(idAnioAcademico);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || fechaInicio != null) {
      map['fecha_inicio'] = Variable<String?>(fechaInicio);
    }
    if (!nullToAbsent || fechaFin != null) {
      map['fecha_fin'] = Variable<String?>(fechaFin);
    }
    if (!nullToAbsent || denominacion != null) {
      map['denominacion'] = Variable<String?>(denominacion);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || organigramaId != null) {
      map['organigrama_id'] = Variable<int?>(organigramaId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || toogle != null) {
      map['toogle'] = Variable<bool?>(toogle);
    }
    return map;
  }

  AnioAcademicoCompanion toCompanion(bool nullToAbsent) {
    return AnioAcademicoCompanion(
      idAnioAcademico: Value(idAnioAcademico),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      fechaInicio: fechaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaInicio),
      fechaFin: fechaFin == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaFin),
      denominacion: denominacion == null && nullToAbsent
          ? const Value.absent()
          : Value(denominacion),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      organigramaId: organigramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(organigramaId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      toogle:
          toogle == null && nullToAbsent ? const Value.absent() : Value(toogle),
    );
  }

  factory AnioAcademicoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return AnioAcademicoData(
      idAnioAcademico: serializer.fromJson<int>(json['idAnioAcademico']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      fechaInicio: serializer.fromJson<String?>(json['fechaInicio']),
      fechaFin: serializer.fromJson<String?>(json['fechaFin']),
      denominacion: serializer.fromJson<String?>(json['denominacion']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      organigramaId: serializer.fromJson<int?>(json['organigramaId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      toogle: serializer.fromJson<bool?>(json['toogle']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idAnioAcademico': serializer.toJson<int>(idAnioAcademico),
      'nombre': serializer.toJson<String?>(nombre),
      'fechaInicio': serializer.toJson<String?>(fechaInicio),
      'fechaFin': serializer.toJson<String?>(fechaFin),
      'denominacion': serializer.toJson<String?>(denominacion),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'organigramaId': serializer.toJson<int?>(organigramaId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'tipoId': serializer.toJson<int?>(tipoId),
      'toogle': serializer.toJson<bool?>(toogle),
    };
  }

  AnioAcademicoData copyWith(
          {int? idAnioAcademico,
          String? nombre,
          String? fechaInicio,
          String? fechaFin,
          String? denominacion,
          int? georeferenciaId,
          int? organigramaId,
          int? estadoId,
          int? tipoId,
          bool? toogle}) =>
      AnioAcademicoData(
        idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
        nombre: nombre ?? this.nombre,
        fechaInicio: fechaInicio ?? this.fechaInicio,
        fechaFin: fechaFin ?? this.fechaFin,
        denominacion: denominacion ?? this.denominacion,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        organigramaId: organigramaId ?? this.organigramaId,
        estadoId: estadoId ?? this.estadoId,
        tipoId: tipoId ?? this.tipoId,
        toogle: toogle ?? this.toogle,
      );
  @override
  String toString() {
    return (StringBuffer('AnioAcademicoData(')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('nombre: $nombre, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin, ')
          ..write('denominacion: $denominacion, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoId: $tipoId, ')
          ..write('toogle: $toogle')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      idAnioAcademico.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              fechaInicio.hashCode,
              $mrjc(
                  fechaFin.hashCode,
                  $mrjc(
                      denominacion.hashCode,
                      $mrjc(
                          georeferenciaId.hashCode,
                          $mrjc(
                              organigramaId.hashCode,
                              $mrjc(
                                  estadoId.hashCode,
                                  $mrjc(tipoId.hashCode,
                                      toogle.hashCode))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AnioAcademicoData &&
          other.idAnioAcademico == this.idAnioAcademico &&
          other.nombre == this.nombre &&
          other.fechaInicio == this.fechaInicio &&
          other.fechaFin == this.fechaFin &&
          other.denominacion == this.denominacion &&
          other.georeferenciaId == this.georeferenciaId &&
          other.organigramaId == this.organigramaId &&
          other.estadoId == this.estadoId &&
          other.tipoId == this.tipoId &&
          other.toogle == this.toogle);
}

class AnioAcademicoCompanion extends UpdateCompanion<AnioAcademicoData> {
  final Value<int> idAnioAcademico;
  final Value<String?> nombre;
  final Value<String?> fechaInicio;
  final Value<String?> fechaFin;
  final Value<String?> denominacion;
  final Value<int?> georeferenciaId;
  final Value<int?> organigramaId;
  final Value<int?> estadoId;
  final Value<int?> tipoId;
  final Value<bool?> toogle;
  const AnioAcademicoCompanion({
    this.idAnioAcademico = const Value.absent(),
    this.nombre = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
    this.denominacion = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.toogle = const Value.absent(),
  });
  AnioAcademicoCompanion.insert({
    this.idAnioAcademico = const Value.absent(),
    this.nombre = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
    this.denominacion = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.toogle = const Value.absent(),
  });
  static Insertable<AnioAcademicoData> custom({
    Expression<int>? idAnioAcademico,
    Expression<String?>? nombre,
    Expression<String?>? fechaInicio,
    Expression<String?>? fechaFin,
    Expression<String?>? denominacion,
    Expression<int?>? georeferenciaId,
    Expression<int?>? organigramaId,
    Expression<int?>? estadoId,
    Expression<int?>? tipoId,
    Expression<bool?>? toogle,
  }) {
    return RawValuesInsertable({
      if (idAnioAcademico != null) 'id_anio_academico': idAnioAcademico,
      if (nombre != null) 'nombre': nombre,
      if (fechaInicio != null) 'fecha_inicio': fechaInicio,
      if (fechaFin != null) 'fecha_fin': fechaFin,
      if (denominacion != null) 'denominacion': denominacion,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (organigramaId != null) 'organigrama_id': organigramaId,
      if (estadoId != null) 'estado_id': estadoId,
      if (tipoId != null) 'tipo_id': tipoId,
      if (toogle != null) 'toogle': toogle,
    });
  }

  AnioAcademicoCompanion copyWith(
      {Value<int>? idAnioAcademico,
      Value<String?>? nombre,
      Value<String?>? fechaInicio,
      Value<String?>? fechaFin,
      Value<String?>? denominacion,
      Value<int?>? georeferenciaId,
      Value<int?>? organigramaId,
      Value<int?>? estadoId,
      Value<int?>? tipoId,
      Value<bool?>? toogle}) {
    return AnioAcademicoCompanion(
      idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
      nombre: nombre ?? this.nombre,
      fechaInicio: fechaInicio ?? this.fechaInicio,
      fechaFin: fechaFin ?? this.fechaFin,
      denominacion: denominacion ?? this.denominacion,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      organigramaId: organigramaId ?? this.organigramaId,
      estadoId: estadoId ?? this.estadoId,
      tipoId: tipoId ?? this.tipoId,
      toogle: toogle ?? this.toogle,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idAnioAcademico.present) {
      map['id_anio_academico'] = Variable<int>(idAnioAcademico.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (fechaInicio.present) {
      map['fecha_inicio'] = Variable<String?>(fechaInicio.value);
    }
    if (fechaFin.present) {
      map['fecha_fin'] = Variable<String?>(fechaFin.value);
    }
    if (denominacion.present) {
      map['denominacion'] = Variable<String?>(denominacion.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (organigramaId.present) {
      map['organigrama_id'] = Variable<int?>(organigramaId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (toogle.present) {
      map['toogle'] = Variable<bool?>(toogle.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AnioAcademicoCompanion(')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('nombre: $nombre, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin, ')
          ..write('denominacion: $denominacion, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoId: $tipoId, ')
          ..write('toogle: $toogle')
          ..write(')'))
        .toString();
  }
}

class $AnioAcademicoTable extends AnioAcademico
    with TableInfo<$AnioAcademicoTable, AnioAcademicoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $AnioAcademicoTable(this._db, [this._alias]);
  final VerificationMeta _idAnioAcademicoMeta =
      const VerificationMeta('idAnioAcademico');
  late final GeneratedColumn<int?> idAnioAcademico = GeneratedColumn<int?>(
      'id_anio_academico', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaInicioMeta =
      const VerificationMeta('fechaInicio');
  late final GeneratedColumn<String?> fechaInicio = GeneratedColumn<String?>(
      'fecha_inicio', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaFinMeta = const VerificationMeta('fechaFin');
  late final GeneratedColumn<String?> fechaFin = GeneratedColumn<String?>(
      'fecha_fin', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _denominacionMeta =
      const VerificationMeta('denominacion');
  late final GeneratedColumn<String?> denominacion = GeneratedColumn<String?>(
      'denominacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _organigramaIdMeta =
      const VerificationMeta('organigramaId');
  late final GeneratedColumn<int?> organigramaId = GeneratedColumn<int?>(
      'organigrama_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _toogleMeta = const VerificationMeta('toogle');
  late final GeneratedColumn<bool?> toogle = GeneratedColumn<bool?>(
      'toogle', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (toogle IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns => [
        idAnioAcademico,
        nombre,
        fechaInicio,
        fechaFin,
        denominacion,
        georeferenciaId,
        organigramaId,
        estadoId,
        tipoId,
        toogle
      ];
  @override
  String get aliasedName => _alias ?? 'anio_academico';
  @override
  String get actualTableName => 'anio_academico';
  @override
  VerificationContext validateIntegrity(Insertable<AnioAcademicoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_anio_academico')) {
      context.handle(
          _idAnioAcademicoMeta,
          idAnioAcademico.isAcceptableOrUnknown(
              data['id_anio_academico']!, _idAnioAcademicoMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('fecha_inicio')) {
      context.handle(
          _fechaInicioMeta,
          fechaInicio.isAcceptableOrUnknown(
              data['fecha_inicio']!, _fechaInicioMeta));
    }
    if (data.containsKey('fecha_fin')) {
      context.handle(_fechaFinMeta,
          fechaFin.isAcceptableOrUnknown(data['fecha_fin']!, _fechaFinMeta));
    }
    if (data.containsKey('denominacion')) {
      context.handle(
          _denominacionMeta,
          denominacion.isAcceptableOrUnknown(
              data['denominacion']!, _denominacionMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('organigrama_id')) {
      context.handle(
          _organigramaIdMeta,
          organigramaId.isAcceptableOrUnknown(
              data['organigrama_id']!, _organigramaIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('toogle')) {
      context.handle(_toogleMeta,
          toogle.isAcceptableOrUnknown(data['toogle']!, _toogleMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idAnioAcademico};
  @override
  AnioAcademicoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return AnioAcademicoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AnioAcademicoTable createAlias(String alias) {
    return $AnioAcademicoTable(_db, alias);
  }
}

class ParametroConfiguracionData extends DataClass
    implements Insertable<ParametroConfiguracionData> {
  final int id;
  final String? concepto;
  final String? parametro;
  final int? entidadId;
  final int? orden;
  ParametroConfiguracionData(
      {required this.id,
      this.concepto,
      this.parametro,
      this.entidadId,
      this.orden});
  factory ParametroConfiguracionData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ParametroConfiguracionData(
      id: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id'])!,
      concepto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}concepto']),
      parametro: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parametro']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      orden: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}orden']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    if (!nullToAbsent || concepto != null) {
      map['concepto'] = Variable<String?>(concepto);
    }
    if (!nullToAbsent || parametro != null) {
      map['parametro'] = Variable<String?>(parametro);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || orden != null) {
      map['orden'] = Variable<int?>(orden);
    }
    return map;
  }

  ParametroConfiguracionCompanion toCompanion(bool nullToAbsent) {
    return ParametroConfiguracionCompanion(
      id: Value(id),
      concepto: concepto == null && nullToAbsent
          ? const Value.absent()
          : Value(concepto),
      parametro: parametro == null && nullToAbsent
          ? const Value.absent()
          : Value(parametro),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      orden:
          orden == null && nullToAbsent ? const Value.absent() : Value(orden),
    );
  }

  factory ParametroConfiguracionData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ParametroConfiguracionData(
      id: serializer.fromJson<int>(json['id']),
      concepto: serializer.fromJson<String?>(json['concepto']),
      parametro: serializer.fromJson<String?>(json['parametro']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      orden: serializer.fromJson<int?>(json['orden']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'concepto': serializer.toJson<String?>(concepto),
      'parametro': serializer.toJson<String?>(parametro),
      'entidadId': serializer.toJson<int?>(entidadId),
      'orden': serializer.toJson<int?>(orden),
    };
  }

  ParametroConfiguracionData copyWith(
          {int? id,
          String? concepto,
          String? parametro,
          int? entidadId,
          int? orden}) =>
      ParametroConfiguracionData(
        id: id ?? this.id,
        concepto: concepto ?? this.concepto,
        parametro: parametro ?? this.parametro,
        entidadId: entidadId ?? this.entidadId,
        orden: orden ?? this.orden,
      );
  @override
  String toString() {
    return (StringBuffer('ParametroConfiguracionData(')
          ..write('id: $id, ')
          ..write('concepto: $concepto, ')
          ..write('parametro: $parametro, ')
          ..write('entidadId: $entidadId, ')
          ..write('orden: $orden')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          concepto.hashCode,
          $mrjc(
              parametro.hashCode, $mrjc(entidadId.hashCode, orden.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ParametroConfiguracionData &&
          other.id == this.id &&
          other.concepto == this.concepto &&
          other.parametro == this.parametro &&
          other.entidadId == this.entidadId &&
          other.orden == this.orden);
}

class ParametroConfiguracionCompanion
    extends UpdateCompanion<ParametroConfiguracionData> {
  final Value<int> id;
  final Value<String?> concepto;
  final Value<String?> parametro;
  final Value<int?> entidadId;
  final Value<int?> orden;
  const ParametroConfiguracionCompanion({
    this.id = const Value.absent(),
    this.concepto = const Value.absent(),
    this.parametro = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.orden = const Value.absent(),
  });
  ParametroConfiguracionCompanion.insert({
    this.id = const Value.absent(),
    this.concepto = const Value.absent(),
    this.parametro = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.orden = const Value.absent(),
  });
  static Insertable<ParametroConfiguracionData> custom({
    Expression<int>? id,
    Expression<String?>? concepto,
    Expression<String?>? parametro,
    Expression<int?>? entidadId,
    Expression<int?>? orden,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (concepto != null) 'concepto': concepto,
      if (parametro != null) 'parametro': parametro,
      if (entidadId != null) 'entidad_id': entidadId,
      if (orden != null) 'orden': orden,
    });
  }

  ParametroConfiguracionCompanion copyWith(
      {Value<int>? id,
      Value<String?>? concepto,
      Value<String?>? parametro,
      Value<int?>? entidadId,
      Value<int?>? orden}) {
    return ParametroConfiguracionCompanion(
      id: id ?? this.id,
      concepto: concepto ?? this.concepto,
      parametro: parametro ?? this.parametro,
      entidadId: entidadId ?? this.entidadId,
      orden: orden ?? this.orden,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (concepto.present) {
      map['concepto'] = Variable<String?>(concepto.value);
    }
    if (parametro.present) {
      map['parametro'] = Variable<String?>(parametro.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (orden.present) {
      map['orden'] = Variable<int?>(orden.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ParametroConfiguracionCompanion(')
          ..write('id: $id, ')
          ..write('concepto: $concepto, ')
          ..write('parametro: $parametro, ')
          ..write('entidadId: $entidadId, ')
          ..write('orden: $orden')
          ..write(')'))
        .toString();
  }
}

class $ParametroConfiguracionTable extends ParametroConfiguracion
    with TableInfo<$ParametroConfiguracionTable, ParametroConfiguracionData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ParametroConfiguracionTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
      'id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _conceptoMeta = const VerificationMeta('concepto');
  late final GeneratedColumn<String?> concepto = GeneratedColumn<String?>(
      'concepto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _parametroMeta = const VerificationMeta('parametro');
  late final GeneratedColumn<String?> parametro = GeneratedColumn<String?>(
      'parametro', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _ordenMeta = const VerificationMeta('orden');
  late final GeneratedColumn<int?> orden = GeneratedColumn<int?>(
      'orden', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, concepto, parametro, entidadId, orden];
  @override
  String get aliasedName => _alias ?? 'parametro_configuracion';
  @override
  String get actualTableName => 'parametro_configuracion';
  @override
  VerificationContext validateIntegrity(
      Insertable<ParametroConfiguracionData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('concepto')) {
      context.handle(_conceptoMeta,
          concepto.isAcceptableOrUnknown(data['concepto']!, _conceptoMeta));
    }
    if (data.containsKey('parametro')) {
      context.handle(_parametroMeta,
          parametro.isAcceptableOrUnknown(data['parametro']!, _parametroMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('orden')) {
      context.handle(
          _ordenMeta, orden.isAcceptableOrUnknown(data['orden']!, _ordenMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ParametroConfiguracionData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return ParametroConfiguracionData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ParametroConfiguracionTable createAlias(String alias) {
    return $ParametroConfiguracionTable(_db, alias);
  }
}

class AulaData extends DataClass implements Insertable<AulaData> {
  final int aulaId;
  final String? descripcion;
  final String? numero;
  final int? capacidad;
  final int? estado;
  AulaData(
      {required this.aulaId,
      this.descripcion,
      this.numero,
      this.capacidad,
      this.estado});
  factory AulaData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return AulaData(
      aulaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aula_id'])!,
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      numero: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}numero']),
      capacidad: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}capacidad']),
      estado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['aula_id'] = Variable<int>(aulaId);
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String?>(numero);
    }
    if (!nullToAbsent || capacidad != null) {
      map['capacidad'] = Variable<int?>(capacidad);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<int?>(estado);
    }
    return map;
  }

  AulaCompanion toCompanion(bool nullToAbsent) {
    return AulaCompanion(
      aulaId: Value(aulaId),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      capacidad: capacidad == null && nullToAbsent
          ? const Value.absent()
          : Value(capacidad),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
    );
  }

  factory AulaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return AulaData(
      aulaId: serializer.fromJson<int>(json['aulaId']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      numero: serializer.fromJson<String?>(json['numero']),
      capacidad: serializer.fromJson<int?>(json['capacidad']),
      estado: serializer.fromJson<int?>(json['estado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'aulaId': serializer.toJson<int>(aulaId),
      'descripcion': serializer.toJson<String?>(descripcion),
      'numero': serializer.toJson<String?>(numero),
      'capacidad': serializer.toJson<int?>(capacidad),
      'estado': serializer.toJson<int?>(estado),
    };
  }

  AulaData copyWith(
          {int? aulaId,
          String? descripcion,
          String? numero,
          int? capacidad,
          int? estado}) =>
      AulaData(
        aulaId: aulaId ?? this.aulaId,
        descripcion: descripcion ?? this.descripcion,
        numero: numero ?? this.numero,
        capacidad: capacidad ?? this.capacidad,
        estado: estado ?? this.estado,
      );
  @override
  String toString() {
    return (StringBuffer('AulaData(')
          ..write('aulaId: $aulaId, ')
          ..write('descripcion: $descripcion, ')
          ..write('numero: $numero, ')
          ..write('capacidad: $capacidad, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      aulaId.hashCode,
      $mrjc(descripcion.hashCode,
          $mrjc(numero.hashCode, $mrjc(capacidad.hashCode, estado.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AulaData &&
          other.aulaId == this.aulaId &&
          other.descripcion == this.descripcion &&
          other.numero == this.numero &&
          other.capacidad == this.capacidad &&
          other.estado == this.estado);
}

class AulaCompanion extends UpdateCompanion<AulaData> {
  final Value<int> aulaId;
  final Value<String?> descripcion;
  final Value<String?> numero;
  final Value<int?> capacidad;
  final Value<int?> estado;
  const AulaCompanion({
    this.aulaId = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.numero = const Value.absent(),
    this.capacidad = const Value.absent(),
    this.estado = const Value.absent(),
  });
  AulaCompanion.insert({
    this.aulaId = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.numero = const Value.absent(),
    this.capacidad = const Value.absent(),
    this.estado = const Value.absent(),
  });
  static Insertable<AulaData> custom({
    Expression<int>? aulaId,
    Expression<String?>? descripcion,
    Expression<String?>? numero,
    Expression<int?>? capacidad,
    Expression<int?>? estado,
  }) {
    return RawValuesInsertable({
      if (aulaId != null) 'aula_id': aulaId,
      if (descripcion != null) 'descripcion': descripcion,
      if (numero != null) 'numero': numero,
      if (capacidad != null) 'capacidad': capacidad,
      if (estado != null) 'estado': estado,
    });
  }

  AulaCompanion copyWith(
      {Value<int>? aulaId,
      Value<String?>? descripcion,
      Value<String?>? numero,
      Value<int?>? capacidad,
      Value<int?>? estado}) {
    return AulaCompanion(
      aulaId: aulaId ?? this.aulaId,
      descripcion: descripcion ?? this.descripcion,
      numero: numero ?? this.numero,
      capacidad: capacidad ?? this.capacidad,
      estado: estado ?? this.estado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (aulaId.present) {
      map['aula_id'] = Variable<int>(aulaId.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String?>(numero.value);
    }
    if (capacidad.present) {
      map['capacidad'] = Variable<int?>(capacidad.value);
    }
    if (estado.present) {
      map['estado'] = Variable<int?>(estado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AulaCompanion(')
          ..write('aulaId: $aulaId, ')
          ..write('descripcion: $descripcion, ')
          ..write('numero: $numero, ')
          ..write('capacidad: $capacidad, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }
}

class $AulaTable extends Aula with TableInfo<$AulaTable, AulaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $AulaTable(this._db, [this._alias]);
  final VerificationMeta _aulaIdMeta = const VerificationMeta('aulaId');
  late final GeneratedColumn<int?> aulaId = GeneratedColumn<int?>(
      'aula_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
      'numero', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _capacidadMeta = const VerificationMeta('capacidad');
  late final GeneratedColumn<int?> capacidad = GeneratedColumn<int?>(
      'capacidad', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<int?> estado = GeneratedColumn<int?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [aulaId, descripcion, numero, capacidad, estado];
  @override
  String get aliasedName => _alias ?? 'aula';
  @override
  String get actualTableName => 'aula';
  @override
  VerificationContext validateIntegrity(Insertable<AulaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('aula_id')) {
      context.handle(_aulaIdMeta,
          aulaId.isAcceptableOrUnknown(data['aula_id']!, _aulaIdMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('numero')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta));
    }
    if (data.containsKey('capacidad')) {
      context.handle(_capacidadMeta,
          capacidad.isAcceptableOrUnknown(data['capacidad']!, _capacidadMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {aulaId};
  @override
  AulaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return AulaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AulaTable createAlias(String alias) {
    return $AulaTable(_db, alias);
  }
}

class CargaAcademicaData extends DataClass
    implements Insertable<CargaAcademicaData> {
  final int cargaAcademicaId;
  final int? seccionId;
  final int? periodoId;
  final int? aulaId;
  final int? idPlanEstudio;
  final int? idPlanEstudioVersion;
  final int? idAnioAcademico;
  final int? idEmpleadoTutor;
  final int? estadoId;
  final int? idPeriodoAcad;
  final int? idGrupo;
  final int? capacidadVacante;
  final int? capacidadVacanteD;
  CargaAcademicaData(
      {required this.cargaAcademicaId,
      this.seccionId,
      this.periodoId,
      this.aulaId,
      this.idPlanEstudio,
      this.idPlanEstudioVersion,
      this.idAnioAcademico,
      this.idEmpleadoTutor,
      this.estadoId,
      this.idPeriodoAcad,
      this.idGrupo,
      this.capacidadVacante,
      this.capacidadVacanteD});
  factory CargaAcademicaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CargaAcademicaData(
      cargaAcademicaId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}carga_academica_id'])!,
      seccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}seccion_id']),
      periodoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}periodo_id']),
      aulaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aula_id']),
      idPlanEstudio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_plan_estudio']),
      idPlanEstudioVersion: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_plan_estudio_version']),
      idAnioAcademico: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_anio_academico']),
      idEmpleadoTutor: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_empleado_tutor']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      idPeriodoAcad: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_periodo_acad']),
      idGrupo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_grupo']),
      capacidadVacante: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}capacidad_vacante']),
      capacidadVacanteD: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}capacidad_vacante_d']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['carga_academica_id'] = Variable<int>(cargaAcademicaId);
    if (!nullToAbsent || seccionId != null) {
      map['seccion_id'] = Variable<int?>(seccionId);
    }
    if (!nullToAbsent || periodoId != null) {
      map['periodo_id'] = Variable<int?>(periodoId);
    }
    if (!nullToAbsent || aulaId != null) {
      map['aula_id'] = Variable<int?>(aulaId);
    }
    if (!nullToAbsent || idPlanEstudio != null) {
      map['id_plan_estudio'] = Variable<int?>(idPlanEstudio);
    }
    if (!nullToAbsent || idPlanEstudioVersion != null) {
      map['id_plan_estudio_version'] = Variable<int?>(idPlanEstudioVersion);
    }
    if (!nullToAbsent || idAnioAcademico != null) {
      map['id_anio_academico'] = Variable<int?>(idAnioAcademico);
    }
    if (!nullToAbsent || idEmpleadoTutor != null) {
      map['id_empleado_tutor'] = Variable<int?>(idEmpleadoTutor);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || idPeriodoAcad != null) {
      map['id_periodo_acad'] = Variable<int?>(idPeriodoAcad);
    }
    if (!nullToAbsent || idGrupo != null) {
      map['id_grupo'] = Variable<int?>(idGrupo);
    }
    if (!nullToAbsent || capacidadVacante != null) {
      map['capacidad_vacante'] = Variable<int?>(capacidadVacante);
    }
    if (!nullToAbsent || capacidadVacanteD != null) {
      map['capacidad_vacante_d'] = Variable<int?>(capacidadVacanteD);
    }
    return map;
  }

  CargaAcademicaCompanion toCompanion(bool nullToAbsent) {
    return CargaAcademicaCompanion(
      cargaAcademicaId: Value(cargaAcademicaId),
      seccionId: seccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(seccionId),
      periodoId: periodoId == null && nullToAbsent
          ? const Value.absent()
          : Value(periodoId),
      aulaId:
          aulaId == null && nullToAbsent ? const Value.absent() : Value(aulaId),
      idPlanEstudio: idPlanEstudio == null && nullToAbsent
          ? const Value.absent()
          : Value(idPlanEstudio),
      idPlanEstudioVersion: idPlanEstudioVersion == null && nullToAbsent
          ? const Value.absent()
          : Value(idPlanEstudioVersion),
      idAnioAcademico: idAnioAcademico == null && nullToAbsent
          ? const Value.absent()
          : Value(idAnioAcademico),
      idEmpleadoTutor: idEmpleadoTutor == null && nullToAbsent
          ? const Value.absent()
          : Value(idEmpleadoTutor),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      idPeriodoAcad: idPeriodoAcad == null && nullToAbsent
          ? const Value.absent()
          : Value(idPeriodoAcad),
      idGrupo: idGrupo == null && nullToAbsent
          ? const Value.absent()
          : Value(idGrupo),
      capacidadVacante: capacidadVacante == null && nullToAbsent
          ? const Value.absent()
          : Value(capacidadVacante),
      capacidadVacanteD: capacidadVacanteD == null && nullToAbsent
          ? const Value.absent()
          : Value(capacidadVacanteD),
    );
  }

  factory CargaAcademicaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CargaAcademicaData(
      cargaAcademicaId: serializer.fromJson<int>(json['cargaAcademicaId']),
      seccionId: serializer.fromJson<int?>(json['seccionId']),
      periodoId: serializer.fromJson<int?>(json['periodoId']),
      aulaId: serializer.fromJson<int?>(json['aulaId']),
      idPlanEstudio: serializer.fromJson<int?>(json['idPlanEstudio']),
      idPlanEstudioVersion:
          serializer.fromJson<int?>(json['idPlanEstudioVersion']),
      idAnioAcademico: serializer.fromJson<int?>(json['idAnioAcademico']),
      idEmpleadoTutor: serializer.fromJson<int?>(json['idEmpleadoTutor']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      idPeriodoAcad: serializer.fromJson<int?>(json['idPeriodoAcad']),
      idGrupo: serializer.fromJson<int?>(json['idGrupo']),
      capacidadVacante: serializer.fromJson<int?>(json['capacidadVacante']),
      capacidadVacanteD: serializer.fromJson<int?>(json['capacidadVacanteD']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'cargaAcademicaId': serializer.toJson<int>(cargaAcademicaId),
      'seccionId': serializer.toJson<int?>(seccionId),
      'periodoId': serializer.toJson<int?>(periodoId),
      'aulaId': serializer.toJson<int?>(aulaId),
      'idPlanEstudio': serializer.toJson<int?>(idPlanEstudio),
      'idPlanEstudioVersion': serializer.toJson<int?>(idPlanEstudioVersion),
      'idAnioAcademico': serializer.toJson<int?>(idAnioAcademico),
      'idEmpleadoTutor': serializer.toJson<int?>(idEmpleadoTutor),
      'estadoId': serializer.toJson<int?>(estadoId),
      'idPeriodoAcad': serializer.toJson<int?>(idPeriodoAcad),
      'idGrupo': serializer.toJson<int?>(idGrupo),
      'capacidadVacante': serializer.toJson<int?>(capacidadVacante),
      'capacidadVacanteD': serializer.toJson<int?>(capacidadVacanteD),
    };
  }

  CargaAcademicaData copyWith(
          {int? cargaAcademicaId,
          int? seccionId,
          int? periodoId,
          int? aulaId,
          int? idPlanEstudio,
          int? idPlanEstudioVersion,
          int? idAnioAcademico,
          int? idEmpleadoTutor,
          int? estadoId,
          int? idPeriodoAcad,
          int? idGrupo,
          int? capacidadVacante,
          int? capacidadVacanteD}) =>
      CargaAcademicaData(
        cargaAcademicaId: cargaAcademicaId ?? this.cargaAcademicaId,
        seccionId: seccionId ?? this.seccionId,
        periodoId: periodoId ?? this.periodoId,
        aulaId: aulaId ?? this.aulaId,
        idPlanEstudio: idPlanEstudio ?? this.idPlanEstudio,
        idPlanEstudioVersion: idPlanEstudioVersion ?? this.idPlanEstudioVersion,
        idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
        idEmpleadoTutor: idEmpleadoTutor ?? this.idEmpleadoTutor,
        estadoId: estadoId ?? this.estadoId,
        idPeriodoAcad: idPeriodoAcad ?? this.idPeriodoAcad,
        idGrupo: idGrupo ?? this.idGrupo,
        capacidadVacante: capacidadVacante ?? this.capacidadVacante,
        capacidadVacanteD: capacidadVacanteD ?? this.capacidadVacanteD,
      );
  @override
  String toString() {
    return (StringBuffer('CargaAcademicaData(')
          ..write('cargaAcademicaId: $cargaAcademicaId, ')
          ..write('seccionId: $seccionId, ')
          ..write('periodoId: $periodoId, ')
          ..write('aulaId: $aulaId, ')
          ..write('idPlanEstudio: $idPlanEstudio, ')
          ..write('idPlanEstudioVersion: $idPlanEstudioVersion, ')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('idEmpleadoTutor: $idEmpleadoTutor, ')
          ..write('estadoId: $estadoId, ')
          ..write('idPeriodoAcad: $idPeriodoAcad, ')
          ..write('idGrupo: $idGrupo, ')
          ..write('capacidadVacante: $capacidadVacante, ')
          ..write('capacidadVacanteD: $capacidadVacanteD')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      cargaAcademicaId.hashCode,
      $mrjc(
          seccionId.hashCode,
          $mrjc(
              periodoId.hashCode,
              $mrjc(
                  aulaId.hashCode,
                  $mrjc(
                      idPlanEstudio.hashCode,
                      $mrjc(
                          idPlanEstudioVersion.hashCode,
                          $mrjc(
                              idAnioAcademico.hashCode,
                              $mrjc(
                                  idEmpleadoTutor.hashCode,
                                  $mrjc(
                                      estadoId.hashCode,
                                      $mrjc(
                                          idPeriodoAcad.hashCode,
                                          $mrjc(
                                              idGrupo.hashCode,
                                              $mrjc(
                                                  capacidadVacante.hashCode,
                                                  capacidadVacanteD
                                                      .hashCode)))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CargaAcademicaData &&
          other.cargaAcademicaId == this.cargaAcademicaId &&
          other.seccionId == this.seccionId &&
          other.periodoId == this.periodoId &&
          other.aulaId == this.aulaId &&
          other.idPlanEstudio == this.idPlanEstudio &&
          other.idPlanEstudioVersion == this.idPlanEstudioVersion &&
          other.idAnioAcademico == this.idAnioAcademico &&
          other.idEmpleadoTutor == this.idEmpleadoTutor &&
          other.estadoId == this.estadoId &&
          other.idPeriodoAcad == this.idPeriodoAcad &&
          other.idGrupo == this.idGrupo &&
          other.capacidadVacante == this.capacidadVacante &&
          other.capacidadVacanteD == this.capacidadVacanteD);
}

class CargaAcademicaCompanion extends UpdateCompanion<CargaAcademicaData> {
  final Value<int> cargaAcademicaId;
  final Value<int?> seccionId;
  final Value<int?> periodoId;
  final Value<int?> aulaId;
  final Value<int?> idPlanEstudio;
  final Value<int?> idPlanEstudioVersion;
  final Value<int?> idAnioAcademico;
  final Value<int?> idEmpleadoTutor;
  final Value<int?> estadoId;
  final Value<int?> idPeriodoAcad;
  final Value<int?> idGrupo;
  final Value<int?> capacidadVacante;
  final Value<int?> capacidadVacanteD;
  const CargaAcademicaCompanion({
    this.cargaAcademicaId = const Value.absent(),
    this.seccionId = const Value.absent(),
    this.periodoId = const Value.absent(),
    this.aulaId = const Value.absent(),
    this.idPlanEstudio = const Value.absent(),
    this.idPlanEstudioVersion = const Value.absent(),
    this.idAnioAcademico = const Value.absent(),
    this.idEmpleadoTutor = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.idPeriodoAcad = const Value.absent(),
    this.idGrupo = const Value.absent(),
    this.capacidadVacante = const Value.absent(),
    this.capacidadVacanteD = const Value.absent(),
  });
  CargaAcademicaCompanion.insert({
    this.cargaAcademicaId = const Value.absent(),
    this.seccionId = const Value.absent(),
    this.periodoId = const Value.absent(),
    this.aulaId = const Value.absent(),
    this.idPlanEstudio = const Value.absent(),
    this.idPlanEstudioVersion = const Value.absent(),
    this.idAnioAcademico = const Value.absent(),
    this.idEmpleadoTutor = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.idPeriodoAcad = const Value.absent(),
    this.idGrupo = const Value.absent(),
    this.capacidadVacante = const Value.absent(),
    this.capacidadVacanteD = const Value.absent(),
  });
  static Insertable<CargaAcademicaData> custom({
    Expression<int>? cargaAcademicaId,
    Expression<int?>? seccionId,
    Expression<int?>? periodoId,
    Expression<int?>? aulaId,
    Expression<int?>? idPlanEstudio,
    Expression<int?>? idPlanEstudioVersion,
    Expression<int?>? idAnioAcademico,
    Expression<int?>? idEmpleadoTutor,
    Expression<int?>? estadoId,
    Expression<int?>? idPeriodoAcad,
    Expression<int?>? idGrupo,
    Expression<int?>? capacidadVacante,
    Expression<int?>? capacidadVacanteD,
  }) {
    return RawValuesInsertable({
      if (cargaAcademicaId != null) 'carga_academica_id': cargaAcademicaId,
      if (seccionId != null) 'seccion_id': seccionId,
      if (periodoId != null) 'periodo_id': periodoId,
      if (aulaId != null) 'aula_id': aulaId,
      if (idPlanEstudio != null) 'id_plan_estudio': idPlanEstudio,
      if (idPlanEstudioVersion != null)
        'id_plan_estudio_version': idPlanEstudioVersion,
      if (idAnioAcademico != null) 'id_anio_academico': idAnioAcademico,
      if (idEmpleadoTutor != null) 'id_empleado_tutor': idEmpleadoTutor,
      if (estadoId != null) 'estado_id': estadoId,
      if (idPeriodoAcad != null) 'id_periodo_acad': idPeriodoAcad,
      if (idGrupo != null) 'id_grupo': idGrupo,
      if (capacidadVacante != null) 'capacidad_vacante': capacidadVacante,
      if (capacidadVacanteD != null) 'capacidad_vacante_d': capacidadVacanteD,
    });
  }

  CargaAcademicaCompanion copyWith(
      {Value<int>? cargaAcademicaId,
      Value<int?>? seccionId,
      Value<int?>? periodoId,
      Value<int?>? aulaId,
      Value<int?>? idPlanEstudio,
      Value<int?>? idPlanEstudioVersion,
      Value<int?>? idAnioAcademico,
      Value<int?>? idEmpleadoTutor,
      Value<int?>? estadoId,
      Value<int?>? idPeriodoAcad,
      Value<int?>? idGrupo,
      Value<int?>? capacidadVacante,
      Value<int?>? capacidadVacanteD}) {
    return CargaAcademicaCompanion(
      cargaAcademicaId: cargaAcademicaId ?? this.cargaAcademicaId,
      seccionId: seccionId ?? this.seccionId,
      periodoId: periodoId ?? this.periodoId,
      aulaId: aulaId ?? this.aulaId,
      idPlanEstudio: idPlanEstudio ?? this.idPlanEstudio,
      idPlanEstudioVersion: idPlanEstudioVersion ?? this.idPlanEstudioVersion,
      idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
      idEmpleadoTutor: idEmpleadoTutor ?? this.idEmpleadoTutor,
      estadoId: estadoId ?? this.estadoId,
      idPeriodoAcad: idPeriodoAcad ?? this.idPeriodoAcad,
      idGrupo: idGrupo ?? this.idGrupo,
      capacidadVacante: capacidadVacante ?? this.capacidadVacante,
      capacidadVacanteD: capacidadVacanteD ?? this.capacidadVacanteD,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (cargaAcademicaId.present) {
      map['carga_academica_id'] = Variable<int>(cargaAcademicaId.value);
    }
    if (seccionId.present) {
      map['seccion_id'] = Variable<int?>(seccionId.value);
    }
    if (periodoId.present) {
      map['periodo_id'] = Variable<int?>(periodoId.value);
    }
    if (aulaId.present) {
      map['aula_id'] = Variable<int?>(aulaId.value);
    }
    if (idPlanEstudio.present) {
      map['id_plan_estudio'] = Variable<int?>(idPlanEstudio.value);
    }
    if (idPlanEstudioVersion.present) {
      map['id_plan_estudio_version'] =
          Variable<int?>(idPlanEstudioVersion.value);
    }
    if (idAnioAcademico.present) {
      map['id_anio_academico'] = Variable<int?>(idAnioAcademico.value);
    }
    if (idEmpleadoTutor.present) {
      map['id_empleado_tutor'] = Variable<int?>(idEmpleadoTutor.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (idPeriodoAcad.present) {
      map['id_periodo_acad'] = Variable<int?>(idPeriodoAcad.value);
    }
    if (idGrupo.present) {
      map['id_grupo'] = Variable<int?>(idGrupo.value);
    }
    if (capacidadVacante.present) {
      map['capacidad_vacante'] = Variable<int?>(capacidadVacante.value);
    }
    if (capacidadVacanteD.present) {
      map['capacidad_vacante_d'] = Variable<int?>(capacidadVacanteD.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CargaAcademicaCompanion(')
          ..write('cargaAcademicaId: $cargaAcademicaId, ')
          ..write('seccionId: $seccionId, ')
          ..write('periodoId: $periodoId, ')
          ..write('aulaId: $aulaId, ')
          ..write('idPlanEstudio: $idPlanEstudio, ')
          ..write('idPlanEstudioVersion: $idPlanEstudioVersion, ')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('idEmpleadoTutor: $idEmpleadoTutor, ')
          ..write('estadoId: $estadoId, ')
          ..write('idPeriodoAcad: $idPeriodoAcad, ')
          ..write('idGrupo: $idGrupo, ')
          ..write('capacidadVacante: $capacidadVacante, ')
          ..write('capacidadVacanteD: $capacidadVacanteD')
          ..write(')'))
        .toString();
  }
}

class $CargaAcademicaTable extends CargaAcademica
    with TableInfo<$CargaAcademicaTable, CargaAcademicaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CargaAcademicaTable(this._db, [this._alias]);
  final VerificationMeta _cargaAcademicaIdMeta =
      const VerificationMeta('cargaAcademicaId');
  late final GeneratedColumn<int?> cargaAcademicaId = GeneratedColumn<int?>(
      'carga_academica_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _seccionIdMeta = const VerificationMeta('seccionId');
  late final GeneratedColumn<int?> seccionId = GeneratedColumn<int?>(
      'seccion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _periodoIdMeta = const VerificationMeta('periodoId');
  late final GeneratedColumn<int?> periodoId = GeneratedColumn<int?>(
      'periodo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _aulaIdMeta = const VerificationMeta('aulaId');
  late final GeneratedColumn<int?> aulaId = GeneratedColumn<int?>(
      'aula_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idPlanEstudioMeta =
      const VerificationMeta('idPlanEstudio');
  late final GeneratedColumn<int?> idPlanEstudio = GeneratedColumn<int?>(
      'id_plan_estudio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idPlanEstudioVersionMeta =
      const VerificationMeta('idPlanEstudioVersion');
  late final GeneratedColumn<int?> idPlanEstudioVersion = GeneratedColumn<int?>(
      'id_plan_estudio_version', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idAnioAcademicoMeta =
      const VerificationMeta('idAnioAcademico');
  late final GeneratedColumn<int?> idAnioAcademico = GeneratedColumn<int?>(
      'id_anio_academico', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idEmpleadoTutorMeta =
      const VerificationMeta('idEmpleadoTutor');
  late final GeneratedColumn<int?> idEmpleadoTutor = GeneratedColumn<int?>(
      'id_empleado_tutor', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idPeriodoAcadMeta =
      const VerificationMeta('idPeriodoAcad');
  late final GeneratedColumn<int?> idPeriodoAcad = GeneratedColumn<int?>(
      'id_periodo_acad', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idGrupoMeta = const VerificationMeta('idGrupo');
  late final GeneratedColumn<int?> idGrupo = GeneratedColumn<int?>(
      'id_grupo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _capacidadVacanteMeta =
      const VerificationMeta('capacidadVacante');
  late final GeneratedColumn<int?> capacidadVacante = GeneratedColumn<int?>(
      'capacidad_vacante', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _capacidadVacanteDMeta =
      const VerificationMeta('capacidadVacanteD');
  late final GeneratedColumn<int?> capacidadVacanteD = GeneratedColumn<int?>(
      'capacidad_vacante_d', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        cargaAcademicaId,
        seccionId,
        periodoId,
        aulaId,
        idPlanEstudio,
        idPlanEstudioVersion,
        idAnioAcademico,
        idEmpleadoTutor,
        estadoId,
        idPeriodoAcad,
        idGrupo,
        capacidadVacante,
        capacidadVacanteD
      ];
  @override
  String get aliasedName => _alias ?? 'carga_academica';
  @override
  String get actualTableName => 'carga_academica';
  @override
  VerificationContext validateIntegrity(Insertable<CargaAcademicaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('carga_academica_id')) {
      context.handle(
          _cargaAcademicaIdMeta,
          cargaAcademicaId.isAcceptableOrUnknown(
              data['carga_academica_id']!, _cargaAcademicaIdMeta));
    }
    if (data.containsKey('seccion_id')) {
      context.handle(_seccionIdMeta,
          seccionId.isAcceptableOrUnknown(data['seccion_id']!, _seccionIdMeta));
    }
    if (data.containsKey('periodo_id')) {
      context.handle(_periodoIdMeta,
          periodoId.isAcceptableOrUnknown(data['periodo_id']!, _periodoIdMeta));
    }
    if (data.containsKey('aula_id')) {
      context.handle(_aulaIdMeta,
          aulaId.isAcceptableOrUnknown(data['aula_id']!, _aulaIdMeta));
    }
    if (data.containsKey('id_plan_estudio')) {
      context.handle(
          _idPlanEstudioMeta,
          idPlanEstudio.isAcceptableOrUnknown(
              data['id_plan_estudio']!, _idPlanEstudioMeta));
    }
    if (data.containsKey('id_plan_estudio_version')) {
      context.handle(
          _idPlanEstudioVersionMeta,
          idPlanEstudioVersion.isAcceptableOrUnknown(
              data['id_plan_estudio_version']!, _idPlanEstudioVersionMeta));
    }
    if (data.containsKey('id_anio_academico')) {
      context.handle(
          _idAnioAcademicoMeta,
          idAnioAcademico.isAcceptableOrUnknown(
              data['id_anio_academico']!, _idAnioAcademicoMeta));
    }
    if (data.containsKey('id_empleado_tutor')) {
      context.handle(
          _idEmpleadoTutorMeta,
          idEmpleadoTutor.isAcceptableOrUnknown(
              data['id_empleado_tutor']!, _idEmpleadoTutorMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('id_periodo_acad')) {
      context.handle(
          _idPeriodoAcadMeta,
          idPeriodoAcad.isAcceptableOrUnknown(
              data['id_periodo_acad']!, _idPeriodoAcadMeta));
    }
    if (data.containsKey('id_grupo')) {
      context.handle(_idGrupoMeta,
          idGrupo.isAcceptableOrUnknown(data['id_grupo']!, _idGrupoMeta));
    }
    if (data.containsKey('capacidad_vacante')) {
      context.handle(
          _capacidadVacanteMeta,
          capacidadVacante.isAcceptableOrUnknown(
              data['capacidad_vacante']!, _capacidadVacanteMeta));
    }
    if (data.containsKey('capacidad_vacante_d')) {
      context.handle(
          _capacidadVacanteDMeta,
          capacidadVacanteD.isAcceptableOrUnknown(
              data['capacidad_vacante_d']!, _capacidadVacanteDMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {cargaAcademicaId};
  @override
  CargaAcademicaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CargaAcademicaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CargaAcademicaTable createAlias(String alias) {
    return $CargaAcademicaTable(_db, alias);
  }
}

class CargaCursoDocenteData extends DataClass
    implements Insertable<CargaCursoDocenteData> {
  final int cargaCursoDocenteId;
  final int? cargaCursoId;
  final int? docenteId;
  final bool? responsable;
  CargaCursoDocenteData(
      {required this.cargaCursoDocenteId,
      this.cargaCursoId,
      this.docenteId,
      this.responsable});
  factory CargaCursoDocenteData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CargaCursoDocenteData(
      cargaCursoDocenteId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}carga_curso_docente_id'])!,
      cargaCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}carga_curso_id']),
      docenteId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}docente_id']),
      responsable: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}responsable']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['carga_curso_docente_id'] = Variable<int>(cargaCursoDocenteId);
    if (!nullToAbsent || cargaCursoId != null) {
      map['carga_curso_id'] = Variable<int?>(cargaCursoId);
    }
    if (!nullToAbsent || docenteId != null) {
      map['docente_id'] = Variable<int?>(docenteId);
    }
    if (!nullToAbsent || responsable != null) {
      map['responsable'] = Variable<bool?>(responsable);
    }
    return map;
  }

  CargaCursoDocenteCompanion toCompanion(bool nullToAbsent) {
    return CargaCursoDocenteCompanion(
      cargaCursoDocenteId: Value(cargaCursoDocenteId),
      cargaCursoId: cargaCursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(cargaCursoId),
      docenteId: docenteId == null && nullToAbsent
          ? const Value.absent()
          : Value(docenteId),
      responsable: responsable == null && nullToAbsent
          ? const Value.absent()
          : Value(responsable),
    );
  }

  factory CargaCursoDocenteData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CargaCursoDocenteData(
      cargaCursoDocenteId:
          serializer.fromJson<int>(json['cargaCursoDocenteId']),
      cargaCursoId: serializer.fromJson<int?>(json['cargaCursoId']),
      docenteId: serializer.fromJson<int?>(json['docenteId']),
      responsable: serializer.fromJson<bool?>(json['responsable']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'cargaCursoDocenteId': serializer.toJson<int>(cargaCursoDocenteId),
      'cargaCursoId': serializer.toJson<int?>(cargaCursoId),
      'docenteId': serializer.toJson<int?>(docenteId),
      'responsable': serializer.toJson<bool?>(responsable),
    };
  }

  CargaCursoDocenteData copyWith(
          {int? cargaCursoDocenteId,
          int? cargaCursoId,
          int? docenteId,
          bool? responsable}) =>
      CargaCursoDocenteData(
        cargaCursoDocenteId: cargaCursoDocenteId ?? this.cargaCursoDocenteId,
        cargaCursoId: cargaCursoId ?? this.cargaCursoId,
        docenteId: docenteId ?? this.docenteId,
        responsable: responsable ?? this.responsable,
      );
  @override
  String toString() {
    return (StringBuffer('CargaCursoDocenteData(')
          ..write('cargaCursoDocenteId: $cargaCursoDocenteId, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('docenteId: $docenteId, ')
          ..write('responsable: $responsable')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      cargaCursoDocenteId.hashCode,
      $mrjc(cargaCursoId.hashCode,
          $mrjc(docenteId.hashCode, responsable.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CargaCursoDocenteData &&
          other.cargaCursoDocenteId == this.cargaCursoDocenteId &&
          other.cargaCursoId == this.cargaCursoId &&
          other.docenteId == this.docenteId &&
          other.responsable == this.responsable);
}

class CargaCursoDocenteCompanion
    extends UpdateCompanion<CargaCursoDocenteData> {
  final Value<int> cargaCursoDocenteId;
  final Value<int?> cargaCursoId;
  final Value<int?> docenteId;
  final Value<bool?> responsable;
  const CargaCursoDocenteCompanion({
    this.cargaCursoDocenteId = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.docenteId = const Value.absent(),
    this.responsable = const Value.absent(),
  });
  CargaCursoDocenteCompanion.insert({
    this.cargaCursoDocenteId = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.docenteId = const Value.absent(),
    this.responsable = const Value.absent(),
  });
  static Insertable<CargaCursoDocenteData> custom({
    Expression<int>? cargaCursoDocenteId,
    Expression<int?>? cargaCursoId,
    Expression<int?>? docenteId,
    Expression<bool?>? responsable,
  }) {
    return RawValuesInsertable({
      if (cargaCursoDocenteId != null)
        'carga_curso_docente_id': cargaCursoDocenteId,
      if (cargaCursoId != null) 'carga_curso_id': cargaCursoId,
      if (docenteId != null) 'docente_id': docenteId,
      if (responsable != null) 'responsable': responsable,
    });
  }

  CargaCursoDocenteCompanion copyWith(
      {Value<int>? cargaCursoDocenteId,
      Value<int?>? cargaCursoId,
      Value<int?>? docenteId,
      Value<bool?>? responsable}) {
    return CargaCursoDocenteCompanion(
      cargaCursoDocenteId: cargaCursoDocenteId ?? this.cargaCursoDocenteId,
      cargaCursoId: cargaCursoId ?? this.cargaCursoId,
      docenteId: docenteId ?? this.docenteId,
      responsable: responsable ?? this.responsable,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (cargaCursoDocenteId.present) {
      map['carga_curso_docente_id'] = Variable<int>(cargaCursoDocenteId.value);
    }
    if (cargaCursoId.present) {
      map['carga_curso_id'] = Variable<int?>(cargaCursoId.value);
    }
    if (docenteId.present) {
      map['docente_id'] = Variable<int?>(docenteId.value);
    }
    if (responsable.present) {
      map['responsable'] = Variable<bool?>(responsable.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CargaCursoDocenteCompanion(')
          ..write('cargaCursoDocenteId: $cargaCursoDocenteId, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('docenteId: $docenteId, ')
          ..write('responsable: $responsable')
          ..write(')'))
        .toString();
  }
}

class $CargaCursoDocenteTable extends CargaCursoDocente
    with TableInfo<$CargaCursoDocenteTable, CargaCursoDocenteData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CargaCursoDocenteTable(this._db, [this._alias]);
  final VerificationMeta _cargaCursoDocenteIdMeta =
      const VerificationMeta('cargaCursoDocenteId');
  late final GeneratedColumn<int?> cargaCursoDocenteId = GeneratedColumn<int?>(
      'carga_curso_docente_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cargaCursoIdMeta =
      const VerificationMeta('cargaCursoId');
  late final GeneratedColumn<int?> cargaCursoId = GeneratedColumn<int?>(
      'carga_curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _docenteIdMeta = const VerificationMeta('docenteId');
  late final GeneratedColumn<int?> docenteId = GeneratedColumn<int?>(
      'docente_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _responsableMeta =
      const VerificationMeta('responsable');
  late final GeneratedColumn<bool?> responsable = GeneratedColumn<bool?>(
      'responsable', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (responsable IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns =>
      [cargaCursoDocenteId, cargaCursoId, docenteId, responsable];
  @override
  String get aliasedName => _alias ?? 'carga_curso_docente';
  @override
  String get actualTableName => 'carga_curso_docente';
  @override
  VerificationContext validateIntegrity(
      Insertable<CargaCursoDocenteData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('carga_curso_docente_id')) {
      context.handle(
          _cargaCursoDocenteIdMeta,
          cargaCursoDocenteId.isAcceptableOrUnknown(
              data['carga_curso_docente_id']!, _cargaCursoDocenteIdMeta));
    }
    if (data.containsKey('carga_curso_id')) {
      context.handle(
          _cargaCursoIdMeta,
          cargaCursoId.isAcceptableOrUnknown(
              data['carga_curso_id']!, _cargaCursoIdMeta));
    }
    if (data.containsKey('docente_id')) {
      context.handle(_docenteIdMeta,
          docenteId.isAcceptableOrUnknown(data['docente_id']!, _docenteIdMeta));
    }
    if (data.containsKey('responsable')) {
      context.handle(
          _responsableMeta,
          responsable.isAcceptableOrUnknown(
              data['responsable']!, _responsableMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {cargaCursoDocenteId};
  @override
  CargaCursoDocenteData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CargaCursoDocenteData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CargaCursoDocenteTable createAlias(String alias) {
    return $CargaCursoDocenteTable(_db, alias);
  }
}

class CargaCursoDocenteDetData extends DataClass
    implements Insertable<CargaCursoDocenteDetData> {
  final int? cargaCursoDocenteId;
  final int? alumnoId;
  CargaCursoDocenteDetData({this.cargaCursoDocenteId, this.alumnoId});
  factory CargaCursoDocenteDetData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CargaCursoDocenteDetData(
      cargaCursoDocenteId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}carga_curso_docente_id']),
      alumnoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alumno_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || cargaCursoDocenteId != null) {
      map['carga_curso_docente_id'] = Variable<int?>(cargaCursoDocenteId);
    }
    if (!nullToAbsent || alumnoId != null) {
      map['alumno_id'] = Variable<int?>(alumnoId);
    }
    return map;
  }

  CargaCursoDocenteDetCompanion toCompanion(bool nullToAbsent) {
    return CargaCursoDocenteDetCompanion(
      cargaCursoDocenteId: cargaCursoDocenteId == null && nullToAbsent
          ? const Value.absent()
          : Value(cargaCursoDocenteId),
      alumnoId: alumnoId == null && nullToAbsent
          ? const Value.absent()
          : Value(alumnoId),
    );
  }

  factory CargaCursoDocenteDetData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CargaCursoDocenteDetData(
      cargaCursoDocenteId:
          serializer.fromJson<int?>(json['cargaCursoDocenteId']),
      alumnoId: serializer.fromJson<int?>(json['alumnoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'cargaCursoDocenteId': serializer.toJson<int?>(cargaCursoDocenteId),
      'alumnoId': serializer.toJson<int?>(alumnoId),
    };
  }

  CargaCursoDocenteDetData copyWith(
          {int? cargaCursoDocenteId, int? alumnoId}) =>
      CargaCursoDocenteDetData(
        cargaCursoDocenteId: cargaCursoDocenteId ?? this.cargaCursoDocenteId,
        alumnoId: alumnoId ?? this.alumnoId,
      );
  @override
  String toString() {
    return (StringBuffer('CargaCursoDocenteDetData(')
          ..write('cargaCursoDocenteId: $cargaCursoDocenteId, ')
          ..write('alumnoId: $alumnoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      $mrjf($mrjc(cargaCursoDocenteId.hashCode, alumnoId.hashCode));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CargaCursoDocenteDetData &&
          other.cargaCursoDocenteId == this.cargaCursoDocenteId &&
          other.alumnoId == this.alumnoId);
}

class CargaCursoDocenteDetCompanion
    extends UpdateCompanion<CargaCursoDocenteDetData> {
  final Value<int?> cargaCursoDocenteId;
  final Value<int?> alumnoId;
  const CargaCursoDocenteDetCompanion({
    this.cargaCursoDocenteId = const Value.absent(),
    this.alumnoId = const Value.absent(),
  });
  CargaCursoDocenteDetCompanion.insert({
    this.cargaCursoDocenteId = const Value.absent(),
    this.alumnoId = const Value.absent(),
  });
  static Insertable<CargaCursoDocenteDetData> custom({
    Expression<int?>? cargaCursoDocenteId,
    Expression<int?>? alumnoId,
  }) {
    return RawValuesInsertable({
      if (cargaCursoDocenteId != null)
        'carga_curso_docente_id': cargaCursoDocenteId,
      if (alumnoId != null) 'alumno_id': alumnoId,
    });
  }

  CargaCursoDocenteDetCompanion copyWith(
      {Value<int?>? cargaCursoDocenteId, Value<int?>? alumnoId}) {
    return CargaCursoDocenteDetCompanion(
      cargaCursoDocenteId: cargaCursoDocenteId ?? this.cargaCursoDocenteId,
      alumnoId: alumnoId ?? this.alumnoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (cargaCursoDocenteId.present) {
      map['carga_curso_docente_id'] = Variable<int?>(cargaCursoDocenteId.value);
    }
    if (alumnoId.present) {
      map['alumno_id'] = Variable<int?>(alumnoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CargaCursoDocenteDetCompanion(')
          ..write('cargaCursoDocenteId: $cargaCursoDocenteId, ')
          ..write('alumnoId: $alumnoId')
          ..write(')'))
        .toString();
  }
}

class $CargaCursoDocenteDetTable extends CargaCursoDocenteDet
    with TableInfo<$CargaCursoDocenteDetTable, CargaCursoDocenteDetData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CargaCursoDocenteDetTable(this._db, [this._alias]);
  final VerificationMeta _cargaCursoDocenteIdMeta =
      const VerificationMeta('cargaCursoDocenteId');
  late final GeneratedColumn<int?> cargaCursoDocenteId = GeneratedColumn<int?>(
      'carga_curso_docente_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _alumnoIdMeta = const VerificationMeta('alumnoId');
  late final GeneratedColumn<int?> alumnoId = GeneratedColumn<int?>(
      'alumno_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [cargaCursoDocenteId, alumnoId];
  @override
  String get aliasedName => _alias ?? 'carga_curso_docente_det';
  @override
  String get actualTableName => 'carga_curso_docente_det';
  @override
  VerificationContext validateIntegrity(
      Insertable<CargaCursoDocenteDetData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('carga_curso_docente_id')) {
      context.handle(
          _cargaCursoDocenteIdMeta,
          cargaCursoDocenteId.isAcceptableOrUnknown(
              data['carga_curso_docente_id']!, _cargaCursoDocenteIdMeta));
    }
    if (data.containsKey('alumno_id')) {
      context.handle(_alumnoIdMeta,
          alumnoId.isAcceptableOrUnknown(data['alumno_id']!, _alumnoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {cargaCursoDocenteId};
  @override
  CargaCursoDocenteDetData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return CargaCursoDocenteDetData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CargaCursoDocenteDetTable createAlias(String alias) {
    return $CargaCursoDocenteDetTable(_db, alias);
  }
}

class CargaCursoData extends DataClass implements Insertable<CargaCursoData> {
  final int cargaCursoId;
  final int? planCursoId;
  final int? empleadoId;
  final int? cargaAcademicaId;
  final int? complejo;
  final int? evaluable;
  final int? idempleado;
  final int? idTipoHora;
  final String? descripcion;
  final DateTime? fechaInicio;
  final DateTime? fechafin;
  final String? modo;
  final int? estado;
  final int? anioAcademicoId;
  final int? aulaId;
  final int? grupoId;
  final int? idPlanEstudio;
  final int? idPlanEstudioVersion;
  final int? CapacidadVacanteP;
  final int? CapacidadVacanteD;
  final String? nombreDocente;
  final int? personaIdDocente;
  final String? fotoDocente;
  CargaCursoData(
      {required this.cargaCursoId,
      this.planCursoId,
      this.empleadoId,
      this.cargaAcademicaId,
      this.complejo,
      this.evaluable,
      this.idempleado,
      this.idTipoHora,
      this.descripcion,
      this.fechaInicio,
      this.fechafin,
      this.modo,
      this.estado,
      this.anioAcademicoId,
      this.aulaId,
      this.grupoId,
      this.idPlanEstudio,
      this.idPlanEstudioVersion,
      this.CapacidadVacanteP,
      this.CapacidadVacanteD,
      this.nombreDocente,
      this.personaIdDocente,
      this.fotoDocente});
  factory CargaCursoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CargaCursoData(
      cargaCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}carga_curso_id'])!,
      planCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plan_curso_id']),
      empleadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}empleado_id']),
      cargaAcademicaId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}carga_academica_id']),
      complejo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}complejo']),
      evaluable: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}evaluable']),
      idempleado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}idempleado']),
      idTipoHora: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_tipo_hora']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      fechaInicio: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_inicio']),
      fechafin: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fechafin']),
      modo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}modo']),
      estado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      anioAcademicoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}anio_academico_id']),
      aulaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aula_id']),
      grupoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}grupo_id']),
      idPlanEstudio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_plan_estudio']),
      idPlanEstudioVersion: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_plan_estudio_version']),
      CapacidadVacanteP: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}capacidad_vacante_p']),
      CapacidadVacanteD: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}capacidad_vacante_d']),
      nombreDocente: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre_docente']),
      personaIdDocente: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}persona_id_docente']),
      fotoDocente: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto_docente']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['carga_curso_id'] = Variable<int>(cargaCursoId);
    if (!nullToAbsent || planCursoId != null) {
      map['plan_curso_id'] = Variable<int?>(planCursoId);
    }
    if (!nullToAbsent || empleadoId != null) {
      map['empleado_id'] = Variable<int?>(empleadoId);
    }
    if (!nullToAbsent || cargaAcademicaId != null) {
      map['carga_academica_id'] = Variable<int?>(cargaAcademicaId);
    }
    if (!nullToAbsent || complejo != null) {
      map['complejo'] = Variable<int?>(complejo);
    }
    if (!nullToAbsent || evaluable != null) {
      map['evaluable'] = Variable<int?>(evaluable);
    }
    if (!nullToAbsent || idempleado != null) {
      map['idempleado'] = Variable<int?>(idempleado);
    }
    if (!nullToAbsent || idTipoHora != null) {
      map['id_tipo_hora'] = Variable<int?>(idTipoHora);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || fechaInicio != null) {
      map['fecha_inicio'] = Variable<DateTime?>(fechaInicio);
    }
    if (!nullToAbsent || fechafin != null) {
      map['fechafin'] = Variable<DateTime?>(fechafin);
    }
    if (!nullToAbsent || modo != null) {
      map['modo'] = Variable<String?>(modo);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<int?>(estado);
    }
    if (!nullToAbsent || anioAcademicoId != null) {
      map['anio_academico_id'] = Variable<int?>(anioAcademicoId);
    }
    if (!nullToAbsent || aulaId != null) {
      map['aula_id'] = Variable<int?>(aulaId);
    }
    if (!nullToAbsent || grupoId != null) {
      map['grupo_id'] = Variable<int?>(grupoId);
    }
    if (!nullToAbsent || idPlanEstudio != null) {
      map['id_plan_estudio'] = Variable<int?>(idPlanEstudio);
    }
    if (!nullToAbsent || idPlanEstudioVersion != null) {
      map['id_plan_estudio_version'] = Variable<int?>(idPlanEstudioVersion);
    }
    if (!nullToAbsent || CapacidadVacanteP != null) {
      map['capacidad_vacante_p'] = Variable<int?>(CapacidadVacanteP);
    }
    if (!nullToAbsent || CapacidadVacanteD != null) {
      map['capacidad_vacante_d'] = Variable<int?>(CapacidadVacanteD);
    }
    if (!nullToAbsent || nombreDocente != null) {
      map['nombre_docente'] = Variable<String?>(nombreDocente);
    }
    if (!nullToAbsent || personaIdDocente != null) {
      map['persona_id_docente'] = Variable<int?>(personaIdDocente);
    }
    if (!nullToAbsent || fotoDocente != null) {
      map['foto_docente'] = Variable<String?>(fotoDocente);
    }
    return map;
  }

  CargaCursoCompanion toCompanion(bool nullToAbsent) {
    return CargaCursoCompanion(
      cargaCursoId: Value(cargaCursoId),
      planCursoId: planCursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(planCursoId),
      empleadoId: empleadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(empleadoId),
      cargaAcademicaId: cargaAcademicaId == null && nullToAbsent
          ? const Value.absent()
          : Value(cargaAcademicaId),
      complejo: complejo == null && nullToAbsent
          ? const Value.absent()
          : Value(complejo),
      evaluable: evaluable == null && nullToAbsent
          ? const Value.absent()
          : Value(evaluable),
      idempleado: idempleado == null && nullToAbsent
          ? const Value.absent()
          : Value(idempleado),
      idTipoHora: idTipoHora == null && nullToAbsent
          ? const Value.absent()
          : Value(idTipoHora),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      fechaInicio: fechaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaInicio),
      fechafin: fechafin == null && nullToAbsent
          ? const Value.absent()
          : Value(fechafin),
      modo: modo == null && nullToAbsent ? const Value.absent() : Value(modo),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      anioAcademicoId: anioAcademicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(anioAcademicoId),
      aulaId:
          aulaId == null && nullToAbsent ? const Value.absent() : Value(aulaId),
      grupoId: grupoId == null && nullToAbsent
          ? const Value.absent()
          : Value(grupoId),
      idPlanEstudio: idPlanEstudio == null && nullToAbsent
          ? const Value.absent()
          : Value(idPlanEstudio),
      idPlanEstudioVersion: idPlanEstudioVersion == null && nullToAbsent
          ? const Value.absent()
          : Value(idPlanEstudioVersion),
      CapacidadVacanteP: CapacidadVacanteP == null && nullToAbsent
          ? const Value.absent()
          : Value(CapacidadVacanteP),
      CapacidadVacanteD: CapacidadVacanteD == null && nullToAbsent
          ? const Value.absent()
          : Value(CapacidadVacanteD),
      nombreDocente: nombreDocente == null && nullToAbsent
          ? const Value.absent()
          : Value(nombreDocente),
      personaIdDocente: personaIdDocente == null && nullToAbsent
          ? const Value.absent()
          : Value(personaIdDocente),
      fotoDocente: fotoDocente == null && nullToAbsent
          ? const Value.absent()
          : Value(fotoDocente),
    );
  }

  factory CargaCursoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CargaCursoData(
      cargaCursoId: serializer.fromJson<int>(json['cargaCursoId']),
      planCursoId: serializer.fromJson<int?>(json['planCursoId']),
      empleadoId: serializer.fromJson<int?>(json['empleadoId']),
      cargaAcademicaId: serializer.fromJson<int?>(json['cargaAcademicaId']),
      complejo: serializer.fromJson<int?>(json['complejo']),
      evaluable: serializer.fromJson<int?>(json['evaluable']),
      idempleado: serializer.fromJson<int?>(json['idempleado']),
      idTipoHora: serializer.fromJson<int?>(json['idTipoHora']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      fechaInicio: serializer.fromJson<DateTime?>(json['fechaInicio']),
      fechafin: serializer.fromJson<DateTime?>(json['fechafin']),
      modo: serializer.fromJson<String?>(json['modo']),
      estado: serializer.fromJson<int?>(json['estado']),
      anioAcademicoId: serializer.fromJson<int?>(json['anioAcademicoId']),
      aulaId: serializer.fromJson<int?>(json['aulaId']),
      grupoId: serializer.fromJson<int?>(json['grupoId']),
      idPlanEstudio: serializer.fromJson<int?>(json['idPlanEstudio']),
      idPlanEstudioVersion:
          serializer.fromJson<int?>(json['idPlanEstudioVersion']),
      CapacidadVacanteP: serializer.fromJson<int?>(json['CapacidadVacanteP']),
      CapacidadVacanteD: serializer.fromJson<int?>(json['CapacidadVacanteD']),
      nombreDocente: serializer.fromJson<String?>(json['nombreDocente']),
      personaIdDocente: serializer.fromJson<int?>(json['personaIdDocente']),
      fotoDocente: serializer.fromJson<String?>(json['fotoDocente']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'cargaCursoId': serializer.toJson<int>(cargaCursoId),
      'planCursoId': serializer.toJson<int?>(planCursoId),
      'empleadoId': serializer.toJson<int?>(empleadoId),
      'cargaAcademicaId': serializer.toJson<int?>(cargaAcademicaId),
      'complejo': serializer.toJson<int?>(complejo),
      'evaluable': serializer.toJson<int?>(evaluable),
      'idempleado': serializer.toJson<int?>(idempleado),
      'idTipoHora': serializer.toJson<int?>(idTipoHora),
      'descripcion': serializer.toJson<String?>(descripcion),
      'fechaInicio': serializer.toJson<DateTime?>(fechaInicio),
      'fechafin': serializer.toJson<DateTime?>(fechafin),
      'modo': serializer.toJson<String?>(modo),
      'estado': serializer.toJson<int?>(estado),
      'anioAcademicoId': serializer.toJson<int?>(anioAcademicoId),
      'aulaId': serializer.toJson<int?>(aulaId),
      'grupoId': serializer.toJson<int?>(grupoId),
      'idPlanEstudio': serializer.toJson<int?>(idPlanEstudio),
      'idPlanEstudioVersion': serializer.toJson<int?>(idPlanEstudioVersion),
      'CapacidadVacanteP': serializer.toJson<int?>(CapacidadVacanteP),
      'CapacidadVacanteD': serializer.toJson<int?>(CapacidadVacanteD),
      'nombreDocente': serializer.toJson<String?>(nombreDocente),
      'personaIdDocente': serializer.toJson<int?>(personaIdDocente),
      'fotoDocente': serializer.toJson<String?>(fotoDocente),
    };
  }

  CargaCursoData copyWith(
          {int? cargaCursoId,
          int? planCursoId,
          int? empleadoId,
          int? cargaAcademicaId,
          int? complejo,
          int? evaluable,
          int? idempleado,
          int? idTipoHora,
          String? descripcion,
          DateTime? fechaInicio,
          DateTime? fechafin,
          String? modo,
          int? estado,
          int? anioAcademicoId,
          int? aulaId,
          int? grupoId,
          int? idPlanEstudio,
          int? idPlanEstudioVersion,
          int? CapacidadVacanteP,
          int? CapacidadVacanteD,
          String? nombreDocente,
          int? personaIdDocente,
          String? fotoDocente}) =>
      CargaCursoData(
        cargaCursoId: cargaCursoId ?? this.cargaCursoId,
        planCursoId: planCursoId ?? this.planCursoId,
        empleadoId: empleadoId ?? this.empleadoId,
        cargaAcademicaId: cargaAcademicaId ?? this.cargaAcademicaId,
        complejo: complejo ?? this.complejo,
        evaluable: evaluable ?? this.evaluable,
        idempleado: idempleado ?? this.idempleado,
        idTipoHora: idTipoHora ?? this.idTipoHora,
        descripcion: descripcion ?? this.descripcion,
        fechaInicio: fechaInicio ?? this.fechaInicio,
        fechafin: fechafin ?? this.fechafin,
        modo: modo ?? this.modo,
        estado: estado ?? this.estado,
        anioAcademicoId: anioAcademicoId ?? this.anioAcademicoId,
        aulaId: aulaId ?? this.aulaId,
        grupoId: grupoId ?? this.grupoId,
        idPlanEstudio: idPlanEstudio ?? this.idPlanEstudio,
        idPlanEstudioVersion: idPlanEstudioVersion ?? this.idPlanEstudioVersion,
        CapacidadVacanteP: CapacidadVacanteP ?? this.CapacidadVacanteP,
        CapacidadVacanteD: CapacidadVacanteD ?? this.CapacidadVacanteD,
        nombreDocente: nombreDocente ?? this.nombreDocente,
        personaIdDocente: personaIdDocente ?? this.personaIdDocente,
        fotoDocente: fotoDocente ?? this.fotoDocente,
      );
  @override
  String toString() {
    return (StringBuffer('CargaCursoData(')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('planCursoId: $planCursoId, ')
          ..write('empleadoId: $empleadoId, ')
          ..write('cargaAcademicaId: $cargaAcademicaId, ')
          ..write('complejo: $complejo, ')
          ..write('evaluable: $evaluable, ')
          ..write('idempleado: $idempleado, ')
          ..write('idTipoHora: $idTipoHora, ')
          ..write('descripcion: $descripcion, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechafin: $fechafin, ')
          ..write('modo: $modo, ')
          ..write('estado: $estado, ')
          ..write('anioAcademicoId: $anioAcademicoId, ')
          ..write('aulaId: $aulaId, ')
          ..write('grupoId: $grupoId, ')
          ..write('idPlanEstudio: $idPlanEstudio, ')
          ..write('idPlanEstudioVersion: $idPlanEstudioVersion, ')
          ..write('CapacidadVacanteP: $CapacidadVacanteP, ')
          ..write('CapacidadVacanteD: $CapacidadVacanteD, ')
          ..write('nombreDocente: $nombreDocente, ')
          ..write('personaIdDocente: $personaIdDocente, ')
          ..write('fotoDocente: $fotoDocente')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      cargaCursoId.hashCode,
      $mrjc(
          planCursoId.hashCode,
          $mrjc(
              empleadoId.hashCode,
              $mrjc(
                  cargaAcademicaId.hashCode,
                  $mrjc(
                      complejo.hashCode,
                      $mrjc(
                          evaluable.hashCode,
                          $mrjc(
                              idempleado.hashCode,
                              $mrjc(
                                  idTipoHora.hashCode,
                                  $mrjc(
                                      descripcion.hashCode,
                                      $mrjc(
                                          fechaInicio.hashCode,
                                          $mrjc(
                                              fechafin.hashCode,
                                              $mrjc(
                                                  modo.hashCode,
                                                  $mrjc(
                                                      estado.hashCode,
                                                      $mrjc(
                                                          anioAcademicoId
                                                              .hashCode,
                                                          $mrjc(
                                                              aulaId.hashCode,
                                                              $mrjc(
                                                                  grupoId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      idPlanEstudio
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          idPlanEstudioVersion
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              CapacidadVacanteP.hashCode,
                                                                              $mrjc(CapacidadVacanteD.hashCode, $mrjc(nombreDocente.hashCode, $mrjc(personaIdDocente.hashCode, fotoDocente.hashCode)))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CargaCursoData &&
          other.cargaCursoId == this.cargaCursoId &&
          other.planCursoId == this.planCursoId &&
          other.empleadoId == this.empleadoId &&
          other.cargaAcademicaId == this.cargaAcademicaId &&
          other.complejo == this.complejo &&
          other.evaluable == this.evaluable &&
          other.idempleado == this.idempleado &&
          other.idTipoHora == this.idTipoHora &&
          other.descripcion == this.descripcion &&
          other.fechaInicio == this.fechaInicio &&
          other.fechafin == this.fechafin &&
          other.modo == this.modo &&
          other.estado == this.estado &&
          other.anioAcademicoId == this.anioAcademicoId &&
          other.aulaId == this.aulaId &&
          other.grupoId == this.grupoId &&
          other.idPlanEstudio == this.idPlanEstudio &&
          other.idPlanEstudioVersion == this.idPlanEstudioVersion &&
          other.CapacidadVacanteP == this.CapacidadVacanteP &&
          other.CapacidadVacanteD == this.CapacidadVacanteD &&
          other.nombreDocente == this.nombreDocente &&
          other.personaIdDocente == this.personaIdDocente &&
          other.fotoDocente == this.fotoDocente);
}

class CargaCursoCompanion extends UpdateCompanion<CargaCursoData> {
  final Value<int> cargaCursoId;
  final Value<int?> planCursoId;
  final Value<int?> empleadoId;
  final Value<int?> cargaAcademicaId;
  final Value<int?> complejo;
  final Value<int?> evaluable;
  final Value<int?> idempleado;
  final Value<int?> idTipoHora;
  final Value<String?> descripcion;
  final Value<DateTime?> fechaInicio;
  final Value<DateTime?> fechafin;
  final Value<String?> modo;
  final Value<int?> estado;
  final Value<int?> anioAcademicoId;
  final Value<int?> aulaId;
  final Value<int?> grupoId;
  final Value<int?> idPlanEstudio;
  final Value<int?> idPlanEstudioVersion;
  final Value<int?> CapacidadVacanteP;
  final Value<int?> CapacidadVacanteD;
  final Value<String?> nombreDocente;
  final Value<int?> personaIdDocente;
  final Value<String?> fotoDocente;
  const CargaCursoCompanion({
    this.cargaCursoId = const Value.absent(),
    this.planCursoId = const Value.absent(),
    this.empleadoId = const Value.absent(),
    this.cargaAcademicaId = const Value.absent(),
    this.complejo = const Value.absent(),
    this.evaluable = const Value.absent(),
    this.idempleado = const Value.absent(),
    this.idTipoHora = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechafin = const Value.absent(),
    this.modo = const Value.absent(),
    this.estado = const Value.absent(),
    this.anioAcademicoId = const Value.absent(),
    this.aulaId = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.idPlanEstudio = const Value.absent(),
    this.idPlanEstudioVersion = const Value.absent(),
    this.CapacidadVacanteP = const Value.absent(),
    this.CapacidadVacanteD = const Value.absent(),
    this.nombreDocente = const Value.absent(),
    this.personaIdDocente = const Value.absent(),
    this.fotoDocente = const Value.absent(),
  });
  CargaCursoCompanion.insert({
    this.cargaCursoId = const Value.absent(),
    this.planCursoId = const Value.absent(),
    this.empleadoId = const Value.absent(),
    this.cargaAcademicaId = const Value.absent(),
    this.complejo = const Value.absent(),
    this.evaluable = const Value.absent(),
    this.idempleado = const Value.absent(),
    this.idTipoHora = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechafin = const Value.absent(),
    this.modo = const Value.absent(),
    this.estado = const Value.absent(),
    this.anioAcademicoId = const Value.absent(),
    this.aulaId = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.idPlanEstudio = const Value.absent(),
    this.idPlanEstudioVersion = const Value.absent(),
    this.CapacidadVacanteP = const Value.absent(),
    this.CapacidadVacanteD = const Value.absent(),
    this.nombreDocente = const Value.absent(),
    this.personaIdDocente = const Value.absent(),
    this.fotoDocente = const Value.absent(),
  });
  static Insertable<CargaCursoData> custom({
    Expression<int>? cargaCursoId,
    Expression<int?>? planCursoId,
    Expression<int?>? empleadoId,
    Expression<int?>? cargaAcademicaId,
    Expression<int?>? complejo,
    Expression<int?>? evaluable,
    Expression<int?>? idempleado,
    Expression<int?>? idTipoHora,
    Expression<String?>? descripcion,
    Expression<DateTime?>? fechaInicio,
    Expression<DateTime?>? fechafin,
    Expression<String?>? modo,
    Expression<int?>? estado,
    Expression<int?>? anioAcademicoId,
    Expression<int?>? aulaId,
    Expression<int?>? grupoId,
    Expression<int?>? idPlanEstudio,
    Expression<int?>? idPlanEstudioVersion,
    Expression<int?>? CapacidadVacanteP,
    Expression<int?>? CapacidadVacanteD,
    Expression<String?>? nombreDocente,
    Expression<int?>? personaIdDocente,
    Expression<String?>? fotoDocente,
  }) {
    return RawValuesInsertable({
      if (cargaCursoId != null) 'carga_curso_id': cargaCursoId,
      if (planCursoId != null) 'plan_curso_id': planCursoId,
      if (empleadoId != null) 'empleado_id': empleadoId,
      if (cargaAcademicaId != null) 'carga_academica_id': cargaAcademicaId,
      if (complejo != null) 'complejo': complejo,
      if (evaluable != null) 'evaluable': evaluable,
      if (idempleado != null) 'idempleado': idempleado,
      if (idTipoHora != null) 'id_tipo_hora': idTipoHora,
      if (descripcion != null) 'descripcion': descripcion,
      if (fechaInicio != null) 'fecha_inicio': fechaInicio,
      if (fechafin != null) 'fechafin': fechafin,
      if (modo != null) 'modo': modo,
      if (estado != null) 'estado': estado,
      if (anioAcademicoId != null) 'anio_academico_id': anioAcademicoId,
      if (aulaId != null) 'aula_id': aulaId,
      if (grupoId != null) 'grupo_id': grupoId,
      if (idPlanEstudio != null) 'id_plan_estudio': idPlanEstudio,
      if (idPlanEstudioVersion != null)
        'id_plan_estudio_version': idPlanEstudioVersion,
      if (CapacidadVacanteP != null) 'capacidad_vacante_p': CapacidadVacanteP,
      if (CapacidadVacanteD != null) 'capacidad_vacante_d': CapacidadVacanteD,
      if (nombreDocente != null) 'nombre_docente': nombreDocente,
      if (personaIdDocente != null) 'persona_id_docente': personaIdDocente,
      if (fotoDocente != null) 'foto_docente': fotoDocente,
    });
  }

  CargaCursoCompanion copyWith(
      {Value<int>? cargaCursoId,
      Value<int?>? planCursoId,
      Value<int?>? empleadoId,
      Value<int?>? cargaAcademicaId,
      Value<int?>? complejo,
      Value<int?>? evaluable,
      Value<int?>? idempleado,
      Value<int?>? idTipoHora,
      Value<String?>? descripcion,
      Value<DateTime?>? fechaInicio,
      Value<DateTime?>? fechafin,
      Value<String?>? modo,
      Value<int?>? estado,
      Value<int?>? anioAcademicoId,
      Value<int?>? aulaId,
      Value<int?>? grupoId,
      Value<int?>? idPlanEstudio,
      Value<int?>? idPlanEstudioVersion,
      Value<int?>? CapacidadVacanteP,
      Value<int?>? CapacidadVacanteD,
      Value<String?>? nombreDocente,
      Value<int?>? personaIdDocente,
      Value<String?>? fotoDocente}) {
    return CargaCursoCompanion(
      cargaCursoId: cargaCursoId ?? this.cargaCursoId,
      planCursoId: planCursoId ?? this.planCursoId,
      empleadoId: empleadoId ?? this.empleadoId,
      cargaAcademicaId: cargaAcademicaId ?? this.cargaAcademicaId,
      complejo: complejo ?? this.complejo,
      evaluable: evaluable ?? this.evaluable,
      idempleado: idempleado ?? this.idempleado,
      idTipoHora: idTipoHora ?? this.idTipoHora,
      descripcion: descripcion ?? this.descripcion,
      fechaInicio: fechaInicio ?? this.fechaInicio,
      fechafin: fechafin ?? this.fechafin,
      modo: modo ?? this.modo,
      estado: estado ?? this.estado,
      anioAcademicoId: anioAcademicoId ?? this.anioAcademicoId,
      aulaId: aulaId ?? this.aulaId,
      grupoId: grupoId ?? this.grupoId,
      idPlanEstudio: idPlanEstudio ?? this.idPlanEstudio,
      idPlanEstudioVersion: idPlanEstudioVersion ?? this.idPlanEstudioVersion,
      CapacidadVacanteP: CapacidadVacanteP ?? this.CapacidadVacanteP,
      CapacidadVacanteD: CapacidadVacanteD ?? this.CapacidadVacanteD,
      nombreDocente: nombreDocente ?? this.nombreDocente,
      personaIdDocente: personaIdDocente ?? this.personaIdDocente,
      fotoDocente: fotoDocente ?? this.fotoDocente,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (cargaCursoId.present) {
      map['carga_curso_id'] = Variable<int>(cargaCursoId.value);
    }
    if (planCursoId.present) {
      map['plan_curso_id'] = Variable<int?>(planCursoId.value);
    }
    if (empleadoId.present) {
      map['empleado_id'] = Variable<int?>(empleadoId.value);
    }
    if (cargaAcademicaId.present) {
      map['carga_academica_id'] = Variable<int?>(cargaAcademicaId.value);
    }
    if (complejo.present) {
      map['complejo'] = Variable<int?>(complejo.value);
    }
    if (evaluable.present) {
      map['evaluable'] = Variable<int?>(evaluable.value);
    }
    if (idempleado.present) {
      map['idempleado'] = Variable<int?>(idempleado.value);
    }
    if (idTipoHora.present) {
      map['id_tipo_hora'] = Variable<int?>(idTipoHora.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (fechaInicio.present) {
      map['fecha_inicio'] = Variable<DateTime?>(fechaInicio.value);
    }
    if (fechafin.present) {
      map['fechafin'] = Variable<DateTime?>(fechafin.value);
    }
    if (modo.present) {
      map['modo'] = Variable<String?>(modo.value);
    }
    if (estado.present) {
      map['estado'] = Variable<int?>(estado.value);
    }
    if (anioAcademicoId.present) {
      map['anio_academico_id'] = Variable<int?>(anioAcademicoId.value);
    }
    if (aulaId.present) {
      map['aula_id'] = Variable<int?>(aulaId.value);
    }
    if (grupoId.present) {
      map['grupo_id'] = Variable<int?>(grupoId.value);
    }
    if (idPlanEstudio.present) {
      map['id_plan_estudio'] = Variable<int?>(idPlanEstudio.value);
    }
    if (idPlanEstudioVersion.present) {
      map['id_plan_estudio_version'] =
          Variable<int?>(idPlanEstudioVersion.value);
    }
    if (CapacidadVacanteP.present) {
      map['capacidad_vacante_p'] = Variable<int?>(CapacidadVacanteP.value);
    }
    if (CapacidadVacanteD.present) {
      map['capacidad_vacante_d'] = Variable<int?>(CapacidadVacanteD.value);
    }
    if (nombreDocente.present) {
      map['nombre_docente'] = Variable<String?>(nombreDocente.value);
    }
    if (personaIdDocente.present) {
      map['persona_id_docente'] = Variable<int?>(personaIdDocente.value);
    }
    if (fotoDocente.present) {
      map['foto_docente'] = Variable<String?>(fotoDocente.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CargaCursoCompanion(')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('planCursoId: $planCursoId, ')
          ..write('empleadoId: $empleadoId, ')
          ..write('cargaAcademicaId: $cargaAcademicaId, ')
          ..write('complejo: $complejo, ')
          ..write('evaluable: $evaluable, ')
          ..write('idempleado: $idempleado, ')
          ..write('idTipoHora: $idTipoHora, ')
          ..write('descripcion: $descripcion, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechafin: $fechafin, ')
          ..write('modo: $modo, ')
          ..write('estado: $estado, ')
          ..write('anioAcademicoId: $anioAcademicoId, ')
          ..write('aulaId: $aulaId, ')
          ..write('grupoId: $grupoId, ')
          ..write('idPlanEstudio: $idPlanEstudio, ')
          ..write('idPlanEstudioVersion: $idPlanEstudioVersion, ')
          ..write('CapacidadVacanteP: $CapacidadVacanteP, ')
          ..write('CapacidadVacanteD: $CapacidadVacanteD, ')
          ..write('nombreDocente: $nombreDocente, ')
          ..write('personaIdDocente: $personaIdDocente, ')
          ..write('fotoDocente: $fotoDocente')
          ..write(')'))
        .toString();
  }
}

class $CargaCursoTable extends CargaCurso
    with TableInfo<$CargaCursoTable, CargaCursoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CargaCursoTable(this._db, [this._alias]);
  final VerificationMeta _cargaCursoIdMeta =
      const VerificationMeta('cargaCursoId');
  late final GeneratedColumn<int?> cargaCursoId = GeneratedColumn<int?>(
      'carga_curso_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _planCursoIdMeta =
      const VerificationMeta('planCursoId');
  late final GeneratedColumn<int?> planCursoId = GeneratedColumn<int?>(
      'plan_curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _empleadoIdMeta = const VerificationMeta('empleadoId');
  late final GeneratedColumn<int?> empleadoId = GeneratedColumn<int?>(
      'empleado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cargaAcademicaIdMeta =
      const VerificationMeta('cargaAcademicaId');
  late final GeneratedColumn<int?> cargaAcademicaId = GeneratedColumn<int?>(
      'carga_academica_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _complejoMeta = const VerificationMeta('complejo');
  late final GeneratedColumn<int?> complejo = GeneratedColumn<int?>(
      'complejo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _evaluableMeta = const VerificationMeta('evaluable');
  late final GeneratedColumn<int?> evaluable = GeneratedColumn<int?>(
      'evaluable', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idempleadoMeta = const VerificationMeta('idempleado');
  late final GeneratedColumn<int?> idempleado = GeneratedColumn<int?>(
      'idempleado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idTipoHoraMeta = const VerificationMeta('idTipoHora');
  late final GeneratedColumn<int?> idTipoHora = GeneratedColumn<int?>(
      'id_tipo_hora', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaInicioMeta =
      const VerificationMeta('fechaInicio');
  late final GeneratedColumn<DateTime?> fechaInicio =
      GeneratedColumn<DateTime?>('fecha_inicio', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechafinMeta = const VerificationMeta('fechafin');
  late final GeneratedColumn<DateTime?> fechafin = GeneratedColumn<DateTime?>(
      'fechafin', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _modoMeta = const VerificationMeta('modo');
  late final GeneratedColumn<String?> modo = GeneratedColumn<String?>(
      'modo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<int?> estado = GeneratedColumn<int?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _anioAcademicoIdMeta =
      const VerificationMeta('anioAcademicoId');
  late final GeneratedColumn<int?> anioAcademicoId = GeneratedColumn<int?>(
      'anio_academico_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _aulaIdMeta = const VerificationMeta('aulaId');
  late final GeneratedColumn<int?> aulaId = GeneratedColumn<int?>(
      'aula_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _grupoIdMeta = const VerificationMeta('grupoId');
  late final GeneratedColumn<int?> grupoId = GeneratedColumn<int?>(
      'grupo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idPlanEstudioMeta =
      const VerificationMeta('idPlanEstudio');
  late final GeneratedColumn<int?> idPlanEstudio = GeneratedColumn<int?>(
      'id_plan_estudio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idPlanEstudioVersionMeta =
      const VerificationMeta('idPlanEstudioVersion');
  late final GeneratedColumn<int?> idPlanEstudioVersion = GeneratedColumn<int?>(
      'id_plan_estudio_version', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _CapacidadVacantePMeta =
      const VerificationMeta('CapacidadVacanteP');
  late final GeneratedColumn<int?> CapacidadVacanteP = GeneratedColumn<int?>(
      'capacidad_vacante_p', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _CapacidadVacanteDMeta =
      const VerificationMeta('CapacidadVacanteD');
  late final GeneratedColumn<int?> CapacidadVacanteD = GeneratedColumn<int?>(
      'capacidad_vacante_d', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreDocenteMeta =
      const VerificationMeta('nombreDocente');
  late final GeneratedColumn<String?> nombreDocente = GeneratedColumn<String?>(
      'nombre_docente', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _personaIdDocenteMeta =
      const VerificationMeta('personaIdDocente');
  late final GeneratedColumn<int?> personaIdDocente = GeneratedColumn<int?>(
      'persona_id_docente', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fotoDocenteMeta =
      const VerificationMeta('fotoDocente');
  late final GeneratedColumn<String?> fotoDocente = GeneratedColumn<String?>(
      'foto_docente', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        cargaCursoId,
        planCursoId,
        empleadoId,
        cargaAcademicaId,
        complejo,
        evaluable,
        idempleado,
        idTipoHora,
        descripcion,
        fechaInicio,
        fechafin,
        modo,
        estado,
        anioAcademicoId,
        aulaId,
        grupoId,
        idPlanEstudio,
        idPlanEstudioVersion,
        CapacidadVacanteP,
        CapacidadVacanteD,
        nombreDocente,
        personaIdDocente,
        fotoDocente
      ];
  @override
  String get aliasedName => _alias ?? 'carga_curso';
  @override
  String get actualTableName => 'carga_curso';
  @override
  VerificationContext validateIntegrity(Insertable<CargaCursoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('carga_curso_id')) {
      context.handle(
          _cargaCursoIdMeta,
          cargaCursoId.isAcceptableOrUnknown(
              data['carga_curso_id']!, _cargaCursoIdMeta));
    }
    if (data.containsKey('plan_curso_id')) {
      context.handle(
          _planCursoIdMeta,
          planCursoId.isAcceptableOrUnknown(
              data['plan_curso_id']!, _planCursoIdMeta));
    }
    if (data.containsKey('empleado_id')) {
      context.handle(
          _empleadoIdMeta,
          empleadoId.isAcceptableOrUnknown(
              data['empleado_id']!, _empleadoIdMeta));
    }
    if (data.containsKey('carga_academica_id')) {
      context.handle(
          _cargaAcademicaIdMeta,
          cargaAcademicaId.isAcceptableOrUnknown(
              data['carga_academica_id']!, _cargaAcademicaIdMeta));
    }
    if (data.containsKey('complejo')) {
      context.handle(_complejoMeta,
          complejo.isAcceptableOrUnknown(data['complejo']!, _complejoMeta));
    }
    if (data.containsKey('evaluable')) {
      context.handle(_evaluableMeta,
          evaluable.isAcceptableOrUnknown(data['evaluable']!, _evaluableMeta));
    }
    if (data.containsKey('idempleado')) {
      context.handle(
          _idempleadoMeta,
          idempleado.isAcceptableOrUnknown(
              data['idempleado']!, _idempleadoMeta));
    }
    if (data.containsKey('id_tipo_hora')) {
      context.handle(
          _idTipoHoraMeta,
          idTipoHora.isAcceptableOrUnknown(
              data['id_tipo_hora']!, _idTipoHoraMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('fecha_inicio')) {
      context.handle(
          _fechaInicioMeta,
          fechaInicio.isAcceptableOrUnknown(
              data['fecha_inicio']!, _fechaInicioMeta));
    }
    if (data.containsKey('fechafin')) {
      context.handle(_fechafinMeta,
          fechafin.isAcceptableOrUnknown(data['fechafin']!, _fechafinMeta));
    }
    if (data.containsKey('modo')) {
      context.handle(
          _modoMeta, modo.isAcceptableOrUnknown(data['modo']!, _modoMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('anio_academico_id')) {
      context.handle(
          _anioAcademicoIdMeta,
          anioAcademicoId.isAcceptableOrUnknown(
              data['anio_academico_id']!, _anioAcademicoIdMeta));
    }
    if (data.containsKey('aula_id')) {
      context.handle(_aulaIdMeta,
          aulaId.isAcceptableOrUnknown(data['aula_id']!, _aulaIdMeta));
    }
    if (data.containsKey('grupo_id')) {
      context.handle(_grupoIdMeta,
          grupoId.isAcceptableOrUnknown(data['grupo_id']!, _grupoIdMeta));
    }
    if (data.containsKey('id_plan_estudio')) {
      context.handle(
          _idPlanEstudioMeta,
          idPlanEstudio.isAcceptableOrUnknown(
              data['id_plan_estudio']!, _idPlanEstudioMeta));
    }
    if (data.containsKey('id_plan_estudio_version')) {
      context.handle(
          _idPlanEstudioVersionMeta,
          idPlanEstudioVersion.isAcceptableOrUnknown(
              data['id_plan_estudio_version']!, _idPlanEstudioVersionMeta));
    }
    if (data.containsKey('capacidad_vacante_p')) {
      context.handle(
          _CapacidadVacantePMeta,
          CapacidadVacanteP.isAcceptableOrUnknown(
              data['capacidad_vacante_p']!, _CapacidadVacantePMeta));
    }
    if (data.containsKey('capacidad_vacante_d')) {
      context.handle(
          _CapacidadVacanteDMeta,
          CapacidadVacanteD.isAcceptableOrUnknown(
              data['capacidad_vacante_d']!, _CapacidadVacanteDMeta));
    }
    if (data.containsKey('nombre_docente')) {
      context.handle(
          _nombreDocenteMeta,
          nombreDocente.isAcceptableOrUnknown(
              data['nombre_docente']!, _nombreDocenteMeta));
    }
    if (data.containsKey('persona_id_docente')) {
      context.handle(
          _personaIdDocenteMeta,
          personaIdDocente.isAcceptableOrUnknown(
              data['persona_id_docente']!, _personaIdDocenteMeta));
    }
    if (data.containsKey('foto_docente')) {
      context.handle(
          _fotoDocenteMeta,
          fotoDocente.isAcceptableOrUnknown(
              data['foto_docente']!, _fotoDocenteMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {cargaCursoId};
  @override
  CargaCursoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CargaCursoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CargaCursoTable createAlias(String alias) {
    return $CargaCursoTable(_db, alias);
  }
}

class Curso extends DataClass implements Insertable<Curso> {
  final int cursoId;
  final String? nombre;
  final int? estadoId;
  final String? descripcion;
  final String? cursoAlias;
  final int? entidadId;
  final int? nivelAcadId;
  final int? tipoCursoId;
  final int? tipoConceptoId;
  final String? color;
  final String? creditos;
  final String? totalHP;
  final String? totalHT;
  final String? notaAprobatoria;
  final String? sumilla;
  final int? superId;
  final int? idServicioLaboratorio;
  final int? horasLaboratorio;
  final bool? tipoSubcurso;
  final String? foto;
  final String? codigo;
  Curso(
      {required this.cursoId,
      this.nombre,
      this.estadoId,
      this.descripcion,
      this.cursoAlias,
      this.entidadId,
      this.nivelAcadId,
      this.tipoCursoId,
      this.tipoConceptoId,
      this.color,
      this.creditos,
      this.totalHP,
      this.totalHT,
      this.notaAprobatoria,
      this.sumilla,
      this.superId,
      this.idServicioLaboratorio,
      this.horasLaboratorio,
      this.tipoSubcurso,
      this.foto,
      this.codigo});
  factory Curso.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Curso(
      cursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curso_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      cursoAlias: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curso_alias']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      nivelAcadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nivel_acad_id']),
      tipoCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_curso_id']),
      tipoConceptoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_concepto_id']),
      color: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}color']),
      creditos: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}creditos']),
      totalHP: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}total_h_p']),
      totalHT: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}total_h_t']),
      notaAprobatoria: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nota_aprobatoria']),
      sumilla: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sumilla']),
      superId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}super_id']),
      idServicioLaboratorio: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_servicio_laboratorio']),
      horasLaboratorio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}horas_laboratorio']),
      tipoSubcurso: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_subcurso']),
      foto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto']),
      codigo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}codigo']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['curso_id'] = Variable<int>(cursoId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || cursoAlias != null) {
      map['curso_alias'] = Variable<String?>(cursoAlias);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || nivelAcadId != null) {
      map['nivel_acad_id'] = Variable<int?>(nivelAcadId);
    }
    if (!nullToAbsent || tipoCursoId != null) {
      map['tipo_curso_id'] = Variable<int?>(tipoCursoId);
    }
    if (!nullToAbsent || tipoConceptoId != null) {
      map['tipo_concepto_id'] = Variable<int?>(tipoConceptoId);
    }
    if (!nullToAbsent || color != null) {
      map['color'] = Variable<String?>(color);
    }
    if (!nullToAbsent || creditos != null) {
      map['creditos'] = Variable<String?>(creditos);
    }
    if (!nullToAbsent || totalHP != null) {
      map['total_h_p'] = Variable<String?>(totalHP);
    }
    if (!nullToAbsent || totalHT != null) {
      map['total_h_t'] = Variable<String?>(totalHT);
    }
    if (!nullToAbsent || notaAprobatoria != null) {
      map['nota_aprobatoria'] = Variable<String?>(notaAprobatoria);
    }
    if (!nullToAbsent || sumilla != null) {
      map['sumilla'] = Variable<String?>(sumilla);
    }
    if (!nullToAbsent || superId != null) {
      map['super_id'] = Variable<int?>(superId);
    }
    if (!nullToAbsent || idServicioLaboratorio != null) {
      map['id_servicio_laboratorio'] = Variable<int?>(idServicioLaboratorio);
    }
    if (!nullToAbsent || horasLaboratorio != null) {
      map['horas_laboratorio'] = Variable<int?>(horasLaboratorio);
    }
    if (!nullToAbsent || tipoSubcurso != null) {
      map['tipo_subcurso'] = Variable<bool?>(tipoSubcurso);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<String?>(foto);
    }
    if (!nullToAbsent || codigo != null) {
      map['codigo'] = Variable<String?>(codigo);
    }
    return map;
  }

  CursosCompanion toCompanion(bool nullToAbsent) {
    return CursosCompanion(
      cursoId: Value(cursoId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      cursoAlias: cursoAlias == null && nullToAbsent
          ? const Value.absent()
          : Value(cursoAlias),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      nivelAcadId: nivelAcadId == null && nullToAbsent
          ? const Value.absent()
          : Value(nivelAcadId),
      tipoCursoId: tipoCursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoCursoId),
      tipoConceptoId: tipoConceptoId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoConceptoId),
      color:
          color == null && nullToAbsent ? const Value.absent() : Value(color),
      creditos: creditos == null && nullToAbsent
          ? const Value.absent()
          : Value(creditos),
      totalHP: totalHP == null && nullToAbsent
          ? const Value.absent()
          : Value(totalHP),
      totalHT: totalHT == null && nullToAbsent
          ? const Value.absent()
          : Value(totalHT),
      notaAprobatoria: notaAprobatoria == null && nullToAbsent
          ? const Value.absent()
          : Value(notaAprobatoria),
      sumilla: sumilla == null && nullToAbsent
          ? const Value.absent()
          : Value(sumilla),
      superId: superId == null && nullToAbsent
          ? const Value.absent()
          : Value(superId),
      idServicioLaboratorio: idServicioLaboratorio == null && nullToAbsent
          ? const Value.absent()
          : Value(idServicioLaboratorio),
      horasLaboratorio: horasLaboratorio == null && nullToAbsent
          ? const Value.absent()
          : Value(horasLaboratorio),
      tipoSubcurso: tipoSubcurso == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoSubcurso),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
    );
  }

  factory Curso.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Curso(
      cursoId: serializer.fromJson<int>(json['cursoId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      cursoAlias: serializer.fromJson<String?>(json['cursoAlias']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      nivelAcadId: serializer.fromJson<int?>(json['nivelAcadId']),
      tipoCursoId: serializer.fromJson<int?>(json['tipoCursoId']),
      tipoConceptoId: serializer.fromJson<int?>(json['tipoConceptoId']),
      color: serializer.fromJson<String?>(json['color']),
      creditos: serializer.fromJson<String?>(json['creditos']),
      totalHP: serializer.fromJson<String?>(json['totalHP']),
      totalHT: serializer.fromJson<String?>(json['totalHT']),
      notaAprobatoria: serializer.fromJson<String?>(json['notaAprobatoria']),
      sumilla: serializer.fromJson<String?>(json['sumilla']),
      superId: serializer.fromJson<int?>(json['superId']),
      idServicioLaboratorio:
          serializer.fromJson<int?>(json['idServicioLaboratorio']),
      horasLaboratorio: serializer.fromJson<int?>(json['horasLaboratorio']),
      tipoSubcurso: serializer.fromJson<bool?>(json['tipoSubcurso']),
      foto: serializer.fromJson<String?>(json['foto']),
      codigo: serializer.fromJson<String?>(json['codigo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'cursoId': serializer.toJson<int>(cursoId),
      'nombre': serializer.toJson<String?>(nombre),
      'estadoId': serializer.toJson<int?>(estadoId),
      'descripcion': serializer.toJson<String?>(descripcion),
      'cursoAlias': serializer.toJson<String?>(cursoAlias),
      'entidadId': serializer.toJson<int?>(entidadId),
      'nivelAcadId': serializer.toJson<int?>(nivelAcadId),
      'tipoCursoId': serializer.toJson<int?>(tipoCursoId),
      'tipoConceptoId': serializer.toJson<int?>(tipoConceptoId),
      'color': serializer.toJson<String?>(color),
      'creditos': serializer.toJson<String?>(creditos),
      'totalHP': serializer.toJson<String?>(totalHP),
      'totalHT': serializer.toJson<String?>(totalHT),
      'notaAprobatoria': serializer.toJson<String?>(notaAprobatoria),
      'sumilla': serializer.toJson<String?>(sumilla),
      'superId': serializer.toJson<int?>(superId),
      'idServicioLaboratorio': serializer.toJson<int?>(idServicioLaboratorio),
      'horasLaboratorio': serializer.toJson<int?>(horasLaboratorio),
      'tipoSubcurso': serializer.toJson<bool?>(tipoSubcurso),
      'foto': serializer.toJson<String?>(foto),
      'codigo': serializer.toJson<String?>(codigo),
    };
  }

  Curso copyWith(
          {int? cursoId,
          String? nombre,
          int? estadoId,
          String? descripcion,
          String? cursoAlias,
          int? entidadId,
          int? nivelAcadId,
          int? tipoCursoId,
          int? tipoConceptoId,
          String? color,
          String? creditos,
          String? totalHP,
          String? totalHT,
          String? notaAprobatoria,
          String? sumilla,
          int? superId,
          int? idServicioLaboratorio,
          int? horasLaboratorio,
          bool? tipoSubcurso,
          String? foto,
          String? codigo}) =>
      Curso(
        cursoId: cursoId ?? this.cursoId,
        nombre: nombre ?? this.nombre,
        estadoId: estadoId ?? this.estadoId,
        descripcion: descripcion ?? this.descripcion,
        cursoAlias: cursoAlias ?? this.cursoAlias,
        entidadId: entidadId ?? this.entidadId,
        nivelAcadId: nivelAcadId ?? this.nivelAcadId,
        tipoCursoId: tipoCursoId ?? this.tipoCursoId,
        tipoConceptoId: tipoConceptoId ?? this.tipoConceptoId,
        color: color ?? this.color,
        creditos: creditos ?? this.creditos,
        totalHP: totalHP ?? this.totalHP,
        totalHT: totalHT ?? this.totalHT,
        notaAprobatoria: notaAprobatoria ?? this.notaAprobatoria,
        sumilla: sumilla ?? this.sumilla,
        superId: superId ?? this.superId,
        idServicioLaboratorio:
            idServicioLaboratorio ?? this.idServicioLaboratorio,
        horasLaboratorio: horasLaboratorio ?? this.horasLaboratorio,
        tipoSubcurso: tipoSubcurso ?? this.tipoSubcurso,
        foto: foto ?? this.foto,
        codigo: codigo ?? this.codigo,
      );
  @override
  String toString() {
    return (StringBuffer('Curso(')
          ..write('cursoId: $cursoId, ')
          ..write('nombre: $nombre, ')
          ..write('estadoId: $estadoId, ')
          ..write('descripcion: $descripcion, ')
          ..write('cursoAlias: $cursoAlias, ')
          ..write('entidadId: $entidadId, ')
          ..write('nivelAcadId: $nivelAcadId, ')
          ..write('tipoCursoId: $tipoCursoId, ')
          ..write('tipoConceptoId: $tipoConceptoId, ')
          ..write('color: $color, ')
          ..write('creditos: $creditos, ')
          ..write('totalHP: $totalHP, ')
          ..write('totalHT: $totalHT, ')
          ..write('notaAprobatoria: $notaAprobatoria, ')
          ..write('sumilla: $sumilla, ')
          ..write('superId: $superId, ')
          ..write('idServicioLaboratorio: $idServicioLaboratorio, ')
          ..write('horasLaboratorio: $horasLaboratorio, ')
          ..write('tipoSubcurso: $tipoSubcurso, ')
          ..write('foto: $foto, ')
          ..write('codigo: $codigo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      cursoId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              estadoId.hashCode,
              $mrjc(
                  descripcion.hashCode,
                  $mrjc(
                      cursoAlias.hashCode,
                      $mrjc(
                          entidadId.hashCode,
                          $mrjc(
                              nivelAcadId.hashCode,
                              $mrjc(
                                  tipoCursoId.hashCode,
                                  $mrjc(
                                      tipoConceptoId.hashCode,
                                      $mrjc(
                                          color.hashCode,
                                          $mrjc(
                                              creditos.hashCode,
                                              $mrjc(
                                                  totalHP.hashCode,
                                                  $mrjc(
                                                      totalHT.hashCode,
                                                      $mrjc(
                                                          notaAprobatoria
                                                              .hashCode,
                                                          $mrjc(
                                                              sumilla.hashCode,
                                                              $mrjc(
                                                                  superId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      idServicioLaboratorio
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          horasLaboratorio
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              tipoSubcurso.hashCode,
                                                                              $mrjc(foto.hashCode, codigo.hashCode)))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Curso &&
          other.cursoId == this.cursoId &&
          other.nombre == this.nombre &&
          other.estadoId == this.estadoId &&
          other.descripcion == this.descripcion &&
          other.cursoAlias == this.cursoAlias &&
          other.entidadId == this.entidadId &&
          other.nivelAcadId == this.nivelAcadId &&
          other.tipoCursoId == this.tipoCursoId &&
          other.tipoConceptoId == this.tipoConceptoId &&
          other.color == this.color &&
          other.creditos == this.creditos &&
          other.totalHP == this.totalHP &&
          other.totalHT == this.totalHT &&
          other.notaAprobatoria == this.notaAprobatoria &&
          other.sumilla == this.sumilla &&
          other.superId == this.superId &&
          other.idServicioLaboratorio == this.idServicioLaboratorio &&
          other.horasLaboratorio == this.horasLaboratorio &&
          other.tipoSubcurso == this.tipoSubcurso &&
          other.foto == this.foto &&
          other.codigo == this.codigo);
}

class CursosCompanion extends UpdateCompanion<Curso> {
  final Value<int> cursoId;
  final Value<String?> nombre;
  final Value<int?> estadoId;
  final Value<String?> descripcion;
  final Value<String?> cursoAlias;
  final Value<int?> entidadId;
  final Value<int?> nivelAcadId;
  final Value<int?> tipoCursoId;
  final Value<int?> tipoConceptoId;
  final Value<String?> color;
  final Value<String?> creditos;
  final Value<String?> totalHP;
  final Value<String?> totalHT;
  final Value<String?> notaAprobatoria;
  final Value<String?> sumilla;
  final Value<int?> superId;
  final Value<int?> idServicioLaboratorio;
  final Value<int?> horasLaboratorio;
  final Value<bool?> tipoSubcurso;
  final Value<String?> foto;
  final Value<String?> codigo;
  const CursosCompanion({
    this.cursoId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.cursoAlias = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.nivelAcadId = const Value.absent(),
    this.tipoCursoId = const Value.absent(),
    this.tipoConceptoId = const Value.absent(),
    this.color = const Value.absent(),
    this.creditos = const Value.absent(),
    this.totalHP = const Value.absent(),
    this.totalHT = const Value.absent(),
    this.notaAprobatoria = const Value.absent(),
    this.sumilla = const Value.absent(),
    this.superId = const Value.absent(),
    this.idServicioLaboratorio = const Value.absent(),
    this.horasLaboratorio = const Value.absent(),
    this.tipoSubcurso = const Value.absent(),
    this.foto = const Value.absent(),
    this.codigo = const Value.absent(),
  });
  CursosCompanion.insert({
    this.cursoId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.cursoAlias = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.nivelAcadId = const Value.absent(),
    this.tipoCursoId = const Value.absent(),
    this.tipoConceptoId = const Value.absent(),
    this.color = const Value.absent(),
    this.creditos = const Value.absent(),
    this.totalHP = const Value.absent(),
    this.totalHT = const Value.absent(),
    this.notaAprobatoria = const Value.absent(),
    this.sumilla = const Value.absent(),
    this.superId = const Value.absent(),
    this.idServicioLaboratorio = const Value.absent(),
    this.horasLaboratorio = const Value.absent(),
    this.tipoSubcurso = const Value.absent(),
    this.foto = const Value.absent(),
    this.codigo = const Value.absent(),
  });
  static Insertable<Curso> custom({
    Expression<int>? cursoId,
    Expression<String?>? nombre,
    Expression<int?>? estadoId,
    Expression<String?>? descripcion,
    Expression<String?>? cursoAlias,
    Expression<int?>? entidadId,
    Expression<int?>? nivelAcadId,
    Expression<int?>? tipoCursoId,
    Expression<int?>? tipoConceptoId,
    Expression<String?>? color,
    Expression<String?>? creditos,
    Expression<String?>? totalHP,
    Expression<String?>? totalHT,
    Expression<String?>? notaAprobatoria,
    Expression<String?>? sumilla,
    Expression<int?>? superId,
    Expression<int?>? idServicioLaboratorio,
    Expression<int?>? horasLaboratorio,
    Expression<bool?>? tipoSubcurso,
    Expression<String?>? foto,
    Expression<String?>? codigo,
  }) {
    return RawValuesInsertable({
      if (cursoId != null) 'curso_id': cursoId,
      if (nombre != null) 'nombre': nombre,
      if (estadoId != null) 'estado_id': estadoId,
      if (descripcion != null) 'descripcion': descripcion,
      if (cursoAlias != null) 'curso_alias': cursoAlias,
      if (entidadId != null) 'entidad_id': entidadId,
      if (nivelAcadId != null) 'nivel_acad_id': nivelAcadId,
      if (tipoCursoId != null) 'tipo_curso_id': tipoCursoId,
      if (tipoConceptoId != null) 'tipo_concepto_id': tipoConceptoId,
      if (color != null) 'color': color,
      if (creditos != null) 'creditos': creditos,
      if (totalHP != null) 'total_h_p': totalHP,
      if (totalHT != null) 'total_h_t': totalHT,
      if (notaAprobatoria != null) 'nota_aprobatoria': notaAprobatoria,
      if (sumilla != null) 'sumilla': sumilla,
      if (superId != null) 'super_id': superId,
      if (idServicioLaboratorio != null)
        'id_servicio_laboratorio': idServicioLaboratorio,
      if (horasLaboratorio != null) 'horas_laboratorio': horasLaboratorio,
      if (tipoSubcurso != null) 'tipo_subcurso': tipoSubcurso,
      if (foto != null) 'foto': foto,
      if (codigo != null) 'codigo': codigo,
    });
  }

  CursosCompanion copyWith(
      {Value<int>? cursoId,
      Value<String?>? nombre,
      Value<int?>? estadoId,
      Value<String?>? descripcion,
      Value<String?>? cursoAlias,
      Value<int?>? entidadId,
      Value<int?>? nivelAcadId,
      Value<int?>? tipoCursoId,
      Value<int?>? tipoConceptoId,
      Value<String?>? color,
      Value<String?>? creditos,
      Value<String?>? totalHP,
      Value<String?>? totalHT,
      Value<String?>? notaAprobatoria,
      Value<String?>? sumilla,
      Value<int?>? superId,
      Value<int?>? idServicioLaboratorio,
      Value<int?>? horasLaboratorio,
      Value<bool?>? tipoSubcurso,
      Value<String?>? foto,
      Value<String?>? codigo}) {
    return CursosCompanion(
      cursoId: cursoId ?? this.cursoId,
      nombre: nombre ?? this.nombre,
      estadoId: estadoId ?? this.estadoId,
      descripcion: descripcion ?? this.descripcion,
      cursoAlias: cursoAlias ?? this.cursoAlias,
      entidadId: entidadId ?? this.entidadId,
      nivelAcadId: nivelAcadId ?? this.nivelAcadId,
      tipoCursoId: tipoCursoId ?? this.tipoCursoId,
      tipoConceptoId: tipoConceptoId ?? this.tipoConceptoId,
      color: color ?? this.color,
      creditos: creditos ?? this.creditos,
      totalHP: totalHP ?? this.totalHP,
      totalHT: totalHT ?? this.totalHT,
      notaAprobatoria: notaAprobatoria ?? this.notaAprobatoria,
      sumilla: sumilla ?? this.sumilla,
      superId: superId ?? this.superId,
      idServicioLaboratorio:
          idServicioLaboratorio ?? this.idServicioLaboratorio,
      horasLaboratorio: horasLaboratorio ?? this.horasLaboratorio,
      tipoSubcurso: tipoSubcurso ?? this.tipoSubcurso,
      foto: foto ?? this.foto,
      codigo: codigo ?? this.codigo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (cursoId.present) {
      map['curso_id'] = Variable<int>(cursoId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (cursoAlias.present) {
      map['curso_alias'] = Variable<String?>(cursoAlias.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (nivelAcadId.present) {
      map['nivel_acad_id'] = Variable<int?>(nivelAcadId.value);
    }
    if (tipoCursoId.present) {
      map['tipo_curso_id'] = Variable<int?>(tipoCursoId.value);
    }
    if (tipoConceptoId.present) {
      map['tipo_concepto_id'] = Variable<int?>(tipoConceptoId.value);
    }
    if (color.present) {
      map['color'] = Variable<String?>(color.value);
    }
    if (creditos.present) {
      map['creditos'] = Variable<String?>(creditos.value);
    }
    if (totalHP.present) {
      map['total_h_p'] = Variable<String?>(totalHP.value);
    }
    if (totalHT.present) {
      map['total_h_t'] = Variable<String?>(totalHT.value);
    }
    if (notaAprobatoria.present) {
      map['nota_aprobatoria'] = Variable<String?>(notaAprobatoria.value);
    }
    if (sumilla.present) {
      map['sumilla'] = Variable<String?>(sumilla.value);
    }
    if (superId.present) {
      map['super_id'] = Variable<int?>(superId.value);
    }
    if (idServicioLaboratorio.present) {
      map['id_servicio_laboratorio'] =
          Variable<int?>(idServicioLaboratorio.value);
    }
    if (horasLaboratorio.present) {
      map['horas_laboratorio'] = Variable<int?>(horasLaboratorio.value);
    }
    if (tipoSubcurso.present) {
      map['tipo_subcurso'] = Variable<bool?>(tipoSubcurso.value);
    }
    if (foto.present) {
      map['foto'] = Variable<String?>(foto.value);
    }
    if (codigo.present) {
      map['codigo'] = Variable<String?>(codigo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CursosCompanion(')
          ..write('cursoId: $cursoId, ')
          ..write('nombre: $nombre, ')
          ..write('estadoId: $estadoId, ')
          ..write('descripcion: $descripcion, ')
          ..write('cursoAlias: $cursoAlias, ')
          ..write('entidadId: $entidadId, ')
          ..write('nivelAcadId: $nivelAcadId, ')
          ..write('tipoCursoId: $tipoCursoId, ')
          ..write('tipoConceptoId: $tipoConceptoId, ')
          ..write('color: $color, ')
          ..write('creditos: $creditos, ')
          ..write('totalHP: $totalHP, ')
          ..write('totalHT: $totalHT, ')
          ..write('notaAprobatoria: $notaAprobatoria, ')
          ..write('sumilla: $sumilla, ')
          ..write('superId: $superId, ')
          ..write('idServicioLaboratorio: $idServicioLaboratorio, ')
          ..write('horasLaboratorio: $horasLaboratorio, ')
          ..write('tipoSubcurso: $tipoSubcurso, ')
          ..write('foto: $foto, ')
          ..write('codigo: $codigo')
          ..write(')'))
        .toString();
  }
}

class $CursosTable extends Cursos with TableInfo<$CursosTable, Curso> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CursosTable(this._db, [this._alias]);
  final VerificationMeta _cursoIdMeta = const VerificationMeta('cursoId');
  late final GeneratedColumn<int?> cursoId = GeneratedColumn<int?>(
      'curso_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _cursoAliasMeta = const VerificationMeta('cursoAlias');
  late final GeneratedColumn<String?> cursoAlias = GeneratedColumn<String?>(
      'curso_alias', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nivelAcadIdMeta =
      const VerificationMeta('nivelAcadId');
  late final GeneratedColumn<int?> nivelAcadId = GeneratedColumn<int?>(
      'nivel_acad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoCursoIdMeta =
      const VerificationMeta('tipoCursoId');
  late final GeneratedColumn<int?> tipoCursoId = GeneratedColumn<int?>(
      'tipo_curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoConceptoIdMeta =
      const VerificationMeta('tipoConceptoId');
  late final GeneratedColumn<int?> tipoConceptoId = GeneratedColumn<int?>(
      'tipo_concepto_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _colorMeta = const VerificationMeta('color');
  late final GeneratedColumn<String?> color = GeneratedColumn<String?>(
      'color', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _creditosMeta = const VerificationMeta('creditos');
  late final GeneratedColumn<String?> creditos = GeneratedColumn<String?>(
      'creditos', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _totalHPMeta = const VerificationMeta('totalHP');
  late final GeneratedColumn<String?> totalHP = GeneratedColumn<String?>(
      'total_h_p', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _totalHTMeta = const VerificationMeta('totalHT');
  late final GeneratedColumn<String?> totalHT = GeneratedColumn<String?>(
      'total_h_t', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _notaAprobatoriaMeta =
      const VerificationMeta('notaAprobatoria');
  late final GeneratedColumn<String?> notaAprobatoria =
      GeneratedColumn<String?>('nota_aprobatoria', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _sumillaMeta = const VerificationMeta('sumilla');
  late final GeneratedColumn<String?> sumilla = GeneratedColumn<String?>(
      'sumilla', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _superIdMeta = const VerificationMeta('superId');
  late final GeneratedColumn<int?> superId = GeneratedColumn<int?>(
      'super_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idServicioLaboratorioMeta =
      const VerificationMeta('idServicioLaboratorio');
  late final GeneratedColumn<int?> idServicioLaboratorio =
      GeneratedColumn<int?>('id_servicio_laboratorio', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _horasLaboratorioMeta =
      const VerificationMeta('horasLaboratorio');
  late final GeneratedColumn<int?> horasLaboratorio = GeneratedColumn<int?>(
      'horas_laboratorio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoSubcursoMeta =
      const VerificationMeta('tipoSubcurso');
  late final GeneratedColumn<bool?> tipoSubcurso = GeneratedColumn<bool?>(
      'tipo_subcurso', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (tipo_subcurso IN (0, 1))');
  final VerificationMeta _fotoMeta = const VerificationMeta('foto');
  late final GeneratedColumn<String?> foto = GeneratedColumn<String?>(
      'foto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
      'codigo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        cursoId,
        nombre,
        estadoId,
        descripcion,
        cursoAlias,
        entidadId,
        nivelAcadId,
        tipoCursoId,
        tipoConceptoId,
        color,
        creditos,
        totalHP,
        totalHT,
        notaAprobatoria,
        sumilla,
        superId,
        idServicioLaboratorio,
        horasLaboratorio,
        tipoSubcurso,
        foto,
        codigo
      ];
  @override
  String get aliasedName => _alias ?? 'cursos';
  @override
  String get actualTableName => 'cursos';
  @override
  VerificationContext validateIntegrity(Insertable<Curso> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('curso_id')) {
      context.handle(_cursoIdMeta,
          cursoId.isAcceptableOrUnknown(data['curso_id']!, _cursoIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('curso_alias')) {
      context.handle(
          _cursoAliasMeta,
          cursoAlias.isAcceptableOrUnknown(
              data['curso_alias']!, _cursoAliasMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('nivel_acad_id')) {
      context.handle(
          _nivelAcadIdMeta,
          nivelAcadId.isAcceptableOrUnknown(
              data['nivel_acad_id']!, _nivelAcadIdMeta));
    }
    if (data.containsKey('tipo_curso_id')) {
      context.handle(
          _tipoCursoIdMeta,
          tipoCursoId.isAcceptableOrUnknown(
              data['tipo_curso_id']!, _tipoCursoIdMeta));
    }
    if (data.containsKey('tipo_concepto_id')) {
      context.handle(
          _tipoConceptoIdMeta,
          tipoConceptoId.isAcceptableOrUnknown(
              data['tipo_concepto_id']!, _tipoConceptoIdMeta));
    }
    if (data.containsKey('color')) {
      context.handle(
          _colorMeta, color.isAcceptableOrUnknown(data['color']!, _colorMeta));
    }
    if (data.containsKey('creditos')) {
      context.handle(_creditosMeta,
          creditos.isAcceptableOrUnknown(data['creditos']!, _creditosMeta));
    }
    if (data.containsKey('total_h_p')) {
      context.handle(_totalHPMeta,
          totalHP.isAcceptableOrUnknown(data['total_h_p']!, _totalHPMeta));
    }
    if (data.containsKey('total_h_t')) {
      context.handle(_totalHTMeta,
          totalHT.isAcceptableOrUnknown(data['total_h_t']!, _totalHTMeta));
    }
    if (data.containsKey('nota_aprobatoria')) {
      context.handle(
          _notaAprobatoriaMeta,
          notaAprobatoria.isAcceptableOrUnknown(
              data['nota_aprobatoria']!, _notaAprobatoriaMeta));
    }
    if (data.containsKey('sumilla')) {
      context.handle(_sumillaMeta,
          sumilla.isAcceptableOrUnknown(data['sumilla']!, _sumillaMeta));
    }
    if (data.containsKey('super_id')) {
      context.handle(_superIdMeta,
          superId.isAcceptableOrUnknown(data['super_id']!, _superIdMeta));
    }
    if (data.containsKey('id_servicio_laboratorio')) {
      context.handle(
          _idServicioLaboratorioMeta,
          idServicioLaboratorio.isAcceptableOrUnknown(
              data['id_servicio_laboratorio']!, _idServicioLaboratorioMeta));
    }
    if (data.containsKey('horas_laboratorio')) {
      context.handle(
          _horasLaboratorioMeta,
          horasLaboratorio.isAcceptableOrUnknown(
              data['horas_laboratorio']!, _horasLaboratorioMeta));
    }
    if (data.containsKey('tipo_subcurso')) {
      context.handle(
          _tipoSubcursoMeta,
          tipoSubcurso.isAcceptableOrUnknown(
              data['tipo_subcurso']!, _tipoSubcursoMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('codigo')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['codigo']!, _codigoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {cursoId};
  @override
  Curso map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Curso.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CursosTable createAlias(String alias) {
    return $CursosTable(_db, alias);
  }
}

class ParametrosDisenioData extends DataClass
    implements Insertable<ParametrosDisenioData> {
  final int parametroDisenioId;
  final String? objeto;
  final String? concepto;
  final String? nombre;
  final String? path;
  final String? color1;
  final String? color2;
  final String? color3;
  final bool? estado;
  ParametrosDisenioData(
      {required this.parametroDisenioId,
      this.objeto,
      this.concepto,
      this.nombre,
      this.path,
      this.color1,
      this.color2,
      this.color3,
      this.estado});
  factory ParametrosDisenioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ParametrosDisenioData(
      parametroDisenioId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}parametro_disenio_id'])!,
      objeto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}objeto']),
      concepto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}concepto']),
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      path: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}path']),
      color1: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}color1']),
      color2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}color2']),
      color3: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}color3']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['parametro_disenio_id'] = Variable<int>(parametroDisenioId);
    if (!nullToAbsent || objeto != null) {
      map['objeto'] = Variable<String?>(objeto);
    }
    if (!nullToAbsent || concepto != null) {
      map['concepto'] = Variable<String?>(concepto);
    }
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || path != null) {
      map['path'] = Variable<String?>(path);
    }
    if (!nullToAbsent || color1 != null) {
      map['color1'] = Variable<String?>(color1);
    }
    if (!nullToAbsent || color2 != null) {
      map['color2'] = Variable<String?>(color2);
    }
    if (!nullToAbsent || color3 != null) {
      map['color3'] = Variable<String?>(color3);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    return map;
  }

  ParametrosDisenioCompanion toCompanion(bool nullToAbsent) {
    return ParametrosDisenioCompanion(
      parametroDisenioId: Value(parametroDisenioId),
      objeto:
          objeto == null && nullToAbsent ? const Value.absent() : Value(objeto),
      concepto: concepto == null && nullToAbsent
          ? const Value.absent()
          : Value(concepto),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      path: path == null && nullToAbsent ? const Value.absent() : Value(path),
      color1:
          color1 == null && nullToAbsent ? const Value.absent() : Value(color1),
      color2:
          color2 == null && nullToAbsent ? const Value.absent() : Value(color2),
      color3:
          color3 == null && nullToAbsent ? const Value.absent() : Value(color3),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
    );
  }

  factory ParametrosDisenioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ParametrosDisenioData(
      parametroDisenioId: serializer.fromJson<int>(json['parametroDisenioId']),
      objeto: serializer.fromJson<String?>(json['objeto']),
      concepto: serializer.fromJson<String?>(json['concepto']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      path: serializer.fromJson<String?>(json['path']),
      color1: serializer.fromJson<String?>(json['color1']),
      color2: serializer.fromJson<String?>(json['color2']),
      color3: serializer.fromJson<String?>(json['color3']),
      estado: serializer.fromJson<bool?>(json['estado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'parametroDisenioId': serializer.toJson<int>(parametroDisenioId),
      'objeto': serializer.toJson<String?>(objeto),
      'concepto': serializer.toJson<String?>(concepto),
      'nombre': serializer.toJson<String?>(nombre),
      'path': serializer.toJson<String?>(path),
      'color1': serializer.toJson<String?>(color1),
      'color2': serializer.toJson<String?>(color2),
      'color3': serializer.toJson<String?>(color3),
      'estado': serializer.toJson<bool?>(estado),
    };
  }

  ParametrosDisenioData copyWith(
          {int? parametroDisenioId,
          String? objeto,
          String? concepto,
          String? nombre,
          String? path,
          String? color1,
          String? color2,
          String? color3,
          bool? estado}) =>
      ParametrosDisenioData(
        parametroDisenioId: parametroDisenioId ?? this.parametroDisenioId,
        objeto: objeto ?? this.objeto,
        concepto: concepto ?? this.concepto,
        nombre: nombre ?? this.nombre,
        path: path ?? this.path,
        color1: color1 ?? this.color1,
        color2: color2 ?? this.color2,
        color3: color3 ?? this.color3,
        estado: estado ?? this.estado,
      );
  @override
  String toString() {
    return (StringBuffer('ParametrosDisenioData(')
          ..write('parametroDisenioId: $parametroDisenioId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('path: $path, ')
          ..write('color1: $color1, ')
          ..write('color2: $color2, ')
          ..write('color3: $color3, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      parametroDisenioId.hashCode,
      $mrjc(
          objeto.hashCode,
          $mrjc(
              concepto.hashCode,
              $mrjc(
                  nombre.hashCode,
                  $mrjc(
                      path.hashCode,
                      $mrjc(
                          color1.hashCode,
                          $mrjc(color2.hashCode,
                              $mrjc(color3.hashCode, estado.hashCode)))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ParametrosDisenioData &&
          other.parametroDisenioId == this.parametroDisenioId &&
          other.objeto == this.objeto &&
          other.concepto == this.concepto &&
          other.nombre == this.nombre &&
          other.path == this.path &&
          other.color1 == this.color1 &&
          other.color2 == this.color2 &&
          other.color3 == this.color3 &&
          other.estado == this.estado);
}

class ParametrosDisenioCompanion
    extends UpdateCompanion<ParametrosDisenioData> {
  final Value<int> parametroDisenioId;
  final Value<String?> objeto;
  final Value<String?> concepto;
  final Value<String?> nombre;
  final Value<String?> path;
  final Value<String?> color1;
  final Value<String?> color2;
  final Value<String?> color3;
  final Value<bool?> estado;
  const ParametrosDisenioCompanion({
    this.parametroDisenioId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.path = const Value.absent(),
    this.color1 = const Value.absent(),
    this.color2 = const Value.absent(),
    this.color3 = const Value.absent(),
    this.estado = const Value.absent(),
  });
  ParametrosDisenioCompanion.insert({
    this.parametroDisenioId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.path = const Value.absent(),
    this.color1 = const Value.absent(),
    this.color2 = const Value.absent(),
    this.color3 = const Value.absent(),
    this.estado = const Value.absent(),
  });
  static Insertable<ParametrosDisenioData> custom({
    Expression<int>? parametroDisenioId,
    Expression<String?>? objeto,
    Expression<String?>? concepto,
    Expression<String?>? nombre,
    Expression<String?>? path,
    Expression<String?>? color1,
    Expression<String?>? color2,
    Expression<String?>? color3,
    Expression<bool?>? estado,
  }) {
    return RawValuesInsertable({
      if (parametroDisenioId != null)
        'parametro_disenio_id': parametroDisenioId,
      if (objeto != null) 'objeto': objeto,
      if (concepto != null) 'concepto': concepto,
      if (nombre != null) 'nombre': nombre,
      if (path != null) 'path': path,
      if (color1 != null) 'color1': color1,
      if (color2 != null) 'color2': color2,
      if (color3 != null) 'color3': color3,
      if (estado != null) 'estado': estado,
    });
  }

  ParametrosDisenioCompanion copyWith(
      {Value<int>? parametroDisenioId,
      Value<String?>? objeto,
      Value<String?>? concepto,
      Value<String?>? nombre,
      Value<String?>? path,
      Value<String?>? color1,
      Value<String?>? color2,
      Value<String?>? color3,
      Value<bool?>? estado}) {
    return ParametrosDisenioCompanion(
      parametroDisenioId: parametroDisenioId ?? this.parametroDisenioId,
      objeto: objeto ?? this.objeto,
      concepto: concepto ?? this.concepto,
      nombre: nombre ?? this.nombre,
      path: path ?? this.path,
      color1: color1 ?? this.color1,
      color2: color2 ?? this.color2,
      color3: color3 ?? this.color3,
      estado: estado ?? this.estado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (parametroDisenioId.present) {
      map['parametro_disenio_id'] = Variable<int>(parametroDisenioId.value);
    }
    if (objeto.present) {
      map['objeto'] = Variable<String?>(objeto.value);
    }
    if (concepto.present) {
      map['concepto'] = Variable<String?>(concepto.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (path.present) {
      map['path'] = Variable<String?>(path.value);
    }
    if (color1.present) {
      map['color1'] = Variable<String?>(color1.value);
    }
    if (color2.present) {
      map['color2'] = Variable<String?>(color2.value);
    }
    if (color3.present) {
      map['color3'] = Variable<String?>(color3.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ParametrosDisenioCompanion(')
          ..write('parametroDisenioId: $parametroDisenioId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('path: $path, ')
          ..write('color1: $color1, ')
          ..write('color2: $color2, ')
          ..write('color3: $color3, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }
}

class $ParametrosDisenioTable extends ParametrosDisenio
    with TableInfo<$ParametrosDisenioTable, ParametrosDisenioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ParametrosDisenioTable(this._db, [this._alias]);
  final VerificationMeta _parametroDisenioIdMeta =
      const VerificationMeta('parametroDisenioId');
  late final GeneratedColumn<int?> parametroDisenioId = GeneratedColumn<int?>(
      'parametro_disenio_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _objetoMeta = const VerificationMeta('objeto');
  late final GeneratedColumn<String?> objeto = GeneratedColumn<String?>(
      'objeto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _conceptoMeta = const VerificationMeta('concepto');
  late final GeneratedColumn<String?> concepto = GeneratedColumn<String?>(
      'concepto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _pathMeta = const VerificationMeta('path');
  late final GeneratedColumn<String?> path = GeneratedColumn<String?>(
      'path', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _color1Meta = const VerificationMeta('color1');
  late final GeneratedColumn<String?> color1 = GeneratedColumn<String?>(
      'color1', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _color2Meta = const VerificationMeta('color2');
  late final GeneratedColumn<String?> color2 = GeneratedColumn<String?>(
      'color2', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _color3Meta = const VerificationMeta('color3');
  late final GeneratedColumn<String?> color3 = GeneratedColumn<String?>(
      'color3', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns => [
        parametroDisenioId,
        objeto,
        concepto,
        nombre,
        path,
        color1,
        color2,
        color3,
        estado
      ];
  @override
  String get aliasedName => _alias ?? 'parametros_disenio';
  @override
  String get actualTableName => 'parametros_disenio';
  @override
  VerificationContext validateIntegrity(
      Insertable<ParametrosDisenioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('parametro_disenio_id')) {
      context.handle(
          _parametroDisenioIdMeta,
          parametroDisenioId.isAcceptableOrUnknown(
              data['parametro_disenio_id']!, _parametroDisenioIdMeta));
    }
    if (data.containsKey('objeto')) {
      context.handle(_objetoMeta,
          objeto.isAcceptableOrUnknown(data['objeto']!, _objetoMeta));
    }
    if (data.containsKey('concepto')) {
      context.handle(_conceptoMeta,
          concepto.isAcceptableOrUnknown(data['concepto']!, _conceptoMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('path')) {
      context.handle(
          _pathMeta, path.isAcceptableOrUnknown(data['path']!, _pathMeta));
    }
    if (data.containsKey('color1')) {
      context.handle(_color1Meta,
          color1.isAcceptableOrUnknown(data['color1']!, _color1Meta));
    }
    if (data.containsKey('color2')) {
      context.handle(_color2Meta,
          color2.isAcceptableOrUnknown(data['color2']!, _color2Meta));
    }
    if (data.containsKey('color3')) {
      context.handle(_color3Meta,
          color3.isAcceptableOrUnknown(data['color3']!, _color3Meta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {parametroDisenioId};
  @override
  ParametrosDisenioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ParametrosDisenioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ParametrosDisenioTable createAlias(String alias) {
    return $ParametrosDisenioTable(_db, alias);
  }
}

class NivelAcademicoData extends DataClass
    implements Insertable<NivelAcademicoData> {
  final int nivelAcadId;
  final String? nombre;
  final bool? activo;
  final int? entidadId;
  NivelAcademicoData(
      {required this.nivelAcadId, this.nombre, this.activo, this.entidadId});
  factory NivelAcademicoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NivelAcademicoData(
      nivelAcadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nivel_acad_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      activo: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}activo']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['nivel_acad_id'] = Variable<int>(nivelAcadId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || activo != null) {
      map['activo'] = Variable<bool?>(activo);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    return map;
  }

  NivelAcademicoCompanion toCompanion(bool nullToAbsent) {
    return NivelAcademicoCompanion(
      nivelAcadId: Value(nivelAcadId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      activo:
          activo == null && nullToAbsent ? const Value.absent() : Value(activo),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
    );
  }

  factory NivelAcademicoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return NivelAcademicoData(
      nivelAcadId: serializer.fromJson<int>(json['nivelAcadId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      activo: serializer.fromJson<bool?>(json['activo']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'nivelAcadId': serializer.toJson<int>(nivelAcadId),
      'nombre': serializer.toJson<String?>(nombre),
      'activo': serializer.toJson<bool?>(activo),
      'entidadId': serializer.toJson<int?>(entidadId),
    };
  }

  NivelAcademicoData copyWith(
          {int? nivelAcadId, String? nombre, bool? activo, int? entidadId}) =>
      NivelAcademicoData(
        nivelAcadId: nivelAcadId ?? this.nivelAcadId,
        nombre: nombre ?? this.nombre,
        activo: activo ?? this.activo,
        entidadId: entidadId ?? this.entidadId,
      );
  @override
  String toString() {
    return (StringBuffer('NivelAcademicoData(')
          ..write('nivelAcadId: $nivelAcadId, ')
          ..write('nombre: $nombre, ')
          ..write('activo: $activo, ')
          ..write('entidadId: $entidadId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(nivelAcadId.hashCode,
      $mrjc(nombre.hashCode, $mrjc(activo.hashCode, entidadId.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NivelAcademicoData &&
          other.nivelAcadId == this.nivelAcadId &&
          other.nombre == this.nombre &&
          other.activo == this.activo &&
          other.entidadId == this.entidadId);
}

class NivelAcademicoCompanion extends UpdateCompanion<NivelAcademicoData> {
  final Value<int> nivelAcadId;
  final Value<String?> nombre;
  final Value<bool?> activo;
  final Value<int?> entidadId;
  const NivelAcademicoCompanion({
    this.nivelAcadId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.activo = const Value.absent(),
    this.entidadId = const Value.absent(),
  });
  NivelAcademicoCompanion.insert({
    this.nivelAcadId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.activo = const Value.absent(),
    this.entidadId = const Value.absent(),
  });
  static Insertable<NivelAcademicoData> custom({
    Expression<int>? nivelAcadId,
    Expression<String?>? nombre,
    Expression<bool?>? activo,
    Expression<int?>? entidadId,
  }) {
    return RawValuesInsertable({
      if (nivelAcadId != null) 'nivel_acad_id': nivelAcadId,
      if (nombre != null) 'nombre': nombre,
      if (activo != null) 'activo': activo,
      if (entidadId != null) 'entidad_id': entidadId,
    });
  }

  NivelAcademicoCompanion copyWith(
      {Value<int>? nivelAcadId,
      Value<String?>? nombre,
      Value<bool?>? activo,
      Value<int?>? entidadId}) {
    return NivelAcademicoCompanion(
      nivelAcadId: nivelAcadId ?? this.nivelAcadId,
      nombre: nombre ?? this.nombre,
      activo: activo ?? this.activo,
      entidadId: entidadId ?? this.entidadId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (nivelAcadId.present) {
      map['nivel_acad_id'] = Variable<int>(nivelAcadId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (activo.present) {
      map['activo'] = Variable<bool?>(activo.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NivelAcademicoCompanion(')
          ..write('nivelAcadId: $nivelAcadId, ')
          ..write('nombre: $nombre, ')
          ..write('activo: $activo, ')
          ..write('entidadId: $entidadId')
          ..write(')'))
        .toString();
  }
}

class $NivelAcademicoTable extends NivelAcademico
    with TableInfo<$NivelAcademicoTable, NivelAcademicoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $NivelAcademicoTable(this._db, [this._alias]);
  final VerificationMeta _nivelAcadIdMeta =
      const VerificationMeta('nivelAcadId');
  late final GeneratedColumn<int?> nivelAcadId = GeneratedColumn<int?>(
      'nivel_acad_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _activoMeta = const VerificationMeta('activo');
  late final GeneratedColumn<bool?> activo = GeneratedColumn<bool?>(
      'activo', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (activo IN (0, 1))');
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [nivelAcadId, nombre, activo, entidadId];
  @override
  String get aliasedName => _alias ?? 'nivel_academico';
  @override
  String get actualTableName => 'nivel_academico';
  @override
  VerificationContext validateIntegrity(Insertable<NivelAcademicoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('nivel_acad_id')) {
      context.handle(
          _nivelAcadIdMeta,
          nivelAcadId.isAcceptableOrUnknown(
              data['nivel_acad_id']!, _nivelAcadIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('activo')) {
      context.handle(_activoMeta,
          activo.isAcceptableOrUnknown(data['activo']!, _activoMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {nivelAcadId};
  @override
  NivelAcademicoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NivelAcademicoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NivelAcademicoTable createAlias(String alias) {
    return $NivelAcademicoTable(_db, alias);
  }
}

class Periodo extends DataClass implements Insertable<Periodo> {
  final int periodoId;
  final String? nombre;
  final int? estadoId;
  final String? aliasPeriodo;
  final String? fecComienzo;
  final String? fecTermino;
  final int? tipoId;
  final int? superId;
  final int? geoReferenciaId;
  final int? organigramaId;
  final int? entidadId;
  final bool? activo;
  final int? cicloId;
  final int? docenteId;
  final String? gruponombre;
  final int? grupoId;
  final String? nivelAcademico;
  final int? nivelAcademicoId;
  final int? tutorId;
  Periodo(
      {required this.periodoId,
      this.nombre,
      this.estadoId,
      this.aliasPeriodo,
      this.fecComienzo,
      this.fecTermino,
      this.tipoId,
      this.superId,
      this.geoReferenciaId,
      this.organigramaId,
      this.entidadId,
      this.activo,
      this.cicloId,
      this.docenteId,
      this.gruponombre,
      this.grupoId,
      this.nivelAcademico,
      this.nivelAcademicoId,
      this.tutorId});
  factory Periodo.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Periodo(
      periodoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}periodo_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      aliasPeriodo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alias_periodo']),
      fecComienzo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fec_comienzo']),
      fecTermino: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fec_termino']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      superId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}super_id']),
      geoReferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}geo_referencia_id']),
      organigramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}organigrama_id']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      activo: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}activo']),
      cicloId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ciclo_id']),
      docenteId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}docente_id']),
      gruponombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}gruponombre']),
      grupoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}grupo_id']),
      nivelAcademico: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nivel_academico']),
      nivelAcademicoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}nivel_academico_id']),
      tutorId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tutor_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['periodo_id'] = Variable<int>(periodoId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || aliasPeriodo != null) {
      map['alias_periodo'] = Variable<String?>(aliasPeriodo);
    }
    if (!nullToAbsent || fecComienzo != null) {
      map['fec_comienzo'] = Variable<String?>(fecComienzo);
    }
    if (!nullToAbsent || fecTermino != null) {
      map['fec_termino'] = Variable<String?>(fecTermino);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || superId != null) {
      map['super_id'] = Variable<int?>(superId);
    }
    if (!nullToAbsent || geoReferenciaId != null) {
      map['geo_referencia_id'] = Variable<int?>(geoReferenciaId);
    }
    if (!nullToAbsent || organigramaId != null) {
      map['organigrama_id'] = Variable<int?>(organigramaId);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || activo != null) {
      map['activo'] = Variable<bool?>(activo);
    }
    if (!nullToAbsent || cicloId != null) {
      map['ciclo_id'] = Variable<int?>(cicloId);
    }
    if (!nullToAbsent || docenteId != null) {
      map['docente_id'] = Variable<int?>(docenteId);
    }
    if (!nullToAbsent || gruponombre != null) {
      map['gruponombre'] = Variable<String?>(gruponombre);
    }
    if (!nullToAbsent || grupoId != null) {
      map['grupo_id'] = Variable<int?>(grupoId);
    }
    if (!nullToAbsent || nivelAcademico != null) {
      map['nivel_academico'] = Variable<String?>(nivelAcademico);
    }
    if (!nullToAbsent || nivelAcademicoId != null) {
      map['nivel_academico_id'] = Variable<int?>(nivelAcademicoId);
    }
    if (!nullToAbsent || tutorId != null) {
      map['tutor_id'] = Variable<int?>(tutorId);
    }
    return map;
  }

  PeriodosCompanion toCompanion(bool nullToAbsent) {
    return PeriodosCompanion(
      periodoId: Value(periodoId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      aliasPeriodo: aliasPeriodo == null && nullToAbsent
          ? const Value.absent()
          : Value(aliasPeriodo),
      fecComienzo: fecComienzo == null && nullToAbsent
          ? const Value.absent()
          : Value(fecComienzo),
      fecTermino: fecTermino == null && nullToAbsent
          ? const Value.absent()
          : Value(fecTermino),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      superId: superId == null && nullToAbsent
          ? const Value.absent()
          : Value(superId),
      geoReferenciaId: geoReferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(geoReferenciaId),
      organigramaId: organigramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(organigramaId),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      activo:
          activo == null && nullToAbsent ? const Value.absent() : Value(activo),
      cicloId: cicloId == null && nullToAbsent
          ? const Value.absent()
          : Value(cicloId),
      docenteId: docenteId == null && nullToAbsent
          ? const Value.absent()
          : Value(docenteId),
      gruponombre: gruponombre == null && nullToAbsent
          ? const Value.absent()
          : Value(gruponombre),
      grupoId: grupoId == null && nullToAbsent
          ? const Value.absent()
          : Value(grupoId),
      nivelAcademico: nivelAcademico == null && nullToAbsent
          ? const Value.absent()
          : Value(nivelAcademico),
      nivelAcademicoId: nivelAcademicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(nivelAcademicoId),
      tutorId: tutorId == null && nullToAbsent
          ? const Value.absent()
          : Value(tutorId),
    );
  }

  factory Periodo.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Periodo(
      periodoId: serializer.fromJson<int>(json['periodoId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      aliasPeriodo: serializer.fromJson<String?>(json['aliasPeriodo']),
      fecComienzo: serializer.fromJson<String?>(json['fecComienzo']),
      fecTermino: serializer.fromJson<String?>(json['fecTermino']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      superId: serializer.fromJson<int?>(json['superId']),
      geoReferenciaId: serializer.fromJson<int?>(json['geoReferenciaId']),
      organigramaId: serializer.fromJson<int?>(json['organigramaId']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      activo: serializer.fromJson<bool?>(json['activo']),
      cicloId: serializer.fromJson<int?>(json['cicloId']),
      docenteId: serializer.fromJson<int?>(json['docenteId']),
      gruponombre: serializer.fromJson<String?>(json['gruponombre']),
      grupoId: serializer.fromJson<int?>(json['grupoId']),
      nivelAcademico: serializer.fromJson<String?>(json['nivelAcademico']),
      nivelAcademicoId: serializer.fromJson<int?>(json['nivelAcademicoId']),
      tutorId: serializer.fromJson<int?>(json['tutorId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'periodoId': serializer.toJson<int>(periodoId),
      'nombre': serializer.toJson<String?>(nombre),
      'estadoId': serializer.toJson<int?>(estadoId),
      'aliasPeriodo': serializer.toJson<String?>(aliasPeriodo),
      'fecComienzo': serializer.toJson<String?>(fecComienzo),
      'fecTermino': serializer.toJson<String?>(fecTermino),
      'tipoId': serializer.toJson<int?>(tipoId),
      'superId': serializer.toJson<int?>(superId),
      'geoReferenciaId': serializer.toJson<int?>(geoReferenciaId),
      'organigramaId': serializer.toJson<int?>(organigramaId),
      'entidadId': serializer.toJson<int?>(entidadId),
      'activo': serializer.toJson<bool?>(activo),
      'cicloId': serializer.toJson<int?>(cicloId),
      'docenteId': serializer.toJson<int?>(docenteId),
      'gruponombre': serializer.toJson<String?>(gruponombre),
      'grupoId': serializer.toJson<int?>(grupoId),
      'nivelAcademico': serializer.toJson<String?>(nivelAcademico),
      'nivelAcademicoId': serializer.toJson<int?>(nivelAcademicoId),
      'tutorId': serializer.toJson<int?>(tutorId),
    };
  }

  Periodo copyWith(
          {int? periodoId,
          String? nombre,
          int? estadoId,
          String? aliasPeriodo,
          String? fecComienzo,
          String? fecTermino,
          int? tipoId,
          int? superId,
          int? geoReferenciaId,
          int? organigramaId,
          int? entidadId,
          bool? activo,
          int? cicloId,
          int? docenteId,
          String? gruponombre,
          int? grupoId,
          String? nivelAcademico,
          int? nivelAcademicoId,
          int? tutorId}) =>
      Periodo(
        periodoId: periodoId ?? this.periodoId,
        nombre: nombre ?? this.nombre,
        estadoId: estadoId ?? this.estadoId,
        aliasPeriodo: aliasPeriodo ?? this.aliasPeriodo,
        fecComienzo: fecComienzo ?? this.fecComienzo,
        fecTermino: fecTermino ?? this.fecTermino,
        tipoId: tipoId ?? this.tipoId,
        superId: superId ?? this.superId,
        geoReferenciaId: geoReferenciaId ?? this.geoReferenciaId,
        organigramaId: organigramaId ?? this.organigramaId,
        entidadId: entidadId ?? this.entidadId,
        activo: activo ?? this.activo,
        cicloId: cicloId ?? this.cicloId,
        docenteId: docenteId ?? this.docenteId,
        gruponombre: gruponombre ?? this.gruponombre,
        grupoId: grupoId ?? this.grupoId,
        nivelAcademico: nivelAcademico ?? this.nivelAcademico,
        nivelAcademicoId: nivelAcademicoId ?? this.nivelAcademicoId,
        tutorId: tutorId ?? this.tutorId,
      );
  @override
  String toString() {
    return (StringBuffer('Periodo(')
          ..write('periodoId: $periodoId, ')
          ..write('nombre: $nombre, ')
          ..write('estadoId: $estadoId, ')
          ..write('aliasPeriodo: $aliasPeriodo, ')
          ..write('fecComienzo: $fecComienzo, ')
          ..write('fecTermino: $fecTermino, ')
          ..write('tipoId: $tipoId, ')
          ..write('superId: $superId, ')
          ..write('geoReferenciaId: $geoReferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('entidadId: $entidadId, ')
          ..write('activo: $activo, ')
          ..write('cicloId: $cicloId, ')
          ..write('docenteId: $docenteId, ')
          ..write('gruponombre: $gruponombre, ')
          ..write('grupoId: $grupoId, ')
          ..write('nivelAcademico: $nivelAcademico, ')
          ..write('nivelAcademicoId: $nivelAcademicoId, ')
          ..write('tutorId: $tutorId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      periodoId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              estadoId.hashCode,
              $mrjc(
                  aliasPeriodo.hashCode,
                  $mrjc(
                      fecComienzo.hashCode,
                      $mrjc(
                          fecTermino.hashCode,
                          $mrjc(
                              tipoId.hashCode,
                              $mrjc(
                                  superId.hashCode,
                                  $mrjc(
                                      geoReferenciaId.hashCode,
                                      $mrjc(
                                          organigramaId.hashCode,
                                          $mrjc(
                                              entidadId.hashCode,
                                              $mrjc(
                                                  activo.hashCode,
                                                  $mrjc(
                                                      cicloId.hashCode,
                                                      $mrjc(
                                                          docenteId.hashCode,
                                                          $mrjc(
                                                              gruponombre
                                                                  .hashCode,
                                                              $mrjc(
                                                                  grupoId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      nivelAcademico
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          nivelAcademicoId
                                                                              .hashCode,
                                                                          tutorId
                                                                              .hashCode)))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Periodo &&
          other.periodoId == this.periodoId &&
          other.nombre == this.nombre &&
          other.estadoId == this.estadoId &&
          other.aliasPeriodo == this.aliasPeriodo &&
          other.fecComienzo == this.fecComienzo &&
          other.fecTermino == this.fecTermino &&
          other.tipoId == this.tipoId &&
          other.superId == this.superId &&
          other.geoReferenciaId == this.geoReferenciaId &&
          other.organigramaId == this.organigramaId &&
          other.entidadId == this.entidadId &&
          other.activo == this.activo &&
          other.cicloId == this.cicloId &&
          other.docenteId == this.docenteId &&
          other.gruponombre == this.gruponombre &&
          other.grupoId == this.grupoId &&
          other.nivelAcademico == this.nivelAcademico &&
          other.nivelAcademicoId == this.nivelAcademicoId &&
          other.tutorId == this.tutorId);
}

class PeriodosCompanion extends UpdateCompanion<Periodo> {
  final Value<int> periodoId;
  final Value<String?> nombre;
  final Value<int?> estadoId;
  final Value<String?> aliasPeriodo;
  final Value<String?> fecComienzo;
  final Value<String?> fecTermino;
  final Value<int?> tipoId;
  final Value<int?> superId;
  final Value<int?> geoReferenciaId;
  final Value<int?> organigramaId;
  final Value<int?> entidadId;
  final Value<bool?> activo;
  final Value<int?> cicloId;
  final Value<int?> docenteId;
  final Value<String?> gruponombre;
  final Value<int?> grupoId;
  final Value<String?> nivelAcademico;
  final Value<int?> nivelAcademicoId;
  final Value<int?> tutorId;
  const PeriodosCompanion({
    this.periodoId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.aliasPeriodo = const Value.absent(),
    this.fecComienzo = const Value.absent(),
    this.fecTermino = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.superId = const Value.absent(),
    this.geoReferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.activo = const Value.absent(),
    this.cicloId = const Value.absent(),
    this.docenteId = const Value.absent(),
    this.gruponombre = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.nivelAcademico = const Value.absent(),
    this.nivelAcademicoId = const Value.absent(),
    this.tutorId = const Value.absent(),
  });
  PeriodosCompanion.insert({
    this.periodoId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.aliasPeriodo = const Value.absent(),
    this.fecComienzo = const Value.absent(),
    this.fecTermino = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.superId = const Value.absent(),
    this.geoReferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.activo = const Value.absent(),
    this.cicloId = const Value.absent(),
    this.docenteId = const Value.absent(),
    this.gruponombre = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.nivelAcademico = const Value.absent(),
    this.nivelAcademicoId = const Value.absent(),
    this.tutorId = const Value.absent(),
  });
  static Insertable<Periodo> custom({
    Expression<int>? periodoId,
    Expression<String?>? nombre,
    Expression<int?>? estadoId,
    Expression<String?>? aliasPeriodo,
    Expression<String?>? fecComienzo,
    Expression<String?>? fecTermino,
    Expression<int?>? tipoId,
    Expression<int?>? superId,
    Expression<int?>? geoReferenciaId,
    Expression<int?>? organigramaId,
    Expression<int?>? entidadId,
    Expression<bool?>? activo,
    Expression<int?>? cicloId,
    Expression<int?>? docenteId,
    Expression<String?>? gruponombre,
    Expression<int?>? grupoId,
    Expression<String?>? nivelAcademico,
    Expression<int?>? nivelAcademicoId,
    Expression<int?>? tutorId,
  }) {
    return RawValuesInsertable({
      if (periodoId != null) 'periodo_id': periodoId,
      if (nombre != null) 'nombre': nombre,
      if (estadoId != null) 'estado_id': estadoId,
      if (aliasPeriodo != null) 'alias_periodo': aliasPeriodo,
      if (fecComienzo != null) 'fec_comienzo': fecComienzo,
      if (fecTermino != null) 'fec_termino': fecTermino,
      if (tipoId != null) 'tipo_id': tipoId,
      if (superId != null) 'super_id': superId,
      if (geoReferenciaId != null) 'geo_referencia_id': geoReferenciaId,
      if (organigramaId != null) 'organigrama_id': organigramaId,
      if (entidadId != null) 'entidad_id': entidadId,
      if (activo != null) 'activo': activo,
      if (cicloId != null) 'ciclo_id': cicloId,
      if (docenteId != null) 'docente_id': docenteId,
      if (gruponombre != null) 'gruponombre': gruponombre,
      if (grupoId != null) 'grupo_id': grupoId,
      if (nivelAcademico != null) 'nivel_academico': nivelAcademico,
      if (nivelAcademicoId != null) 'nivel_academico_id': nivelAcademicoId,
      if (tutorId != null) 'tutor_id': tutorId,
    });
  }

  PeriodosCompanion copyWith(
      {Value<int>? periodoId,
      Value<String?>? nombre,
      Value<int?>? estadoId,
      Value<String?>? aliasPeriodo,
      Value<String?>? fecComienzo,
      Value<String?>? fecTermino,
      Value<int?>? tipoId,
      Value<int?>? superId,
      Value<int?>? geoReferenciaId,
      Value<int?>? organigramaId,
      Value<int?>? entidadId,
      Value<bool?>? activo,
      Value<int?>? cicloId,
      Value<int?>? docenteId,
      Value<String?>? gruponombre,
      Value<int?>? grupoId,
      Value<String?>? nivelAcademico,
      Value<int?>? nivelAcademicoId,
      Value<int?>? tutorId}) {
    return PeriodosCompanion(
      periodoId: periodoId ?? this.periodoId,
      nombre: nombre ?? this.nombre,
      estadoId: estadoId ?? this.estadoId,
      aliasPeriodo: aliasPeriodo ?? this.aliasPeriodo,
      fecComienzo: fecComienzo ?? this.fecComienzo,
      fecTermino: fecTermino ?? this.fecTermino,
      tipoId: tipoId ?? this.tipoId,
      superId: superId ?? this.superId,
      geoReferenciaId: geoReferenciaId ?? this.geoReferenciaId,
      organigramaId: organigramaId ?? this.organigramaId,
      entidadId: entidadId ?? this.entidadId,
      activo: activo ?? this.activo,
      cicloId: cicloId ?? this.cicloId,
      docenteId: docenteId ?? this.docenteId,
      gruponombre: gruponombre ?? this.gruponombre,
      grupoId: grupoId ?? this.grupoId,
      nivelAcademico: nivelAcademico ?? this.nivelAcademico,
      nivelAcademicoId: nivelAcademicoId ?? this.nivelAcademicoId,
      tutorId: tutorId ?? this.tutorId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (periodoId.present) {
      map['periodo_id'] = Variable<int>(periodoId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (aliasPeriodo.present) {
      map['alias_periodo'] = Variable<String?>(aliasPeriodo.value);
    }
    if (fecComienzo.present) {
      map['fec_comienzo'] = Variable<String?>(fecComienzo.value);
    }
    if (fecTermino.present) {
      map['fec_termino'] = Variable<String?>(fecTermino.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (superId.present) {
      map['super_id'] = Variable<int?>(superId.value);
    }
    if (geoReferenciaId.present) {
      map['geo_referencia_id'] = Variable<int?>(geoReferenciaId.value);
    }
    if (organigramaId.present) {
      map['organigrama_id'] = Variable<int?>(organigramaId.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (activo.present) {
      map['activo'] = Variable<bool?>(activo.value);
    }
    if (cicloId.present) {
      map['ciclo_id'] = Variable<int?>(cicloId.value);
    }
    if (docenteId.present) {
      map['docente_id'] = Variable<int?>(docenteId.value);
    }
    if (gruponombre.present) {
      map['gruponombre'] = Variable<String?>(gruponombre.value);
    }
    if (grupoId.present) {
      map['grupo_id'] = Variable<int?>(grupoId.value);
    }
    if (nivelAcademico.present) {
      map['nivel_academico'] = Variable<String?>(nivelAcademico.value);
    }
    if (nivelAcademicoId.present) {
      map['nivel_academico_id'] = Variable<int?>(nivelAcademicoId.value);
    }
    if (tutorId.present) {
      map['tutor_id'] = Variable<int?>(tutorId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PeriodosCompanion(')
          ..write('periodoId: $periodoId, ')
          ..write('nombre: $nombre, ')
          ..write('estadoId: $estadoId, ')
          ..write('aliasPeriodo: $aliasPeriodo, ')
          ..write('fecComienzo: $fecComienzo, ')
          ..write('fecTermino: $fecTermino, ')
          ..write('tipoId: $tipoId, ')
          ..write('superId: $superId, ')
          ..write('geoReferenciaId: $geoReferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('entidadId: $entidadId, ')
          ..write('activo: $activo, ')
          ..write('cicloId: $cicloId, ')
          ..write('docenteId: $docenteId, ')
          ..write('gruponombre: $gruponombre, ')
          ..write('grupoId: $grupoId, ')
          ..write('nivelAcademico: $nivelAcademico, ')
          ..write('nivelAcademicoId: $nivelAcademicoId, ')
          ..write('tutorId: $tutorId')
          ..write(')'))
        .toString();
  }
}

class $PeriodosTable extends Periodos with TableInfo<$PeriodosTable, Periodo> {
  final GeneratedDatabase _db;
  final String? _alias;
  $PeriodosTable(this._db, [this._alias]);
  final VerificationMeta _periodoIdMeta = const VerificationMeta('periodoId');
  late final GeneratedColumn<int?> periodoId = GeneratedColumn<int?>(
      'periodo_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _aliasPeriodoMeta =
      const VerificationMeta('aliasPeriodo');
  late final GeneratedColumn<String?> aliasPeriodo = GeneratedColumn<String?>(
      'alias_periodo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fecComienzoMeta =
      const VerificationMeta('fecComienzo');
  late final GeneratedColumn<String?> fecComienzo = GeneratedColumn<String?>(
      'fec_comienzo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fecTerminoMeta = const VerificationMeta('fecTermino');
  late final GeneratedColumn<String?> fecTermino = GeneratedColumn<String?>(
      'fec_termino', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _superIdMeta = const VerificationMeta('superId');
  late final GeneratedColumn<int?> superId = GeneratedColumn<int?>(
      'super_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _geoReferenciaIdMeta =
      const VerificationMeta('geoReferenciaId');
  late final GeneratedColumn<int?> geoReferenciaId = GeneratedColumn<int?>(
      'geo_referencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _organigramaIdMeta =
      const VerificationMeta('organigramaId');
  late final GeneratedColumn<int?> organigramaId = GeneratedColumn<int?>(
      'organigrama_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _activoMeta = const VerificationMeta('activo');
  late final GeneratedColumn<bool?> activo = GeneratedColumn<bool?>(
      'activo', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (activo IN (0, 1))');
  final VerificationMeta _cicloIdMeta = const VerificationMeta('cicloId');
  late final GeneratedColumn<int?> cicloId = GeneratedColumn<int?>(
      'ciclo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _docenteIdMeta = const VerificationMeta('docenteId');
  late final GeneratedColumn<int?> docenteId = GeneratedColumn<int?>(
      'docente_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _gruponombreMeta =
      const VerificationMeta('gruponombre');
  late final GeneratedColumn<String?> gruponombre = GeneratedColumn<String?>(
      'gruponombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _grupoIdMeta = const VerificationMeta('grupoId');
  late final GeneratedColumn<int?> grupoId = GeneratedColumn<int?>(
      'grupo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nivelAcademicoMeta =
      const VerificationMeta('nivelAcademico');
  late final GeneratedColumn<String?> nivelAcademico = GeneratedColumn<String?>(
      'nivel_academico', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nivelAcademicoIdMeta =
      const VerificationMeta('nivelAcademicoId');
  late final GeneratedColumn<int?> nivelAcademicoId = GeneratedColumn<int?>(
      'nivel_academico_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tutorIdMeta = const VerificationMeta('tutorId');
  late final GeneratedColumn<int?> tutorId = GeneratedColumn<int?>(
      'tutor_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        periodoId,
        nombre,
        estadoId,
        aliasPeriodo,
        fecComienzo,
        fecTermino,
        tipoId,
        superId,
        geoReferenciaId,
        organigramaId,
        entidadId,
        activo,
        cicloId,
        docenteId,
        gruponombre,
        grupoId,
        nivelAcademico,
        nivelAcademicoId,
        tutorId
      ];
  @override
  String get aliasedName => _alias ?? 'periodos';
  @override
  String get actualTableName => 'periodos';
  @override
  VerificationContext validateIntegrity(Insertable<Periodo> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('periodo_id')) {
      context.handle(_periodoIdMeta,
          periodoId.isAcceptableOrUnknown(data['periodo_id']!, _periodoIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('alias_periodo')) {
      context.handle(
          _aliasPeriodoMeta,
          aliasPeriodo.isAcceptableOrUnknown(
              data['alias_periodo']!, _aliasPeriodoMeta));
    }
    if (data.containsKey('fec_comienzo')) {
      context.handle(
          _fecComienzoMeta,
          fecComienzo.isAcceptableOrUnknown(
              data['fec_comienzo']!, _fecComienzoMeta));
    }
    if (data.containsKey('fec_termino')) {
      context.handle(
          _fecTerminoMeta,
          fecTermino.isAcceptableOrUnknown(
              data['fec_termino']!, _fecTerminoMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('super_id')) {
      context.handle(_superIdMeta,
          superId.isAcceptableOrUnknown(data['super_id']!, _superIdMeta));
    }
    if (data.containsKey('geo_referencia_id')) {
      context.handle(
          _geoReferenciaIdMeta,
          geoReferenciaId.isAcceptableOrUnknown(
              data['geo_referencia_id']!, _geoReferenciaIdMeta));
    }
    if (data.containsKey('organigrama_id')) {
      context.handle(
          _organigramaIdMeta,
          organigramaId.isAcceptableOrUnknown(
              data['organigrama_id']!, _organigramaIdMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('activo')) {
      context.handle(_activoMeta,
          activo.isAcceptableOrUnknown(data['activo']!, _activoMeta));
    }
    if (data.containsKey('ciclo_id')) {
      context.handle(_cicloIdMeta,
          cicloId.isAcceptableOrUnknown(data['ciclo_id']!, _cicloIdMeta));
    }
    if (data.containsKey('docente_id')) {
      context.handle(_docenteIdMeta,
          docenteId.isAcceptableOrUnknown(data['docente_id']!, _docenteIdMeta));
    }
    if (data.containsKey('gruponombre')) {
      context.handle(
          _gruponombreMeta,
          gruponombre.isAcceptableOrUnknown(
              data['gruponombre']!, _gruponombreMeta));
    }
    if (data.containsKey('grupo_id')) {
      context.handle(_grupoIdMeta,
          grupoId.isAcceptableOrUnknown(data['grupo_id']!, _grupoIdMeta));
    }
    if (data.containsKey('nivel_academico')) {
      context.handle(
          _nivelAcademicoMeta,
          nivelAcademico.isAcceptableOrUnknown(
              data['nivel_academico']!, _nivelAcademicoMeta));
    }
    if (data.containsKey('nivel_academico_id')) {
      context.handle(
          _nivelAcademicoIdMeta,
          nivelAcademicoId.isAcceptableOrUnknown(
              data['nivel_academico_id']!, _nivelAcademicoIdMeta));
    }
    if (data.containsKey('tutor_id')) {
      context.handle(_tutorIdMeta,
          tutorId.isAcceptableOrUnknown(data['tutor_id']!, _tutorIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {periodoId};
  @override
  Periodo map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Periodo.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PeriodosTable createAlias(String alias) {
    return $PeriodosTable(_db, alias);
  }
}

class PlanCurso extends DataClass implements Insertable<PlanCurso> {
  final int planCursoId;
  final int? cursoId;
  final int? periodoId;
  final int? planEstudiosId;
  PlanCurso(
      {required this.planCursoId,
      this.cursoId,
      this.periodoId,
      this.planEstudiosId});
  factory PlanCurso.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PlanCurso(
      planCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plan_curso_id'])!,
      cursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curso_id']),
      periodoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}periodo_id']),
      planEstudiosId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plan_estudios_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['plan_curso_id'] = Variable<int>(planCursoId);
    if (!nullToAbsent || cursoId != null) {
      map['curso_id'] = Variable<int?>(cursoId);
    }
    if (!nullToAbsent || periodoId != null) {
      map['periodo_id'] = Variable<int?>(periodoId);
    }
    if (!nullToAbsent || planEstudiosId != null) {
      map['plan_estudios_id'] = Variable<int?>(planEstudiosId);
    }
    return map;
  }

  PlanCursosCompanion toCompanion(bool nullToAbsent) {
    return PlanCursosCompanion(
      planCursoId: Value(planCursoId),
      cursoId: cursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(cursoId),
      periodoId: periodoId == null && nullToAbsent
          ? const Value.absent()
          : Value(periodoId),
      planEstudiosId: planEstudiosId == null && nullToAbsent
          ? const Value.absent()
          : Value(planEstudiosId),
    );
  }

  factory PlanCurso.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PlanCurso(
      planCursoId: serializer.fromJson<int>(json['planCursoId']),
      cursoId: serializer.fromJson<int?>(json['cursoId']),
      periodoId: serializer.fromJson<int?>(json['periodoId']),
      planEstudiosId: serializer.fromJson<int?>(json['planEstudiosId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'planCursoId': serializer.toJson<int>(planCursoId),
      'cursoId': serializer.toJson<int?>(cursoId),
      'periodoId': serializer.toJson<int?>(periodoId),
      'planEstudiosId': serializer.toJson<int?>(planEstudiosId),
    };
  }

  PlanCurso copyWith(
          {int? planCursoId,
          int? cursoId,
          int? periodoId,
          int? planEstudiosId}) =>
      PlanCurso(
        planCursoId: planCursoId ?? this.planCursoId,
        cursoId: cursoId ?? this.cursoId,
        periodoId: periodoId ?? this.periodoId,
        planEstudiosId: planEstudiosId ?? this.planEstudiosId,
      );
  @override
  String toString() {
    return (StringBuffer('PlanCurso(')
          ..write('planCursoId: $planCursoId, ')
          ..write('cursoId: $cursoId, ')
          ..write('periodoId: $periodoId, ')
          ..write('planEstudiosId: $planEstudiosId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      planCursoId.hashCode,
      $mrjc(cursoId.hashCode,
          $mrjc(periodoId.hashCode, planEstudiosId.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PlanCurso &&
          other.planCursoId == this.planCursoId &&
          other.cursoId == this.cursoId &&
          other.periodoId == this.periodoId &&
          other.planEstudiosId == this.planEstudiosId);
}

class PlanCursosCompanion extends UpdateCompanion<PlanCurso> {
  final Value<int> planCursoId;
  final Value<int?> cursoId;
  final Value<int?> periodoId;
  final Value<int?> planEstudiosId;
  const PlanCursosCompanion({
    this.planCursoId = const Value.absent(),
    this.cursoId = const Value.absent(),
    this.periodoId = const Value.absent(),
    this.planEstudiosId = const Value.absent(),
  });
  PlanCursosCompanion.insert({
    this.planCursoId = const Value.absent(),
    this.cursoId = const Value.absent(),
    this.periodoId = const Value.absent(),
    this.planEstudiosId = const Value.absent(),
  });
  static Insertable<PlanCurso> custom({
    Expression<int>? planCursoId,
    Expression<int?>? cursoId,
    Expression<int?>? periodoId,
    Expression<int?>? planEstudiosId,
  }) {
    return RawValuesInsertable({
      if (planCursoId != null) 'plan_curso_id': planCursoId,
      if (cursoId != null) 'curso_id': cursoId,
      if (periodoId != null) 'periodo_id': periodoId,
      if (planEstudiosId != null) 'plan_estudios_id': planEstudiosId,
    });
  }

  PlanCursosCompanion copyWith(
      {Value<int>? planCursoId,
      Value<int?>? cursoId,
      Value<int?>? periodoId,
      Value<int?>? planEstudiosId}) {
    return PlanCursosCompanion(
      planCursoId: planCursoId ?? this.planCursoId,
      cursoId: cursoId ?? this.cursoId,
      periodoId: periodoId ?? this.periodoId,
      planEstudiosId: planEstudiosId ?? this.planEstudiosId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (planCursoId.present) {
      map['plan_curso_id'] = Variable<int>(planCursoId.value);
    }
    if (cursoId.present) {
      map['curso_id'] = Variable<int?>(cursoId.value);
    }
    if (periodoId.present) {
      map['periodo_id'] = Variable<int?>(periodoId.value);
    }
    if (planEstudiosId.present) {
      map['plan_estudios_id'] = Variable<int?>(planEstudiosId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PlanCursosCompanion(')
          ..write('planCursoId: $planCursoId, ')
          ..write('cursoId: $cursoId, ')
          ..write('periodoId: $periodoId, ')
          ..write('planEstudiosId: $planEstudiosId')
          ..write(')'))
        .toString();
  }
}

class $PlanCursosTable extends PlanCursos
    with TableInfo<$PlanCursosTable, PlanCurso> {
  final GeneratedDatabase _db;
  final String? _alias;
  $PlanCursosTable(this._db, [this._alias]);
  final VerificationMeta _planCursoIdMeta =
      const VerificationMeta('planCursoId');
  late final GeneratedColumn<int?> planCursoId = GeneratedColumn<int?>(
      'plan_curso_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cursoIdMeta = const VerificationMeta('cursoId');
  late final GeneratedColumn<int?> cursoId = GeneratedColumn<int?>(
      'curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _periodoIdMeta = const VerificationMeta('periodoId');
  late final GeneratedColumn<int?> periodoId = GeneratedColumn<int?>(
      'periodo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _planEstudiosIdMeta =
      const VerificationMeta('planEstudiosId');
  late final GeneratedColumn<int?> planEstudiosId = GeneratedColumn<int?>(
      'plan_estudios_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [planCursoId, cursoId, periodoId, planEstudiosId];
  @override
  String get aliasedName => _alias ?? 'plan_cursos';
  @override
  String get actualTableName => 'plan_cursos';
  @override
  VerificationContext validateIntegrity(Insertable<PlanCurso> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('plan_curso_id')) {
      context.handle(
          _planCursoIdMeta,
          planCursoId.isAcceptableOrUnknown(
              data['plan_curso_id']!, _planCursoIdMeta));
    }
    if (data.containsKey('curso_id')) {
      context.handle(_cursoIdMeta,
          cursoId.isAcceptableOrUnknown(data['curso_id']!, _cursoIdMeta));
    }
    if (data.containsKey('periodo_id')) {
      context.handle(_periodoIdMeta,
          periodoId.isAcceptableOrUnknown(data['periodo_id']!, _periodoIdMeta));
    }
    if (data.containsKey('plan_estudios_id')) {
      context.handle(
          _planEstudiosIdMeta,
          planEstudiosId.isAcceptableOrUnknown(
              data['plan_estudios_id']!, _planEstudiosIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {planCursoId};
  @override
  PlanCurso map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PlanCurso.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PlanCursosTable createAlias(String alias) {
    return $PlanCursosTable(_db, alias);
  }
}

class PlanEstudioData extends DataClass implements Insertable<PlanEstudioData> {
  final int planEstudiosId;
  final int? programaEduId;
  final String? nombrePlan;
  final String? aliasPlan;
  final int? estadoId;
  final String? nroResolucion;
  final String? fechaResolucion;
  PlanEstudioData(
      {required this.planEstudiosId,
      this.programaEduId,
      this.nombrePlan,
      this.aliasPlan,
      this.estadoId,
      this.nroResolucion,
      this.fechaResolucion});
  factory PlanEstudioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PlanEstudioData(
      planEstudiosId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plan_estudios_id'])!,
      programaEduId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}programa_edu_id']),
      nombrePlan: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre_plan']),
      aliasPlan: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alias_plan']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      nroResolucion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_resolucion']),
      fechaResolucion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_resolucion']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['plan_estudios_id'] = Variable<int>(planEstudiosId);
    if (!nullToAbsent || programaEduId != null) {
      map['programa_edu_id'] = Variable<int?>(programaEduId);
    }
    if (!nullToAbsent || nombrePlan != null) {
      map['nombre_plan'] = Variable<String?>(nombrePlan);
    }
    if (!nullToAbsent || aliasPlan != null) {
      map['alias_plan'] = Variable<String?>(aliasPlan);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || nroResolucion != null) {
      map['nro_resolucion'] = Variable<String?>(nroResolucion);
    }
    if (!nullToAbsent || fechaResolucion != null) {
      map['fecha_resolucion'] = Variable<String?>(fechaResolucion);
    }
    return map;
  }

  PlanEstudioCompanion toCompanion(bool nullToAbsent) {
    return PlanEstudioCompanion(
      planEstudiosId: Value(planEstudiosId),
      programaEduId: programaEduId == null && nullToAbsent
          ? const Value.absent()
          : Value(programaEduId),
      nombrePlan: nombrePlan == null && nullToAbsent
          ? const Value.absent()
          : Value(nombrePlan),
      aliasPlan: aliasPlan == null && nullToAbsent
          ? const Value.absent()
          : Value(aliasPlan),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      nroResolucion: nroResolucion == null && nullToAbsent
          ? const Value.absent()
          : Value(nroResolucion),
      fechaResolucion: fechaResolucion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaResolucion),
    );
  }

  factory PlanEstudioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PlanEstudioData(
      planEstudiosId: serializer.fromJson<int>(json['planEstudiosId']),
      programaEduId: serializer.fromJson<int?>(json['programaEduId']),
      nombrePlan: serializer.fromJson<String?>(json['nombrePlan']),
      aliasPlan: serializer.fromJson<String?>(json['aliasPlan']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      nroResolucion: serializer.fromJson<String?>(json['nroResolucion']),
      fechaResolucion: serializer.fromJson<String?>(json['fechaResolucion']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'planEstudiosId': serializer.toJson<int>(planEstudiosId),
      'programaEduId': serializer.toJson<int?>(programaEduId),
      'nombrePlan': serializer.toJson<String?>(nombrePlan),
      'aliasPlan': serializer.toJson<String?>(aliasPlan),
      'estadoId': serializer.toJson<int?>(estadoId),
      'nroResolucion': serializer.toJson<String?>(nroResolucion),
      'fechaResolucion': serializer.toJson<String?>(fechaResolucion),
    };
  }

  PlanEstudioData copyWith(
          {int? planEstudiosId,
          int? programaEduId,
          String? nombrePlan,
          String? aliasPlan,
          int? estadoId,
          String? nroResolucion,
          String? fechaResolucion}) =>
      PlanEstudioData(
        planEstudiosId: planEstudiosId ?? this.planEstudiosId,
        programaEduId: programaEduId ?? this.programaEduId,
        nombrePlan: nombrePlan ?? this.nombrePlan,
        aliasPlan: aliasPlan ?? this.aliasPlan,
        estadoId: estadoId ?? this.estadoId,
        nroResolucion: nroResolucion ?? this.nroResolucion,
        fechaResolucion: fechaResolucion ?? this.fechaResolucion,
      );
  @override
  String toString() {
    return (StringBuffer('PlanEstudioData(')
          ..write('planEstudiosId: $planEstudiosId, ')
          ..write('programaEduId: $programaEduId, ')
          ..write('nombrePlan: $nombrePlan, ')
          ..write('aliasPlan: $aliasPlan, ')
          ..write('estadoId: $estadoId, ')
          ..write('nroResolucion: $nroResolucion, ')
          ..write('fechaResolucion: $fechaResolucion')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      planEstudiosId.hashCode,
      $mrjc(
          programaEduId.hashCode,
          $mrjc(
              nombrePlan.hashCode,
              $mrjc(
                  aliasPlan.hashCode,
                  $mrjc(
                      estadoId.hashCode,
                      $mrjc(nroResolucion.hashCode,
                          fechaResolucion.hashCode)))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PlanEstudioData &&
          other.planEstudiosId == this.planEstudiosId &&
          other.programaEduId == this.programaEduId &&
          other.nombrePlan == this.nombrePlan &&
          other.aliasPlan == this.aliasPlan &&
          other.estadoId == this.estadoId &&
          other.nroResolucion == this.nroResolucion &&
          other.fechaResolucion == this.fechaResolucion);
}

class PlanEstudioCompanion extends UpdateCompanion<PlanEstudioData> {
  final Value<int> planEstudiosId;
  final Value<int?> programaEduId;
  final Value<String?> nombrePlan;
  final Value<String?> aliasPlan;
  final Value<int?> estadoId;
  final Value<String?> nroResolucion;
  final Value<String?> fechaResolucion;
  const PlanEstudioCompanion({
    this.planEstudiosId = const Value.absent(),
    this.programaEduId = const Value.absent(),
    this.nombrePlan = const Value.absent(),
    this.aliasPlan = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.nroResolucion = const Value.absent(),
    this.fechaResolucion = const Value.absent(),
  });
  PlanEstudioCompanion.insert({
    this.planEstudiosId = const Value.absent(),
    this.programaEduId = const Value.absent(),
    this.nombrePlan = const Value.absent(),
    this.aliasPlan = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.nroResolucion = const Value.absent(),
    this.fechaResolucion = const Value.absent(),
  });
  static Insertable<PlanEstudioData> custom({
    Expression<int>? planEstudiosId,
    Expression<int?>? programaEduId,
    Expression<String?>? nombrePlan,
    Expression<String?>? aliasPlan,
    Expression<int?>? estadoId,
    Expression<String?>? nroResolucion,
    Expression<String?>? fechaResolucion,
  }) {
    return RawValuesInsertable({
      if (planEstudiosId != null) 'plan_estudios_id': planEstudiosId,
      if (programaEduId != null) 'programa_edu_id': programaEduId,
      if (nombrePlan != null) 'nombre_plan': nombrePlan,
      if (aliasPlan != null) 'alias_plan': aliasPlan,
      if (estadoId != null) 'estado_id': estadoId,
      if (nroResolucion != null) 'nro_resolucion': nroResolucion,
      if (fechaResolucion != null) 'fecha_resolucion': fechaResolucion,
    });
  }

  PlanEstudioCompanion copyWith(
      {Value<int>? planEstudiosId,
      Value<int?>? programaEduId,
      Value<String?>? nombrePlan,
      Value<String?>? aliasPlan,
      Value<int?>? estadoId,
      Value<String?>? nroResolucion,
      Value<String?>? fechaResolucion}) {
    return PlanEstudioCompanion(
      planEstudiosId: planEstudiosId ?? this.planEstudiosId,
      programaEduId: programaEduId ?? this.programaEduId,
      nombrePlan: nombrePlan ?? this.nombrePlan,
      aliasPlan: aliasPlan ?? this.aliasPlan,
      estadoId: estadoId ?? this.estadoId,
      nroResolucion: nroResolucion ?? this.nroResolucion,
      fechaResolucion: fechaResolucion ?? this.fechaResolucion,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (planEstudiosId.present) {
      map['plan_estudios_id'] = Variable<int>(planEstudiosId.value);
    }
    if (programaEduId.present) {
      map['programa_edu_id'] = Variable<int?>(programaEduId.value);
    }
    if (nombrePlan.present) {
      map['nombre_plan'] = Variable<String?>(nombrePlan.value);
    }
    if (aliasPlan.present) {
      map['alias_plan'] = Variable<String?>(aliasPlan.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (nroResolucion.present) {
      map['nro_resolucion'] = Variable<String?>(nroResolucion.value);
    }
    if (fechaResolucion.present) {
      map['fecha_resolucion'] = Variable<String?>(fechaResolucion.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PlanEstudioCompanion(')
          ..write('planEstudiosId: $planEstudiosId, ')
          ..write('programaEduId: $programaEduId, ')
          ..write('nombrePlan: $nombrePlan, ')
          ..write('aliasPlan: $aliasPlan, ')
          ..write('estadoId: $estadoId, ')
          ..write('nroResolucion: $nroResolucion, ')
          ..write('fechaResolucion: $fechaResolucion')
          ..write(')'))
        .toString();
  }
}

class $PlanEstudioTable extends PlanEstudio
    with TableInfo<$PlanEstudioTable, PlanEstudioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $PlanEstudioTable(this._db, [this._alias]);
  final VerificationMeta _planEstudiosIdMeta =
      const VerificationMeta('planEstudiosId');
  late final GeneratedColumn<int?> planEstudiosId = GeneratedColumn<int?>(
      'plan_estudios_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _programaEduIdMeta =
      const VerificationMeta('programaEduId');
  late final GeneratedColumn<int?> programaEduId = GeneratedColumn<int?>(
      'programa_edu_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombrePlanMeta = const VerificationMeta('nombrePlan');
  late final GeneratedColumn<String?> nombrePlan = GeneratedColumn<String?>(
      'nombre_plan', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _aliasPlanMeta = const VerificationMeta('aliasPlan');
  late final GeneratedColumn<String?> aliasPlan = GeneratedColumn<String?>(
      'alias_plan', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nroResolucionMeta =
      const VerificationMeta('nroResolucion');
  late final GeneratedColumn<String?> nroResolucion = GeneratedColumn<String?>(
      'nro_resolucion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaResolucionMeta =
      const VerificationMeta('fechaResolucion');
  late final GeneratedColumn<String?> fechaResolucion =
      GeneratedColumn<String?>('fecha_resolucion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        planEstudiosId,
        programaEduId,
        nombrePlan,
        aliasPlan,
        estadoId,
        nroResolucion,
        fechaResolucion
      ];
  @override
  String get aliasedName => _alias ?? 'plan_estudio';
  @override
  String get actualTableName => 'plan_estudio';
  @override
  VerificationContext validateIntegrity(Insertable<PlanEstudioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('plan_estudios_id')) {
      context.handle(
          _planEstudiosIdMeta,
          planEstudiosId.isAcceptableOrUnknown(
              data['plan_estudios_id']!, _planEstudiosIdMeta));
    }
    if (data.containsKey('programa_edu_id')) {
      context.handle(
          _programaEduIdMeta,
          programaEduId.isAcceptableOrUnknown(
              data['programa_edu_id']!, _programaEduIdMeta));
    }
    if (data.containsKey('nombre_plan')) {
      context.handle(
          _nombrePlanMeta,
          nombrePlan.isAcceptableOrUnknown(
              data['nombre_plan']!, _nombrePlanMeta));
    }
    if (data.containsKey('alias_plan')) {
      context.handle(_aliasPlanMeta,
          aliasPlan.isAcceptableOrUnknown(data['alias_plan']!, _aliasPlanMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('nro_resolucion')) {
      context.handle(
          _nroResolucionMeta,
          nroResolucion.isAcceptableOrUnknown(
              data['nro_resolucion']!, _nroResolucionMeta));
    }
    if (data.containsKey('fecha_resolucion')) {
      context.handle(
          _fechaResolucionMeta,
          fechaResolucion.isAcceptableOrUnknown(
              data['fecha_resolucion']!, _fechaResolucionMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {planEstudiosId};
  @override
  PlanEstudioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PlanEstudioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PlanEstudioTable createAlias(String alias) {
    return $PlanEstudioTable(_db, alias);
  }
}

class ProgramasEducativoData extends DataClass
    implements Insertable<ProgramasEducativoData> {
  final int programaEduId;
  final String? nombre;
  final String? nroCiclos;
  final int? nivelAcadId;
  final int? tipoEvaluacionId;
  final int? estadoId;
  final int? entidadId;
  final int? tipoInformeSiagieId;
  final bool? toogle;
  final int? tipoProgramaId;
  final int? tipoMatriculaId;
  ProgramasEducativoData(
      {required this.programaEduId,
      this.nombre,
      this.nroCiclos,
      this.nivelAcadId,
      this.tipoEvaluacionId,
      this.estadoId,
      this.entidadId,
      this.tipoInformeSiagieId,
      this.toogle,
      this.tipoProgramaId,
      this.tipoMatriculaId});
  factory ProgramasEducativoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProgramasEducativoData(
      programaEduId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}programa_edu_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      nroCiclos: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_ciclos']),
      nivelAcadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nivel_acad_id']),
      tipoEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}tipo_evaluacion_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      tipoInformeSiagieId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}tipo_informe_siagie_id']),
      toogle: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}toogle']),
      tipoProgramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_programa_id']),
      tipoMatriculaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_matricula_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['programa_edu_id'] = Variable<int>(programaEduId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || nroCiclos != null) {
      map['nro_ciclos'] = Variable<String?>(nroCiclos);
    }
    if (!nullToAbsent || nivelAcadId != null) {
      map['nivel_acad_id'] = Variable<int?>(nivelAcadId);
    }
    if (!nullToAbsent || tipoEvaluacionId != null) {
      map['tipo_evaluacion_id'] = Variable<int?>(tipoEvaluacionId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || tipoInformeSiagieId != null) {
      map['tipo_informe_siagie_id'] = Variable<int?>(tipoInformeSiagieId);
    }
    if (!nullToAbsent || toogle != null) {
      map['toogle'] = Variable<bool?>(toogle);
    }
    if (!nullToAbsent || tipoProgramaId != null) {
      map['tipo_programa_id'] = Variable<int?>(tipoProgramaId);
    }
    if (!nullToAbsent || tipoMatriculaId != null) {
      map['tipo_matricula_id'] = Variable<int?>(tipoMatriculaId);
    }
    return map;
  }

  ProgramasEducativoCompanion toCompanion(bool nullToAbsent) {
    return ProgramasEducativoCompanion(
      programaEduId: Value(programaEduId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      nroCiclos: nroCiclos == null && nullToAbsent
          ? const Value.absent()
          : Value(nroCiclos),
      nivelAcadId: nivelAcadId == null && nullToAbsent
          ? const Value.absent()
          : Value(nivelAcadId),
      tipoEvaluacionId: tipoEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEvaluacionId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      tipoInformeSiagieId: tipoInformeSiagieId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoInformeSiagieId),
      toogle:
          toogle == null && nullToAbsent ? const Value.absent() : Value(toogle),
      tipoProgramaId: tipoProgramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoProgramaId),
      tipoMatriculaId: tipoMatriculaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoMatriculaId),
    );
  }

  factory ProgramasEducativoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ProgramasEducativoData(
      programaEduId: serializer.fromJson<int>(json['programaEduId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      nroCiclos: serializer.fromJson<String?>(json['nroCiclos']),
      nivelAcadId: serializer.fromJson<int?>(json['nivelAcadId']),
      tipoEvaluacionId: serializer.fromJson<int?>(json['tipoEvaluacionId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      tipoInformeSiagieId:
          serializer.fromJson<int?>(json['tipoInformeSiagieId']),
      toogle: serializer.fromJson<bool?>(json['toogle']),
      tipoProgramaId: serializer.fromJson<int?>(json['tipoProgramaId']),
      tipoMatriculaId: serializer.fromJson<int?>(json['tipoMatriculaId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'programaEduId': serializer.toJson<int>(programaEduId),
      'nombre': serializer.toJson<String?>(nombre),
      'nroCiclos': serializer.toJson<String?>(nroCiclos),
      'nivelAcadId': serializer.toJson<int?>(nivelAcadId),
      'tipoEvaluacionId': serializer.toJson<int?>(tipoEvaluacionId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'entidadId': serializer.toJson<int?>(entidadId),
      'tipoInformeSiagieId': serializer.toJson<int?>(tipoInformeSiagieId),
      'toogle': serializer.toJson<bool?>(toogle),
      'tipoProgramaId': serializer.toJson<int?>(tipoProgramaId),
      'tipoMatriculaId': serializer.toJson<int?>(tipoMatriculaId),
    };
  }

  ProgramasEducativoData copyWith(
          {int? programaEduId,
          String? nombre,
          String? nroCiclos,
          int? nivelAcadId,
          int? tipoEvaluacionId,
          int? estadoId,
          int? entidadId,
          int? tipoInformeSiagieId,
          bool? toogle,
          int? tipoProgramaId,
          int? tipoMatriculaId}) =>
      ProgramasEducativoData(
        programaEduId: programaEduId ?? this.programaEduId,
        nombre: nombre ?? this.nombre,
        nroCiclos: nroCiclos ?? this.nroCiclos,
        nivelAcadId: nivelAcadId ?? this.nivelAcadId,
        tipoEvaluacionId: tipoEvaluacionId ?? this.tipoEvaluacionId,
        estadoId: estadoId ?? this.estadoId,
        entidadId: entidadId ?? this.entidadId,
        tipoInformeSiagieId: tipoInformeSiagieId ?? this.tipoInformeSiagieId,
        toogle: toogle ?? this.toogle,
        tipoProgramaId: tipoProgramaId ?? this.tipoProgramaId,
        tipoMatriculaId: tipoMatriculaId ?? this.tipoMatriculaId,
      );
  @override
  String toString() {
    return (StringBuffer('ProgramasEducativoData(')
          ..write('programaEduId: $programaEduId, ')
          ..write('nombre: $nombre, ')
          ..write('nroCiclos: $nroCiclos, ')
          ..write('nivelAcadId: $nivelAcadId, ')
          ..write('tipoEvaluacionId: $tipoEvaluacionId, ')
          ..write('estadoId: $estadoId, ')
          ..write('entidadId: $entidadId, ')
          ..write('tipoInformeSiagieId: $tipoInformeSiagieId, ')
          ..write('toogle: $toogle, ')
          ..write('tipoProgramaId: $tipoProgramaId, ')
          ..write('tipoMatriculaId: $tipoMatriculaId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      programaEduId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              nroCiclos.hashCode,
              $mrjc(
                  nivelAcadId.hashCode,
                  $mrjc(
                      tipoEvaluacionId.hashCode,
                      $mrjc(
                          estadoId.hashCode,
                          $mrjc(
                              entidadId.hashCode,
                              $mrjc(
                                  tipoInformeSiagieId.hashCode,
                                  $mrjc(
                                      toogle.hashCode,
                                      $mrjc(tipoProgramaId.hashCode,
                                          tipoMatriculaId.hashCode)))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProgramasEducativoData &&
          other.programaEduId == this.programaEduId &&
          other.nombre == this.nombre &&
          other.nroCiclos == this.nroCiclos &&
          other.nivelAcadId == this.nivelAcadId &&
          other.tipoEvaluacionId == this.tipoEvaluacionId &&
          other.estadoId == this.estadoId &&
          other.entidadId == this.entidadId &&
          other.tipoInformeSiagieId == this.tipoInformeSiagieId &&
          other.toogle == this.toogle &&
          other.tipoProgramaId == this.tipoProgramaId &&
          other.tipoMatriculaId == this.tipoMatriculaId);
}

class ProgramasEducativoCompanion
    extends UpdateCompanion<ProgramasEducativoData> {
  final Value<int> programaEduId;
  final Value<String?> nombre;
  final Value<String?> nroCiclos;
  final Value<int?> nivelAcadId;
  final Value<int?> tipoEvaluacionId;
  final Value<int?> estadoId;
  final Value<int?> entidadId;
  final Value<int?> tipoInformeSiagieId;
  final Value<bool?> toogle;
  final Value<int?> tipoProgramaId;
  final Value<int?> tipoMatriculaId;
  const ProgramasEducativoCompanion({
    this.programaEduId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.nroCiclos = const Value.absent(),
    this.nivelAcadId = const Value.absent(),
    this.tipoEvaluacionId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.tipoInformeSiagieId = const Value.absent(),
    this.toogle = const Value.absent(),
    this.tipoProgramaId = const Value.absent(),
    this.tipoMatriculaId = const Value.absent(),
  });
  ProgramasEducativoCompanion.insert({
    this.programaEduId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.nroCiclos = const Value.absent(),
    this.nivelAcadId = const Value.absent(),
    this.tipoEvaluacionId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.tipoInformeSiagieId = const Value.absent(),
    this.toogle = const Value.absent(),
    this.tipoProgramaId = const Value.absent(),
    this.tipoMatriculaId = const Value.absent(),
  });
  static Insertable<ProgramasEducativoData> custom({
    Expression<int>? programaEduId,
    Expression<String?>? nombre,
    Expression<String?>? nroCiclos,
    Expression<int?>? nivelAcadId,
    Expression<int?>? tipoEvaluacionId,
    Expression<int?>? estadoId,
    Expression<int?>? entidadId,
    Expression<int?>? tipoInformeSiagieId,
    Expression<bool?>? toogle,
    Expression<int?>? tipoProgramaId,
    Expression<int?>? tipoMatriculaId,
  }) {
    return RawValuesInsertable({
      if (programaEduId != null) 'programa_edu_id': programaEduId,
      if (nombre != null) 'nombre': nombre,
      if (nroCiclos != null) 'nro_ciclos': nroCiclos,
      if (nivelAcadId != null) 'nivel_acad_id': nivelAcadId,
      if (tipoEvaluacionId != null) 'tipo_evaluacion_id': tipoEvaluacionId,
      if (estadoId != null) 'estado_id': estadoId,
      if (entidadId != null) 'entidad_id': entidadId,
      if (tipoInformeSiagieId != null)
        'tipo_informe_siagie_id': tipoInformeSiagieId,
      if (toogle != null) 'toogle': toogle,
      if (tipoProgramaId != null) 'tipo_programa_id': tipoProgramaId,
      if (tipoMatriculaId != null) 'tipo_matricula_id': tipoMatriculaId,
    });
  }

  ProgramasEducativoCompanion copyWith(
      {Value<int>? programaEduId,
      Value<String?>? nombre,
      Value<String?>? nroCiclos,
      Value<int?>? nivelAcadId,
      Value<int?>? tipoEvaluacionId,
      Value<int?>? estadoId,
      Value<int?>? entidadId,
      Value<int?>? tipoInformeSiagieId,
      Value<bool?>? toogle,
      Value<int?>? tipoProgramaId,
      Value<int?>? tipoMatriculaId}) {
    return ProgramasEducativoCompanion(
      programaEduId: programaEduId ?? this.programaEduId,
      nombre: nombre ?? this.nombre,
      nroCiclos: nroCiclos ?? this.nroCiclos,
      nivelAcadId: nivelAcadId ?? this.nivelAcadId,
      tipoEvaluacionId: tipoEvaluacionId ?? this.tipoEvaluacionId,
      estadoId: estadoId ?? this.estadoId,
      entidadId: entidadId ?? this.entidadId,
      tipoInformeSiagieId: tipoInformeSiagieId ?? this.tipoInformeSiagieId,
      toogle: toogle ?? this.toogle,
      tipoProgramaId: tipoProgramaId ?? this.tipoProgramaId,
      tipoMatriculaId: tipoMatriculaId ?? this.tipoMatriculaId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (programaEduId.present) {
      map['programa_edu_id'] = Variable<int>(programaEduId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (nroCiclos.present) {
      map['nro_ciclos'] = Variable<String?>(nroCiclos.value);
    }
    if (nivelAcadId.present) {
      map['nivel_acad_id'] = Variable<int?>(nivelAcadId.value);
    }
    if (tipoEvaluacionId.present) {
      map['tipo_evaluacion_id'] = Variable<int?>(tipoEvaluacionId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (tipoInformeSiagieId.present) {
      map['tipo_informe_siagie_id'] = Variable<int?>(tipoInformeSiagieId.value);
    }
    if (toogle.present) {
      map['toogle'] = Variable<bool?>(toogle.value);
    }
    if (tipoProgramaId.present) {
      map['tipo_programa_id'] = Variable<int?>(tipoProgramaId.value);
    }
    if (tipoMatriculaId.present) {
      map['tipo_matricula_id'] = Variable<int?>(tipoMatriculaId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProgramasEducativoCompanion(')
          ..write('programaEduId: $programaEduId, ')
          ..write('nombre: $nombre, ')
          ..write('nroCiclos: $nroCiclos, ')
          ..write('nivelAcadId: $nivelAcadId, ')
          ..write('tipoEvaluacionId: $tipoEvaluacionId, ')
          ..write('estadoId: $estadoId, ')
          ..write('entidadId: $entidadId, ')
          ..write('tipoInformeSiagieId: $tipoInformeSiagieId, ')
          ..write('toogle: $toogle, ')
          ..write('tipoProgramaId: $tipoProgramaId, ')
          ..write('tipoMatriculaId: $tipoMatriculaId')
          ..write(')'))
        .toString();
  }
}

class $ProgramasEducativoTable extends ProgramasEducativo
    with TableInfo<$ProgramasEducativoTable, ProgramasEducativoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ProgramasEducativoTable(this._db, [this._alias]);
  final VerificationMeta _programaEduIdMeta =
      const VerificationMeta('programaEduId');
  late final GeneratedColumn<int?> programaEduId = GeneratedColumn<int?>(
      'programa_edu_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nroCiclosMeta = const VerificationMeta('nroCiclos');
  late final GeneratedColumn<String?> nroCiclos = GeneratedColumn<String?>(
      'nro_ciclos', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nivelAcadIdMeta =
      const VerificationMeta('nivelAcadId');
  late final GeneratedColumn<int?> nivelAcadId = GeneratedColumn<int?>(
      'nivel_acad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoEvaluacionIdMeta =
      const VerificationMeta('tipoEvaluacionId');
  late final GeneratedColumn<int?> tipoEvaluacionId = GeneratedColumn<int?>(
      'tipo_evaluacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoInformeSiagieIdMeta =
      const VerificationMeta('tipoInformeSiagieId');
  late final GeneratedColumn<int?> tipoInformeSiagieId = GeneratedColumn<int?>(
      'tipo_informe_siagie_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _toogleMeta = const VerificationMeta('toogle');
  late final GeneratedColumn<bool?> toogle = GeneratedColumn<bool?>(
      'toogle', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (toogle IN (0, 1))');
  final VerificationMeta _tipoProgramaIdMeta =
      const VerificationMeta('tipoProgramaId');
  late final GeneratedColumn<int?> tipoProgramaId = GeneratedColumn<int?>(
      'tipo_programa_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoMatriculaIdMeta =
      const VerificationMeta('tipoMatriculaId');
  late final GeneratedColumn<int?> tipoMatriculaId = GeneratedColumn<int?>(
      'tipo_matricula_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        programaEduId,
        nombre,
        nroCiclos,
        nivelAcadId,
        tipoEvaluacionId,
        estadoId,
        entidadId,
        tipoInformeSiagieId,
        toogle,
        tipoProgramaId,
        tipoMatriculaId
      ];
  @override
  String get aliasedName => _alias ?? 'programas_educativo';
  @override
  String get actualTableName => 'programas_educativo';
  @override
  VerificationContext validateIntegrity(
      Insertable<ProgramasEducativoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('programa_edu_id')) {
      context.handle(
          _programaEduIdMeta,
          programaEduId.isAcceptableOrUnknown(
              data['programa_edu_id']!, _programaEduIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('nro_ciclos')) {
      context.handle(_nroCiclosMeta,
          nroCiclos.isAcceptableOrUnknown(data['nro_ciclos']!, _nroCiclosMeta));
    }
    if (data.containsKey('nivel_acad_id')) {
      context.handle(
          _nivelAcadIdMeta,
          nivelAcadId.isAcceptableOrUnknown(
              data['nivel_acad_id']!, _nivelAcadIdMeta));
    }
    if (data.containsKey('tipo_evaluacion_id')) {
      context.handle(
          _tipoEvaluacionIdMeta,
          tipoEvaluacionId.isAcceptableOrUnknown(
              data['tipo_evaluacion_id']!, _tipoEvaluacionIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('tipo_informe_siagie_id')) {
      context.handle(
          _tipoInformeSiagieIdMeta,
          tipoInformeSiagieId.isAcceptableOrUnknown(
              data['tipo_informe_siagie_id']!, _tipoInformeSiagieIdMeta));
    }
    if (data.containsKey('toogle')) {
      context.handle(_toogleMeta,
          toogle.isAcceptableOrUnknown(data['toogle']!, _toogleMeta));
    }
    if (data.containsKey('tipo_programa_id')) {
      context.handle(
          _tipoProgramaIdMeta,
          tipoProgramaId.isAcceptableOrUnknown(
              data['tipo_programa_id']!, _tipoProgramaIdMeta));
    }
    if (data.containsKey('tipo_matricula_id')) {
      context.handle(
          _tipoMatriculaIdMeta,
          tipoMatriculaId.isAcceptableOrUnknown(
              data['tipo_matricula_id']!, _tipoMatriculaIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {programaEduId};
  @override
  ProgramasEducativoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProgramasEducativoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProgramasEducativoTable createAlias(String alias) {
    return $ProgramasEducativoTable(_db, alias);
  }
}

class SeccionData extends DataClass implements Insertable<SeccionData> {
  final int seccionId;
  final String? nombre;
  final String? descripcion;
  final bool? estado;
  final int? georeferenciaId;
  SeccionData(
      {required this.seccionId,
      this.nombre,
      this.descripcion,
      this.estado,
      this.georeferenciaId});
  factory SeccionData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return SeccionData(
      seccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}seccion_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['seccion_id'] = Variable<int>(seccionId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    return map;
  }

  SeccionCompanion toCompanion(bool nullToAbsent) {
    return SeccionCompanion(
      seccionId: Value(seccionId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
    );
  }

  factory SeccionData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return SeccionData(
      seccionId: serializer.fromJson<int>(json['seccionId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      estado: serializer.fromJson<bool?>(json['estado']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'seccionId': serializer.toJson<int>(seccionId),
      'nombre': serializer.toJson<String?>(nombre),
      'descripcion': serializer.toJson<String?>(descripcion),
      'estado': serializer.toJson<bool?>(estado),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
    };
  }

  SeccionData copyWith(
          {int? seccionId,
          String? nombre,
          String? descripcion,
          bool? estado,
          int? georeferenciaId}) =>
      SeccionData(
        seccionId: seccionId ?? this.seccionId,
        nombre: nombre ?? this.nombre,
        descripcion: descripcion ?? this.descripcion,
        estado: estado ?? this.estado,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      );
  @override
  String toString() {
    return (StringBuffer('SeccionData(')
          ..write('seccionId: $seccionId, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('estado: $estado, ')
          ..write('georeferenciaId: $georeferenciaId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      seccionId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(descripcion.hashCode,
              $mrjc(estado.hashCode, georeferenciaId.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SeccionData &&
          other.seccionId == this.seccionId &&
          other.nombre == this.nombre &&
          other.descripcion == this.descripcion &&
          other.estado == this.estado &&
          other.georeferenciaId == this.georeferenciaId);
}

class SeccionCompanion extends UpdateCompanion<SeccionData> {
  final Value<int> seccionId;
  final Value<String?> nombre;
  final Value<String?> descripcion;
  final Value<bool?> estado;
  final Value<int?> georeferenciaId;
  const SeccionCompanion({
    this.seccionId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.estado = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
  });
  SeccionCompanion.insert({
    this.seccionId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.estado = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
  });
  static Insertable<SeccionData> custom({
    Expression<int>? seccionId,
    Expression<String?>? nombre,
    Expression<String?>? descripcion,
    Expression<bool?>? estado,
    Expression<int?>? georeferenciaId,
  }) {
    return RawValuesInsertable({
      if (seccionId != null) 'seccion_id': seccionId,
      if (nombre != null) 'nombre': nombre,
      if (descripcion != null) 'descripcion': descripcion,
      if (estado != null) 'estado': estado,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
    });
  }

  SeccionCompanion copyWith(
      {Value<int>? seccionId,
      Value<String?>? nombre,
      Value<String?>? descripcion,
      Value<bool?>? estado,
      Value<int?>? georeferenciaId}) {
    return SeccionCompanion(
      seccionId: seccionId ?? this.seccionId,
      nombre: nombre ?? this.nombre,
      descripcion: descripcion ?? this.descripcion,
      estado: estado ?? this.estado,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (seccionId.present) {
      map['seccion_id'] = Variable<int>(seccionId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SeccionCompanion(')
          ..write('seccionId: $seccionId, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('estado: $estado, ')
          ..write('georeferenciaId: $georeferenciaId')
          ..write(')'))
        .toString();
  }
}

class $SeccionTable extends Seccion with TableInfo<$SeccionTable, SeccionData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $SeccionTable(this._db, [this._alias]);
  final VerificationMeta _seccionIdMeta = const VerificationMeta('seccionId');
  late final GeneratedColumn<int?> seccionId = GeneratedColumn<int?>(
      'seccion_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [seccionId, nombre, descripcion, estado, georeferenciaId];
  @override
  String get aliasedName => _alias ?? 'seccion';
  @override
  String get actualTableName => 'seccion';
  @override
  VerificationContext validateIntegrity(Insertable<SeccionData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('seccion_id')) {
      context.handle(_seccionIdMeta,
          seccionId.isAcceptableOrUnknown(data['seccion_id']!, _seccionIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {seccionId};
  @override
  SeccionData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return SeccionData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $SeccionTable createAlias(String alias) {
    return $SeccionTable(_db, alias);
  }
}

class SilaboEventoData extends DataClass
    implements Insertable<SilaboEventoData> {
  final int silaboEventoId;
  final String? titulo;
  final String? descripcionGeneral;
  final int? planCursoId;
  final int? entidadId;
  final int? docenteId;
  final int? seccionId;
  final int? estadoId;
  final int? anioAcademicoId;
  final int? georeferenciaId;
  final int? silaboBaseId;
  final int? cargaCursoId;
  final int? parametroDisenioId;
  final String? fechaInicio;
  final String? fechaFin;
  SilaboEventoData(
      {required this.silaboEventoId,
      this.titulo,
      this.descripcionGeneral,
      this.planCursoId,
      this.entidadId,
      this.docenteId,
      this.seccionId,
      this.estadoId,
      this.anioAcademicoId,
      this.georeferenciaId,
      this.silaboBaseId,
      this.cargaCursoId,
      this.parametroDisenioId,
      this.fechaInicio,
      this.fechaFin});
  factory SilaboEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return SilaboEventoData(
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id'])!,
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      descripcionGeneral: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}descripcion_general']),
      planCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plan_curso_id']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      docenteId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}docente_id']),
      seccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}seccion_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      anioAcademicoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}anio_academico_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      silaboBaseId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_base_id']),
      cargaCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}carga_curso_id']),
      parametroDisenioId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}parametro_disenio_id']),
      fechaInicio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_inicio']),
      fechaFin: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_fin']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['silabo_evento_id'] = Variable<int>(silaboEventoId);
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || descripcionGeneral != null) {
      map['descripcion_general'] = Variable<String?>(descripcionGeneral);
    }
    if (!nullToAbsent || planCursoId != null) {
      map['plan_curso_id'] = Variable<int?>(planCursoId);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || docenteId != null) {
      map['docente_id'] = Variable<int?>(docenteId);
    }
    if (!nullToAbsent || seccionId != null) {
      map['seccion_id'] = Variable<int?>(seccionId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || anioAcademicoId != null) {
      map['anio_academico_id'] = Variable<int?>(anioAcademicoId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || silaboBaseId != null) {
      map['silabo_base_id'] = Variable<int?>(silaboBaseId);
    }
    if (!nullToAbsent || cargaCursoId != null) {
      map['carga_curso_id'] = Variable<int?>(cargaCursoId);
    }
    if (!nullToAbsent || parametroDisenioId != null) {
      map['parametro_disenio_id'] = Variable<int?>(parametroDisenioId);
    }
    if (!nullToAbsent || fechaInicio != null) {
      map['fecha_inicio'] = Variable<String?>(fechaInicio);
    }
    if (!nullToAbsent || fechaFin != null) {
      map['fecha_fin'] = Variable<String?>(fechaFin);
    }
    return map;
  }

  SilaboEventoCompanion toCompanion(bool nullToAbsent) {
    return SilaboEventoCompanion(
      silaboEventoId: Value(silaboEventoId),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      descripcionGeneral: descripcionGeneral == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcionGeneral),
      planCursoId: planCursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(planCursoId),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      docenteId: docenteId == null && nullToAbsent
          ? const Value.absent()
          : Value(docenteId),
      seccionId: seccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(seccionId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      anioAcademicoId: anioAcademicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(anioAcademicoId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      silaboBaseId: silaboBaseId == null && nullToAbsent
          ? const Value.absent()
          : Value(silaboBaseId),
      cargaCursoId: cargaCursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(cargaCursoId),
      parametroDisenioId: parametroDisenioId == null && nullToAbsent
          ? const Value.absent()
          : Value(parametroDisenioId),
      fechaInicio: fechaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaInicio),
      fechaFin: fechaFin == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaFin),
    );
  }

  factory SilaboEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return SilaboEventoData(
      silaboEventoId: serializer.fromJson<int>(json['silaboEventoId']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      descripcionGeneral:
          serializer.fromJson<String?>(json['descripcionGeneral']),
      planCursoId: serializer.fromJson<int?>(json['planCursoId']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      docenteId: serializer.fromJson<int?>(json['docenteId']),
      seccionId: serializer.fromJson<int?>(json['seccionId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      anioAcademicoId: serializer.fromJson<int?>(json['anioAcademicoId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      silaboBaseId: serializer.fromJson<int?>(json['silaboBaseId']),
      cargaCursoId: serializer.fromJson<int?>(json['cargaCursoId']),
      parametroDisenioId: serializer.fromJson<int?>(json['parametroDisenioId']),
      fechaInicio: serializer.fromJson<String?>(json['fechaInicio']),
      fechaFin: serializer.fromJson<String?>(json['fechaFin']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'silaboEventoId': serializer.toJson<int>(silaboEventoId),
      'titulo': serializer.toJson<String?>(titulo),
      'descripcionGeneral': serializer.toJson<String?>(descripcionGeneral),
      'planCursoId': serializer.toJson<int?>(planCursoId),
      'entidadId': serializer.toJson<int?>(entidadId),
      'docenteId': serializer.toJson<int?>(docenteId),
      'seccionId': serializer.toJson<int?>(seccionId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'anioAcademicoId': serializer.toJson<int?>(anioAcademicoId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'silaboBaseId': serializer.toJson<int?>(silaboBaseId),
      'cargaCursoId': serializer.toJson<int?>(cargaCursoId),
      'parametroDisenioId': serializer.toJson<int?>(parametroDisenioId),
      'fechaInicio': serializer.toJson<String?>(fechaInicio),
      'fechaFin': serializer.toJson<String?>(fechaFin),
    };
  }

  SilaboEventoData copyWith(
          {int? silaboEventoId,
          String? titulo,
          String? descripcionGeneral,
          int? planCursoId,
          int? entidadId,
          int? docenteId,
          int? seccionId,
          int? estadoId,
          int? anioAcademicoId,
          int? georeferenciaId,
          int? silaboBaseId,
          int? cargaCursoId,
          int? parametroDisenioId,
          String? fechaInicio,
          String? fechaFin}) =>
      SilaboEventoData(
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
        titulo: titulo ?? this.titulo,
        descripcionGeneral: descripcionGeneral ?? this.descripcionGeneral,
        planCursoId: planCursoId ?? this.planCursoId,
        entidadId: entidadId ?? this.entidadId,
        docenteId: docenteId ?? this.docenteId,
        seccionId: seccionId ?? this.seccionId,
        estadoId: estadoId ?? this.estadoId,
        anioAcademicoId: anioAcademicoId ?? this.anioAcademicoId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        silaboBaseId: silaboBaseId ?? this.silaboBaseId,
        cargaCursoId: cargaCursoId ?? this.cargaCursoId,
        parametroDisenioId: parametroDisenioId ?? this.parametroDisenioId,
        fechaInicio: fechaInicio ?? this.fechaInicio,
        fechaFin: fechaFin ?? this.fechaFin,
      );
  @override
  String toString() {
    return (StringBuffer('SilaboEventoData(')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('titulo: $titulo, ')
          ..write('descripcionGeneral: $descripcionGeneral, ')
          ..write('planCursoId: $planCursoId, ')
          ..write('entidadId: $entidadId, ')
          ..write('docenteId: $docenteId, ')
          ..write('seccionId: $seccionId, ')
          ..write('estadoId: $estadoId, ')
          ..write('anioAcademicoId: $anioAcademicoId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('silaboBaseId: $silaboBaseId, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('parametroDisenioId: $parametroDisenioId, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      silaboEventoId.hashCode,
      $mrjc(
          titulo.hashCode,
          $mrjc(
              descripcionGeneral.hashCode,
              $mrjc(
                  planCursoId.hashCode,
                  $mrjc(
                      entidadId.hashCode,
                      $mrjc(
                          docenteId.hashCode,
                          $mrjc(
                              seccionId.hashCode,
                              $mrjc(
                                  estadoId.hashCode,
                                  $mrjc(
                                      anioAcademicoId.hashCode,
                                      $mrjc(
                                          georeferenciaId.hashCode,
                                          $mrjc(
                                              silaboBaseId.hashCode,
                                              $mrjc(
                                                  cargaCursoId.hashCode,
                                                  $mrjc(
                                                      parametroDisenioId
                                                          .hashCode,
                                                      $mrjc(
                                                          fechaInicio.hashCode,
                                                          fechaFin
                                                              .hashCode)))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SilaboEventoData &&
          other.silaboEventoId == this.silaboEventoId &&
          other.titulo == this.titulo &&
          other.descripcionGeneral == this.descripcionGeneral &&
          other.planCursoId == this.planCursoId &&
          other.entidadId == this.entidadId &&
          other.docenteId == this.docenteId &&
          other.seccionId == this.seccionId &&
          other.estadoId == this.estadoId &&
          other.anioAcademicoId == this.anioAcademicoId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.silaboBaseId == this.silaboBaseId &&
          other.cargaCursoId == this.cargaCursoId &&
          other.parametroDisenioId == this.parametroDisenioId &&
          other.fechaInicio == this.fechaInicio &&
          other.fechaFin == this.fechaFin);
}

class SilaboEventoCompanion extends UpdateCompanion<SilaboEventoData> {
  final Value<int> silaboEventoId;
  final Value<String?> titulo;
  final Value<String?> descripcionGeneral;
  final Value<int?> planCursoId;
  final Value<int?> entidadId;
  final Value<int?> docenteId;
  final Value<int?> seccionId;
  final Value<int?> estadoId;
  final Value<int?> anioAcademicoId;
  final Value<int?> georeferenciaId;
  final Value<int?> silaboBaseId;
  final Value<int?> cargaCursoId;
  final Value<int?> parametroDisenioId;
  final Value<String?> fechaInicio;
  final Value<String?> fechaFin;
  const SilaboEventoCompanion({
    this.silaboEventoId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.descripcionGeneral = const Value.absent(),
    this.planCursoId = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.docenteId = const Value.absent(),
    this.seccionId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.anioAcademicoId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.silaboBaseId = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.parametroDisenioId = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
  });
  SilaboEventoCompanion.insert({
    this.silaboEventoId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.descripcionGeneral = const Value.absent(),
    this.planCursoId = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.docenteId = const Value.absent(),
    this.seccionId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.anioAcademicoId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.silaboBaseId = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.parametroDisenioId = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
  });
  static Insertable<SilaboEventoData> custom({
    Expression<int>? silaboEventoId,
    Expression<String?>? titulo,
    Expression<String?>? descripcionGeneral,
    Expression<int?>? planCursoId,
    Expression<int?>? entidadId,
    Expression<int?>? docenteId,
    Expression<int?>? seccionId,
    Expression<int?>? estadoId,
    Expression<int?>? anioAcademicoId,
    Expression<int?>? georeferenciaId,
    Expression<int?>? silaboBaseId,
    Expression<int?>? cargaCursoId,
    Expression<int?>? parametroDisenioId,
    Expression<String?>? fechaInicio,
    Expression<String?>? fechaFin,
  }) {
    return RawValuesInsertable({
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
      if (titulo != null) 'titulo': titulo,
      if (descripcionGeneral != null) 'descripcion_general': descripcionGeneral,
      if (planCursoId != null) 'plan_curso_id': planCursoId,
      if (entidadId != null) 'entidad_id': entidadId,
      if (docenteId != null) 'docente_id': docenteId,
      if (seccionId != null) 'seccion_id': seccionId,
      if (estadoId != null) 'estado_id': estadoId,
      if (anioAcademicoId != null) 'anio_academico_id': anioAcademicoId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (silaboBaseId != null) 'silabo_base_id': silaboBaseId,
      if (cargaCursoId != null) 'carga_curso_id': cargaCursoId,
      if (parametroDisenioId != null)
        'parametro_disenio_id': parametroDisenioId,
      if (fechaInicio != null) 'fecha_inicio': fechaInicio,
      if (fechaFin != null) 'fecha_fin': fechaFin,
    });
  }

  SilaboEventoCompanion copyWith(
      {Value<int>? silaboEventoId,
      Value<String?>? titulo,
      Value<String?>? descripcionGeneral,
      Value<int?>? planCursoId,
      Value<int?>? entidadId,
      Value<int?>? docenteId,
      Value<int?>? seccionId,
      Value<int?>? estadoId,
      Value<int?>? anioAcademicoId,
      Value<int?>? georeferenciaId,
      Value<int?>? silaboBaseId,
      Value<int?>? cargaCursoId,
      Value<int?>? parametroDisenioId,
      Value<String?>? fechaInicio,
      Value<String?>? fechaFin}) {
    return SilaboEventoCompanion(
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      titulo: titulo ?? this.titulo,
      descripcionGeneral: descripcionGeneral ?? this.descripcionGeneral,
      planCursoId: planCursoId ?? this.planCursoId,
      entidadId: entidadId ?? this.entidadId,
      docenteId: docenteId ?? this.docenteId,
      seccionId: seccionId ?? this.seccionId,
      estadoId: estadoId ?? this.estadoId,
      anioAcademicoId: anioAcademicoId ?? this.anioAcademicoId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      silaboBaseId: silaboBaseId ?? this.silaboBaseId,
      cargaCursoId: cargaCursoId ?? this.cargaCursoId,
      parametroDisenioId: parametroDisenioId ?? this.parametroDisenioId,
      fechaInicio: fechaInicio ?? this.fechaInicio,
      fechaFin: fechaFin ?? this.fechaFin,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int>(silaboEventoId.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (descripcionGeneral.present) {
      map['descripcion_general'] = Variable<String?>(descripcionGeneral.value);
    }
    if (planCursoId.present) {
      map['plan_curso_id'] = Variable<int?>(planCursoId.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (docenteId.present) {
      map['docente_id'] = Variable<int?>(docenteId.value);
    }
    if (seccionId.present) {
      map['seccion_id'] = Variable<int?>(seccionId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (anioAcademicoId.present) {
      map['anio_academico_id'] = Variable<int?>(anioAcademicoId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (silaboBaseId.present) {
      map['silabo_base_id'] = Variable<int?>(silaboBaseId.value);
    }
    if (cargaCursoId.present) {
      map['carga_curso_id'] = Variable<int?>(cargaCursoId.value);
    }
    if (parametroDisenioId.present) {
      map['parametro_disenio_id'] = Variable<int?>(parametroDisenioId.value);
    }
    if (fechaInicio.present) {
      map['fecha_inicio'] = Variable<String?>(fechaInicio.value);
    }
    if (fechaFin.present) {
      map['fecha_fin'] = Variable<String?>(fechaFin.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SilaboEventoCompanion(')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('titulo: $titulo, ')
          ..write('descripcionGeneral: $descripcionGeneral, ')
          ..write('planCursoId: $planCursoId, ')
          ..write('entidadId: $entidadId, ')
          ..write('docenteId: $docenteId, ')
          ..write('seccionId: $seccionId, ')
          ..write('estadoId: $estadoId, ')
          ..write('anioAcademicoId: $anioAcademicoId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('silaboBaseId: $silaboBaseId, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('parametroDisenioId: $parametroDisenioId, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin')
          ..write(')'))
        .toString();
  }
}

class $SilaboEventoTable extends SilaboEvento
    with TableInfo<$SilaboEventoTable, SilaboEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $SilaboEventoTable(this._db, [this._alias]);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionGeneralMeta =
      const VerificationMeta('descripcionGeneral');
  late final GeneratedColumn<String?> descripcionGeneral =
      GeneratedColumn<String?>('descripcion_general', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _planCursoIdMeta =
      const VerificationMeta('planCursoId');
  late final GeneratedColumn<int?> planCursoId = GeneratedColumn<int?>(
      'plan_curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _docenteIdMeta = const VerificationMeta('docenteId');
  late final GeneratedColumn<int?> docenteId = GeneratedColumn<int?>(
      'docente_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _seccionIdMeta = const VerificationMeta('seccionId');
  late final GeneratedColumn<int?> seccionId = GeneratedColumn<int?>(
      'seccion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _anioAcademicoIdMeta =
      const VerificationMeta('anioAcademicoId');
  late final GeneratedColumn<int?> anioAcademicoId = GeneratedColumn<int?>(
      'anio_academico_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _silaboBaseIdMeta =
      const VerificationMeta('silaboBaseId');
  late final GeneratedColumn<int?> silaboBaseId = GeneratedColumn<int?>(
      'silabo_base_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cargaCursoIdMeta =
      const VerificationMeta('cargaCursoId');
  late final GeneratedColumn<int?> cargaCursoId = GeneratedColumn<int?>(
      'carga_curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _parametroDisenioIdMeta =
      const VerificationMeta('parametroDisenioId');
  late final GeneratedColumn<int?> parametroDisenioId = GeneratedColumn<int?>(
      'parametro_disenio_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaInicioMeta =
      const VerificationMeta('fechaInicio');
  late final GeneratedColumn<String?> fechaInicio = GeneratedColumn<String?>(
      'fecha_inicio', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaFinMeta = const VerificationMeta('fechaFin');
  late final GeneratedColumn<String?> fechaFin = GeneratedColumn<String?>(
      'fecha_fin', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        silaboEventoId,
        titulo,
        descripcionGeneral,
        planCursoId,
        entidadId,
        docenteId,
        seccionId,
        estadoId,
        anioAcademicoId,
        georeferenciaId,
        silaboBaseId,
        cargaCursoId,
        parametroDisenioId,
        fechaInicio,
        fechaFin
      ];
  @override
  String get aliasedName => _alias ?? 'silabo_evento';
  @override
  String get actualTableName => 'silabo_evento';
  @override
  VerificationContext validateIntegrity(Insertable<SilaboEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('descripcion_general')) {
      context.handle(
          _descripcionGeneralMeta,
          descripcionGeneral.isAcceptableOrUnknown(
              data['descripcion_general']!, _descripcionGeneralMeta));
    }
    if (data.containsKey('plan_curso_id')) {
      context.handle(
          _planCursoIdMeta,
          planCursoId.isAcceptableOrUnknown(
              data['plan_curso_id']!, _planCursoIdMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('docente_id')) {
      context.handle(_docenteIdMeta,
          docenteId.isAcceptableOrUnknown(data['docente_id']!, _docenteIdMeta));
    }
    if (data.containsKey('seccion_id')) {
      context.handle(_seccionIdMeta,
          seccionId.isAcceptableOrUnknown(data['seccion_id']!, _seccionIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('anio_academico_id')) {
      context.handle(
          _anioAcademicoIdMeta,
          anioAcademicoId.isAcceptableOrUnknown(
              data['anio_academico_id']!, _anioAcademicoIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('silabo_base_id')) {
      context.handle(
          _silaboBaseIdMeta,
          silaboBaseId.isAcceptableOrUnknown(
              data['silabo_base_id']!, _silaboBaseIdMeta));
    }
    if (data.containsKey('carga_curso_id')) {
      context.handle(
          _cargaCursoIdMeta,
          cargaCursoId.isAcceptableOrUnknown(
              data['carga_curso_id']!, _cargaCursoIdMeta));
    }
    if (data.containsKey('parametro_disenio_id')) {
      context.handle(
          _parametroDisenioIdMeta,
          parametroDisenioId.isAcceptableOrUnknown(
              data['parametro_disenio_id']!, _parametroDisenioIdMeta));
    }
    if (data.containsKey('fecha_inicio')) {
      context.handle(
          _fechaInicioMeta,
          fechaInicio.isAcceptableOrUnknown(
              data['fecha_inicio']!, _fechaInicioMeta));
    }
    if (data.containsKey('fecha_fin')) {
      context.handle(_fechaFinMeta,
          fechaFin.isAcceptableOrUnknown(data['fecha_fin']!, _fechaFinMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {silaboEventoId};
  @override
  SilaboEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return SilaboEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $SilaboEventoTable createAlias(String alias) {
    return $SilaboEventoTable(_db, alias);
  }
}

class CalendarioPeriodoData extends DataClass
    implements Insertable<CalendarioPeriodoData> {
  final int calendarioPeriodoId;
  final DateTime? fechaInicio;
  final DateTime? fechaFin;
  final int? calendarioAcademicoId;
  final int? tipoId;
  final int? estadoId;
  final bool? habilitado;
  final int? diazPlazo;
  CalendarioPeriodoData(
      {required this.calendarioPeriodoId,
      this.fechaInicio,
      this.fechaFin,
      this.calendarioAcademicoId,
      this.tipoId,
      this.estadoId,
      this.habilitado,
      this.diazPlazo});
  factory CalendarioPeriodoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CalendarioPeriodoData(
      calendarioPeriodoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_periodo_id'])!,
      fechaInicio: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_inicio']),
      fechaFin: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_fin']),
      calendarioAcademicoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_academico_id']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      habilitado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}habilitado']),
      diazPlazo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}diaz_plazo']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['calendario_periodo_id'] = Variable<int>(calendarioPeriodoId);
    if (!nullToAbsent || fechaInicio != null) {
      map['fecha_inicio'] = Variable<DateTime?>(fechaInicio);
    }
    if (!nullToAbsent || fechaFin != null) {
      map['fecha_fin'] = Variable<DateTime?>(fechaFin);
    }
    if (!nullToAbsent || calendarioAcademicoId != null) {
      map['calendario_academico_id'] = Variable<int?>(calendarioAcademicoId);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || habilitado != null) {
      map['habilitado'] = Variable<bool?>(habilitado);
    }
    if (!nullToAbsent || diazPlazo != null) {
      map['diaz_plazo'] = Variable<int?>(diazPlazo);
    }
    return map;
  }

  CalendarioPeriodoCompanion toCompanion(bool nullToAbsent) {
    return CalendarioPeriodoCompanion(
      calendarioPeriodoId: Value(calendarioPeriodoId),
      fechaInicio: fechaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaInicio),
      fechaFin: fechaFin == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaFin),
      calendarioAcademicoId: calendarioAcademicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(calendarioAcademicoId),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      habilitado: habilitado == null && nullToAbsent
          ? const Value.absent()
          : Value(habilitado),
      diazPlazo: diazPlazo == null && nullToAbsent
          ? const Value.absent()
          : Value(diazPlazo),
    );
  }

  factory CalendarioPeriodoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CalendarioPeriodoData(
      calendarioPeriodoId:
          serializer.fromJson<int>(json['calendarioPeriodoId']),
      fechaInicio: serializer.fromJson<DateTime?>(json['fechaInicio']),
      fechaFin: serializer.fromJson<DateTime?>(json['fechaFin']),
      calendarioAcademicoId:
          serializer.fromJson<int?>(json['calendarioAcademicoId']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      habilitado: serializer.fromJson<bool?>(json['habilitado']),
      diazPlazo: serializer.fromJson<int?>(json['diazPlazo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'calendarioPeriodoId': serializer.toJson<int>(calendarioPeriodoId),
      'fechaInicio': serializer.toJson<DateTime?>(fechaInicio),
      'fechaFin': serializer.toJson<DateTime?>(fechaFin),
      'calendarioAcademicoId': serializer.toJson<int?>(calendarioAcademicoId),
      'tipoId': serializer.toJson<int?>(tipoId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'habilitado': serializer.toJson<bool?>(habilitado),
      'diazPlazo': serializer.toJson<int?>(diazPlazo),
    };
  }

  CalendarioPeriodoData copyWith(
          {int? calendarioPeriodoId,
          DateTime? fechaInicio,
          DateTime? fechaFin,
          int? calendarioAcademicoId,
          int? tipoId,
          int? estadoId,
          bool? habilitado,
          int? diazPlazo}) =>
      CalendarioPeriodoData(
        calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
        fechaInicio: fechaInicio ?? this.fechaInicio,
        fechaFin: fechaFin ?? this.fechaFin,
        calendarioAcademicoId:
            calendarioAcademicoId ?? this.calendarioAcademicoId,
        tipoId: tipoId ?? this.tipoId,
        estadoId: estadoId ?? this.estadoId,
        habilitado: habilitado ?? this.habilitado,
        diazPlazo: diazPlazo ?? this.diazPlazo,
      );
  @override
  String toString() {
    return (StringBuffer('CalendarioPeriodoData(')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin, ')
          ..write('calendarioAcademicoId: $calendarioAcademicoId, ')
          ..write('tipoId: $tipoId, ')
          ..write('estadoId: $estadoId, ')
          ..write('habilitado: $habilitado, ')
          ..write('diazPlazo: $diazPlazo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      calendarioPeriodoId.hashCode,
      $mrjc(
          fechaInicio.hashCode,
          $mrjc(
              fechaFin.hashCode,
              $mrjc(
                  calendarioAcademicoId.hashCode,
                  $mrjc(
                      tipoId.hashCode,
                      $mrjc(estadoId.hashCode,
                          $mrjc(habilitado.hashCode, diazPlazo.hashCode))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CalendarioPeriodoData &&
          other.calendarioPeriodoId == this.calendarioPeriodoId &&
          other.fechaInicio == this.fechaInicio &&
          other.fechaFin == this.fechaFin &&
          other.calendarioAcademicoId == this.calendarioAcademicoId &&
          other.tipoId == this.tipoId &&
          other.estadoId == this.estadoId &&
          other.habilitado == this.habilitado &&
          other.diazPlazo == this.diazPlazo);
}

class CalendarioPeriodoCompanion
    extends UpdateCompanion<CalendarioPeriodoData> {
  final Value<int> calendarioPeriodoId;
  final Value<DateTime?> fechaInicio;
  final Value<DateTime?> fechaFin;
  final Value<int?> calendarioAcademicoId;
  final Value<int?> tipoId;
  final Value<int?> estadoId;
  final Value<bool?> habilitado;
  final Value<int?> diazPlazo;
  const CalendarioPeriodoCompanion({
    this.calendarioPeriodoId = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
    this.calendarioAcademicoId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.habilitado = const Value.absent(),
    this.diazPlazo = const Value.absent(),
  });
  CalendarioPeriodoCompanion.insert({
    this.calendarioPeriodoId = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
    this.calendarioAcademicoId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.habilitado = const Value.absent(),
    this.diazPlazo = const Value.absent(),
  });
  static Insertable<CalendarioPeriodoData> custom({
    Expression<int>? calendarioPeriodoId,
    Expression<DateTime?>? fechaInicio,
    Expression<DateTime?>? fechaFin,
    Expression<int?>? calendarioAcademicoId,
    Expression<int?>? tipoId,
    Expression<int?>? estadoId,
    Expression<bool?>? habilitado,
    Expression<int?>? diazPlazo,
  }) {
    return RawValuesInsertable({
      if (calendarioPeriodoId != null)
        'calendario_periodo_id': calendarioPeriodoId,
      if (fechaInicio != null) 'fecha_inicio': fechaInicio,
      if (fechaFin != null) 'fecha_fin': fechaFin,
      if (calendarioAcademicoId != null)
        'calendario_academico_id': calendarioAcademicoId,
      if (tipoId != null) 'tipo_id': tipoId,
      if (estadoId != null) 'estado_id': estadoId,
      if (habilitado != null) 'habilitado': habilitado,
      if (diazPlazo != null) 'diaz_plazo': diazPlazo,
    });
  }

  CalendarioPeriodoCompanion copyWith(
      {Value<int>? calendarioPeriodoId,
      Value<DateTime?>? fechaInicio,
      Value<DateTime?>? fechaFin,
      Value<int?>? calendarioAcademicoId,
      Value<int?>? tipoId,
      Value<int?>? estadoId,
      Value<bool?>? habilitado,
      Value<int?>? diazPlazo}) {
    return CalendarioPeriodoCompanion(
      calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
      fechaInicio: fechaInicio ?? this.fechaInicio,
      fechaFin: fechaFin ?? this.fechaFin,
      calendarioAcademicoId:
          calendarioAcademicoId ?? this.calendarioAcademicoId,
      tipoId: tipoId ?? this.tipoId,
      estadoId: estadoId ?? this.estadoId,
      habilitado: habilitado ?? this.habilitado,
      diazPlazo: diazPlazo ?? this.diazPlazo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (calendarioPeriodoId.present) {
      map['calendario_periodo_id'] = Variable<int>(calendarioPeriodoId.value);
    }
    if (fechaInicio.present) {
      map['fecha_inicio'] = Variable<DateTime?>(fechaInicio.value);
    }
    if (fechaFin.present) {
      map['fecha_fin'] = Variable<DateTime?>(fechaFin.value);
    }
    if (calendarioAcademicoId.present) {
      map['calendario_academico_id'] =
          Variable<int?>(calendarioAcademicoId.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (habilitado.present) {
      map['habilitado'] = Variable<bool?>(habilitado.value);
    }
    if (diazPlazo.present) {
      map['diaz_plazo'] = Variable<int?>(diazPlazo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CalendarioPeriodoCompanion(')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin, ')
          ..write('calendarioAcademicoId: $calendarioAcademicoId, ')
          ..write('tipoId: $tipoId, ')
          ..write('estadoId: $estadoId, ')
          ..write('habilitado: $habilitado, ')
          ..write('diazPlazo: $diazPlazo')
          ..write(')'))
        .toString();
  }
}

class $CalendarioPeriodoTable extends CalendarioPeriodo
    with TableInfo<$CalendarioPeriodoTable, CalendarioPeriodoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CalendarioPeriodoTable(this._db, [this._alias]);
  final VerificationMeta _calendarioPeriodoIdMeta =
      const VerificationMeta('calendarioPeriodoId');
  late final GeneratedColumn<int?> calendarioPeriodoId = GeneratedColumn<int?>(
      'calendario_periodo_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaInicioMeta =
      const VerificationMeta('fechaInicio');
  late final GeneratedColumn<DateTime?> fechaInicio =
      GeneratedColumn<DateTime?>('fecha_inicio', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaFinMeta = const VerificationMeta('fechaFin');
  late final GeneratedColumn<DateTime?> fechaFin = GeneratedColumn<DateTime?>(
      'fecha_fin', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _calendarioAcademicoIdMeta =
      const VerificationMeta('calendarioAcademicoId');
  late final GeneratedColumn<int?> calendarioAcademicoId =
      GeneratedColumn<int?>('calendario_academico_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _habilitadoMeta = const VerificationMeta('habilitado');
  late final GeneratedColumn<bool?> habilitado = GeneratedColumn<bool?>(
      'habilitado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (habilitado IN (0, 1))');
  final VerificationMeta _diazPlazoMeta = const VerificationMeta('diazPlazo');
  late final GeneratedColumn<int?> diazPlazo = GeneratedColumn<int?>(
      'diaz_plazo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        calendarioPeriodoId,
        fechaInicio,
        fechaFin,
        calendarioAcademicoId,
        tipoId,
        estadoId,
        habilitado,
        diazPlazo
      ];
  @override
  String get aliasedName => _alias ?? 'calendario_periodo';
  @override
  String get actualTableName => 'calendario_periodo';
  @override
  VerificationContext validateIntegrity(
      Insertable<CalendarioPeriodoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('calendario_periodo_id')) {
      context.handle(
          _calendarioPeriodoIdMeta,
          calendarioPeriodoId.isAcceptableOrUnknown(
              data['calendario_periodo_id']!, _calendarioPeriodoIdMeta));
    }
    if (data.containsKey('fecha_inicio')) {
      context.handle(
          _fechaInicioMeta,
          fechaInicio.isAcceptableOrUnknown(
              data['fecha_inicio']!, _fechaInicioMeta));
    }
    if (data.containsKey('fecha_fin')) {
      context.handle(_fechaFinMeta,
          fechaFin.isAcceptableOrUnknown(data['fecha_fin']!, _fechaFinMeta));
    }
    if (data.containsKey('calendario_academico_id')) {
      context.handle(
          _calendarioAcademicoIdMeta,
          calendarioAcademicoId.isAcceptableOrUnknown(
              data['calendario_academico_id']!, _calendarioAcademicoIdMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('habilitado')) {
      context.handle(
          _habilitadoMeta,
          habilitado.isAcceptableOrUnknown(
              data['habilitado']!, _habilitadoMeta));
    }
    if (data.containsKey('diaz_plazo')) {
      context.handle(_diazPlazoMeta,
          diazPlazo.isAcceptableOrUnknown(data['diaz_plazo']!, _diazPlazoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {calendarioPeriodoId};
  @override
  CalendarioPeriodoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CalendarioPeriodoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CalendarioPeriodoTable createAlias(String alias) {
    return $CalendarioPeriodoTable(_db, alias);
  }
}

class Tipo extends DataClass implements Insertable<Tipo> {
  final int tipoId;
  final String? objeto;
  final String? concepto;
  final String? nombre;
  final String? codigo;
  final int? parentId;
  Tipo(
      {required this.tipoId,
      this.objeto,
      this.concepto,
      this.nombre,
      this.codigo,
      this.parentId});
  factory Tipo.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Tipo(
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id'])!,
      objeto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}objeto']),
      concepto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}concepto']),
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      codigo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}codigo']),
      parentId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parent_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['tipo_id'] = Variable<int>(tipoId);
    if (!nullToAbsent || objeto != null) {
      map['objeto'] = Variable<String?>(objeto);
    }
    if (!nullToAbsent || concepto != null) {
      map['concepto'] = Variable<String?>(concepto);
    }
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || codigo != null) {
      map['codigo'] = Variable<String?>(codigo);
    }
    if (!nullToAbsent || parentId != null) {
      map['parent_id'] = Variable<int?>(parentId);
    }
    return map;
  }

  TiposCompanion toCompanion(bool nullToAbsent) {
    return TiposCompanion(
      tipoId: Value(tipoId),
      objeto:
          objeto == null && nullToAbsent ? const Value.absent() : Value(objeto),
      concepto: concepto == null && nullToAbsent
          ? const Value.absent()
          : Value(concepto),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      parentId: parentId == null && nullToAbsent
          ? const Value.absent()
          : Value(parentId),
    );
  }

  factory Tipo.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Tipo(
      tipoId: serializer.fromJson<int>(json['tipoId']),
      objeto: serializer.fromJson<String?>(json['objeto']),
      concepto: serializer.fromJson<String?>(json['concepto']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      parentId: serializer.fromJson<int?>(json['parentId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'tipoId': serializer.toJson<int>(tipoId),
      'objeto': serializer.toJson<String?>(objeto),
      'concepto': serializer.toJson<String?>(concepto),
      'nombre': serializer.toJson<String?>(nombre),
      'codigo': serializer.toJson<String?>(codigo),
      'parentId': serializer.toJson<int?>(parentId),
    };
  }

  Tipo copyWith(
          {int? tipoId,
          String? objeto,
          String? concepto,
          String? nombre,
          String? codigo,
          int? parentId}) =>
      Tipo(
        tipoId: tipoId ?? this.tipoId,
        objeto: objeto ?? this.objeto,
        concepto: concepto ?? this.concepto,
        nombre: nombre ?? this.nombre,
        codigo: codigo ?? this.codigo,
        parentId: parentId ?? this.parentId,
      );
  @override
  String toString() {
    return (StringBuffer('Tipo(')
          ..write('tipoId: $tipoId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('codigo: $codigo, ')
          ..write('parentId: $parentId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      tipoId.hashCode,
      $mrjc(
          objeto.hashCode,
          $mrjc(
              concepto.hashCode,
              $mrjc(nombre.hashCode,
                  $mrjc(codigo.hashCode, parentId.hashCode))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Tipo &&
          other.tipoId == this.tipoId &&
          other.objeto == this.objeto &&
          other.concepto == this.concepto &&
          other.nombre == this.nombre &&
          other.codigo == this.codigo &&
          other.parentId == this.parentId);
}

class TiposCompanion extends UpdateCompanion<Tipo> {
  final Value<int> tipoId;
  final Value<String?> objeto;
  final Value<String?> concepto;
  final Value<String?> nombre;
  final Value<String?> codigo;
  final Value<int?> parentId;
  const TiposCompanion({
    this.tipoId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.codigo = const Value.absent(),
    this.parentId = const Value.absent(),
  });
  TiposCompanion.insert({
    this.tipoId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.codigo = const Value.absent(),
    this.parentId = const Value.absent(),
  });
  static Insertable<Tipo> custom({
    Expression<int>? tipoId,
    Expression<String?>? objeto,
    Expression<String?>? concepto,
    Expression<String?>? nombre,
    Expression<String?>? codigo,
    Expression<int?>? parentId,
  }) {
    return RawValuesInsertable({
      if (tipoId != null) 'tipo_id': tipoId,
      if (objeto != null) 'objeto': objeto,
      if (concepto != null) 'concepto': concepto,
      if (nombre != null) 'nombre': nombre,
      if (codigo != null) 'codigo': codigo,
      if (parentId != null) 'parent_id': parentId,
    });
  }

  TiposCompanion copyWith(
      {Value<int>? tipoId,
      Value<String?>? objeto,
      Value<String?>? concepto,
      Value<String?>? nombre,
      Value<String?>? codigo,
      Value<int?>? parentId}) {
    return TiposCompanion(
      tipoId: tipoId ?? this.tipoId,
      objeto: objeto ?? this.objeto,
      concepto: concepto ?? this.concepto,
      nombre: nombre ?? this.nombre,
      codigo: codigo ?? this.codigo,
      parentId: parentId ?? this.parentId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (tipoId.present) {
      map['tipo_id'] = Variable<int>(tipoId.value);
    }
    if (objeto.present) {
      map['objeto'] = Variable<String?>(objeto.value);
    }
    if (concepto.present) {
      map['concepto'] = Variable<String?>(concepto.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (codigo.present) {
      map['codigo'] = Variable<String?>(codigo.value);
    }
    if (parentId.present) {
      map['parent_id'] = Variable<int?>(parentId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TiposCompanion(')
          ..write('tipoId: $tipoId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('codigo: $codigo, ')
          ..write('parentId: $parentId')
          ..write(')'))
        .toString();
  }
}

class $TiposTable extends Tipos with TableInfo<$TiposTable, Tipo> {
  final GeneratedDatabase _db;
  final String? _alias;
  $TiposTable(this._db, [this._alias]);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _objetoMeta = const VerificationMeta('objeto');
  late final GeneratedColumn<String?> objeto = GeneratedColumn<String?>(
      'objeto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _conceptoMeta = const VerificationMeta('concepto');
  late final GeneratedColumn<String?> concepto = GeneratedColumn<String?>(
      'concepto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
      'codigo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _parentIdMeta = const VerificationMeta('parentId');
  late final GeneratedColumn<int?> parentId = GeneratedColumn<int?>(
      'parent_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [tipoId, objeto, concepto, nombre, codigo, parentId];
  @override
  String get aliasedName => _alias ?? 'tipos';
  @override
  String get actualTableName => 'tipos';
  @override
  VerificationContext validateIntegrity(Insertable<Tipo> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('objeto')) {
      context.handle(_objetoMeta,
          objeto.isAcceptableOrUnknown(data['objeto']!, _objetoMeta));
    }
    if (data.containsKey('concepto')) {
      context.handle(_conceptoMeta,
          concepto.isAcceptableOrUnknown(data['concepto']!, _conceptoMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('codigo')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['codigo']!, _codigoMeta));
    }
    if (data.containsKey('parent_id')) {
      context.handle(_parentIdMeta,
          parentId.isAcceptableOrUnknown(data['parent_id']!, _parentIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {tipoId};
  @override
  Tipo map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Tipo.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TiposTable createAlias(String alias) {
    return $TiposTable(_db, alias);
  }
}

class HoraData extends DataClass implements Insertable<HoraData> {
  final int idHora;
  final String? horaInicio;
  final String? horaFin;
  HoraData({required this.idHora, this.horaInicio, this.horaFin});
  factory HoraData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return HoraData(
      idHora: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_hora'])!,
      horaInicio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hora_inicio']),
      horaFin: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hora_fin']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_hora'] = Variable<int>(idHora);
    if (!nullToAbsent || horaInicio != null) {
      map['hora_inicio'] = Variable<String?>(horaInicio);
    }
    if (!nullToAbsent || horaFin != null) {
      map['hora_fin'] = Variable<String?>(horaFin);
    }
    return map;
  }

  HoraCompanion toCompanion(bool nullToAbsent) {
    return HoraCompanion(
      idHora: Value(idHora),
      horaInicio: horaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(horaInicio),
      horaFin: horaFin == null && nullToAbsent
          ? const Value.absent()
          : Value(horaFin),
    );
  }

  factory HoraData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return HoraData(
      idHora: serializer.fromJson<int>(json['idHora']),
      horaInicio: serializer.fromJson<String?>(json['horaInicio']),
      horaFin: serializer.fromJson<String?>(json['horaFin']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idHora': serializer.toJson<int>(idHora),
      'horaInicio': serializer.toJson<String?>(horaInicio),
      'horaFin': serializer.toJson<String?>(horaFin),
    };
  }

  HoraData copyWith({int? idHora, String? horaInicio, String? horaFin}) =>
      HoraData(
        idHora: idHora ?? this.idHora,
        horaInicio: horaInicio ?? this.horaInicio,
        horaFin: horaFin ?? this.horaFin,
      );
  @override
  String toString() {
    return (StringBuffer('HoraData(')
          ..write('idHora: $idHora, ')
          ..write('horaInicio: $horaInicio, ')
          ..write('horaFin: $horaFin')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf(
      $mrjc(idHora.hashCode, $mrjc(horaInicio.hashCode, horaFin.hashCode)));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HoraData &&
          other.idHora == this.idHora &&
          other.horaInicio == this.horaInicio &&
          other.horaFin == this.horaFin);
}

class HoraCompanion extends UpdateCompanion<HoraData> {
  final Value<int> idHora;
  final Value<String?> horaInicio;
  final Value<String?> horaFin;
  const HoraCompanion({
    this.idHora = const Value.absent(),
    this.horaInicio = const Value.absent(),
    this.horaFin = const Value.absent(),
  });
  HoraCompanion.insert({
    this.idHora = const Value.absent(),
    this.horaInicio = const Value.absent(),
    this.horaFin = const Value.absent(),
  });
  static Insertable<HoraData> custom({
    Expression<int>? idHora,
    Expression<String?>? horaInicio,
    Expression<String?>? horaFin,
  }) {
    return RawValuesInsertable({
      if (idHora != null) 'id_hora': idHora,
      if (horaInicio != null) 'hora_inicio': horaInicio,
      if (horaFin != null) 'hora_fin': horaFin,
    });
  }

  HoraCompanion copyWith(
      {Value<int>? idHora,
      Value<String?>? horaInicio,
      Value<String?>? horaFin}) {
    return HoraCompanion(
      idHora: idHora ?? this.idHora,
      horaInicio: horaInicio ?? this.horaInicio,
      horaFin: horaFin ?? this.horaFin,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idHora.present) {
      map['id_hora'] = Variable<int>(idHora.value);
    }
    if (horaInicio.present) {
      map['hora_inicio'] = Variable<String?>(horaInicio.value);
    }
    if (horaFin.present) {
      map['hora_fin'] = Variable<String?>(horaFin.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HoraCompanion(')
          ..write('idHora: $idHora, ')
          ..write('horaInicio: $horaInicio, ')
          ..write('horaFin: $horaFin')
          ..write(')'))
        .toString();
  }
}

class $HoraTable extends Hora with TableInfo<$HoraTable, HoraData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $HoraTable(this._db, [this._alias]);
  final VerificationMeta _idHoraMeta = const VerificationMeta('idHora');
  late final GeneratedColumn<int?> idHora = GeneratedColumn<int?>(
      'id_hora', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _horaInicioMeta = const VerificationMeta('horaInicio');
  late final GeneratedColumn<String?> horaInicio = GeneratedColumn<String?>(
      'hora_inicio', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _horaFinMeta = const VerificationMeta('horaFin');
  late final GeneratedColumn<String?> horaFin = GeneratedColumn<String?>(
      'hora_fin', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [idHora, horaInicio, horaFin];
  @override
  String get aliasedName => _alias ?? 'hora';
  @override
  String get actualTableName => 'hora';
  @override
  VerificationContext validateIntegrity(Insertable<HoraData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_hora')) {
      context.handle(_idHoraMeta,
          idHora.isAcceptableOrUnknown(data['id_hora']!, _idHoraMeta));
    }
    if (data.containsKey('hora_inicio')) {
      context.handle(
          _horaInicioMeta,
          horaInicio.isAcceptableOrUnknown(
              data['hora_inicio']!, _horaInicioMeta));
    }
    if (data.containsKey('hora_fin')) {
      context.handle(_horaFinMeta,
          horaFin.isAcceptableOrUnknown(data['hora_fin']!, _horaFinMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idHora};
  @override
  HoraData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return HoraData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $HoraTable createAlias(String alias) {
    return $HoraTable(_db, alias);
  }
}

class HorarioProgramaData extends DataClass
    implements Insertable<HorarioProgramaData> {
  final int idHorarioPrograma;
  final int? idHorario;
  final int? activo;
  final int? idProgramaEducativo;
  final int? idAnioAcademico;
  final int? idUsuarioActualizacion;
  final int? idUsuarioCreacion;
  final String? fechaCreacion;
  final String? fechaActualizacion;
  HorarioProgramaData(
      {required this.idHorarioPrograma,
      this.idHorario,
      this.activo,
      this.idProgramaEducativo,
      this.idAnioAcademico,
      this.idUsuarioActualizacion,
      this.idUsuarioCreacion,
      this.fechaCreacion,
      this.fechaActualizacion});
  factory HorarioProgramaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return HorarioProgramaData(
      idHorarioPrograma: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_horario_programa'])!,
      idHorario: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_horario']),
      activo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}activo']),
      idProgramaEducativo: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_programa_educativo']),
      idAnioAcademico: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_anio_academico']),
      idUsuarioActualizacion: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_usuario_actualizacion']),
      idUsuarioCreacion: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_usuario_creacion']),
      fechaCreacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      fechaActualizacion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}fecha_actualizacion']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_horario_programa'] = Variable<int>(idHorarioPrograma);
    if (!nullToAbsent || idHorario != null) {
      map['id_horario'] = Variable<int?>(idHorario);
    }
    if (!nullToAbsent || activo != null) {
      map['activo'] = Variable<int?>(activo);
    }
    if (!nullToAbsent || idProgramaEducativo != null) {
      map['id_programa_educativo'] = Variable<int?>(idProgramaEducativo);
    }
    if (!nullToAbsent || idAnioAcademico != null) {
      map['id_anio_academico'] = Variable<int?>(idAnioAcademico);
    }
    if (!nullToAbsent || idUsuarioActualizacion != null) {
      map['id_usuario_actualizacion'] = Variable<int?>(idUsuarioActualizacion);
    }
    if (!nullToAbsent || idUsuarioCreacion != null) {
      map['id_usuario_creacion'] = Variable<int?>(idUsuarioCreacion);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<String?>(fechaCreacion);
    }
    if (!nullToAbsent || fechaActualizacion != null) {
      map['fecha_actualizacion'] = Variable<String?>(fechaActualizacion);
    }
    return map;
  }

  HorarioProgramaCompanion toCompanion(bool nullToAbsent) {
    return HorarioProgramaCompanion(
      idHorarioPrograma: Value(idHorarioPrograma),
      idHorario: idHorario == null && nullToAbsent
          ? const Value.absent()
          : Value(idHorario),
      activo:
          activo == null && nullToAbsent ? const Value.absent() : Value(activo),
      idProgramaEducativo: idProgramaEducativo == null && nullToAbsent
          ? const Value.absent()
          : Value(idProgramaEducativo),
      idAnioAcademico: idAnioAcademico == null && nullToAbsent
          ? const Value.absent()
          : Value(idAnioAcademico),
      idUsuarioActualizacion: idUsuarioActualizacion == null && nullToAbsent
          ? const Value.absent()
          : Value(idUsuarioActualizacion),
      idUsuarioCreacion: idUsuarioCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(idUsuarioCreacion),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      fechaActualizacion: fechaActualizacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaActualizacion),
    );
  }

  factory HorarioProgramaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return HorarioProgramaData(
      idHorarioPrograma: serializer.fromJson<int>(json['idHorarioPrograma']),
      idHorario: serializer.fromJson<int?>(json['idHorario']),
      activo: serializer.fromJson<int?>(json['activo']),
      idProgramaEducativo:
          serializer.fromJson<int?>(json['idProgramaEducativo']),
      idAnioAcademico: serializer.fromJson<int?>(json['idAnioAcademico']),
      idUsuarioActualizacion:
          serializer.fromJson<int?>(json['idUsuarioActualizacion']),
      idUsuarioCreacion: serializer.fromJson<int?>(json['idUsuarioCreacion']),
      fechaCreacion: serializer.fromJson<String?>(json['fechaCreacion']),
      fechaActualizacion:
          serializer.fromJson<String?>(json['fechaActualizacion']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idHorarioPrograma': serializer.toJson<int>(idHorarioPrograma),
      'idHorario': serializer.toJson<int?>(idHorario),
      'activo': serializer.toJson<int?>(activo),
      'idProgramaEducativo': serializer.toJson<int?>(idProgramaEducativo),
      'idAnioAcademico': serializer.toJson<int?>(idAnioAcademico),
      'idUsuarioActualizacion': serializer.toJson<int?>(idUsuarioActualizacion),
      'idUsuarioCreacion': serializer.toJson<int?>(idUsuarioCreacion),
      'fechaCreacion': serializer.toJson<String?>(fechaCreacion),
      'fechaActualizacion': serializer.toJson<String?>(fechaActualizacion),
    };
  }

  HorarioProgramaData copyWith(
          {int? idHorarioPrograma,
          int? idHorario,
          int? activo,
          int? idProgramaEducativo,
          int? idAnioAcademico,
          int? idUsuarioActualizacion,
          int? idUsuarioCreacion,
          String? fechaCreacion,
          String? fechaActualizacion}) =>
      HorarioProgramaData(
        idHorarioPrograma: idHorarioPrograma ?? this.idHorarioPrograma,
        idHorario: idHorario ?? this.idHorario,
        activo: activo ?? this.activo,
        idProgramaEducativo: idProgramaEducativo ?? this.idProgramaEducativo,
        idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
        idUsuarioActualizacion:
            idUsuarioActualizacion ?? this.idUsuarioActualizacion,
        idUsuarioCreacion: idUsuarioCreacion ?? this.idUsuarioCreacion,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        fechaActualizacion: fechaActualizacion ?? this.fechaActualizacion,
      );
  @override
  String toString() {
    return (StringBuffer('HorarioProgramaData(')
          ..write('idHorarioPrograma: $idHorarioPrograma, ')
          ..write('idHorario: $idHorario, ')
          ..write('activo: $activo, ')
          ..write('idProgramaEducativo: $idProgramaEducativo, ')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('idUsuarioActualizacion: $idUsuarioActualizacion, ')
          ..write('idUsuarioCreacion: $idUsuarioCreacion, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('fechaActualizacion: $fechaActualizacion')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      idHorarioPrograma.hashCode,
      $mrjc(
          idHorario.hashCode,
          $mrjc(
              activo.hashCode,
              $mrjc(
                  idProgramaEducativo.hashCode,
                  $mrjc(
                      idAnioAcademico.hashCode,
                      $mrjc(
                          idUsuarioActualizacion.hashCode,
                          $mrjc(
                              idUsuarioCreacion.hashCode,
                              $mrjc(fechaCreacion.hashCode,
                                  fechaActualizacion.hashCode)))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HorarioProgramaData &&
          other.idHorarioPrograma == this.idHorarioPrograma &&
          other.idHorario == this.idHorario &&
          other.activo == this.activo &&
          other.idProgramaEducativo == this.idProgramaEducativo &&
          other.idAnioAcademico == this.idAnioAcademico &&
          other.idUsuarioActualizacion == this.idUsuarioActualizacion &&
          other.idUsuarioCreacion == this.idUsuarioCreacion &&
          other.fechaCreacion == this.fechaCreacion &&
          other.fechaActualizacion == this.fechaActualizacion);
}

class HorarioProgramaCompanion extends UpdateCompanion<HorarioProgramaData> {
  final Value<int> idHorarioPrograma;
  final Value<int?> idHorario;
  final Value<int?> activo;
  final Value<int?> idProgramaEducativo;
  final Value<int?> idAnioAcademico;
  final Value<int?> idUsuarioActualizacion;
  final Value<int?> idUsuarioCreacion;
  final Value<String?> fechaCreacion;
  final Value<String?> fechaActualizacion;
  const HorarioProgramaCompanion({
    this.idHorarioPrograma = const Value.absent(),
    this.idHorario = const Value.absent(),
    this.activo = const Value.absent(),
    this.idProgramaEducativo = const Value.absent(),
    this.idAnioAcademico = const Value.absent(),
    this.idUsuarioActualizacion = const Value.absent(),
    this.idUsuarioCreacion = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.fechaActualizacion = const Value.absent(),
  });
  HorarioProgramaCompanion.insert({
    this.idHorarioPrograma = const Value.absent(),
    this.idHorario = const Value.absent(),
    this.activo = const Value.absent(),
    this.idProgramaEducativo = const Value.absent(),
    this.idAnioAcademico = const Value.absent(),
    this.idUsuarioActualizacion = const Value.absent(),
    this.idUsuarioCreacion = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.fechaActualizacion = const Value.absent(),
  });
  static Insertable<HorarioProgramaData> custom({
    Expression<int>? idHorarioPrograma,
    Expression<int?>? idHorario,
    Expression<int?>? activo,
    Expression<int?>? idProgramaEducativo,
    Expression<int?>? idAnioAcademico,
    Expression<int?>? idUsuarioActualizacion,
    Expression<int?>? idUsuarioCreacion,
    Expression<String?>? fechaCreacion,
    Expression<String?>? fechaActualizacion,
  }) {
    return RawValuesInsertable({
      if (idHorarioPrograma != null) 'id_horario_programa': idHorarioPrograma,
      if (idHorario != null) 'id_horario': idHorario,
      if (activo != null) 'activo': activo,
      if (idProgramaEducativo != null)
        'id_programa_educativo': idProgramaEducativo,
      if (idAnioAcademico != null) 'id_anio_academico': idAnioAcademico,
      if (idUsuarioActualizacion != null)
        'id_usuario_actualizacion': idUsuarioActualizacion,
      if (idUsuarioCreacion != null) 'id_usuario_creacion': idUsuarioCreacion,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (fechaActualizacion != null) 'fecha_actualizacion': fechaActualizacion,
    });
  }

  HorarioProgramaCompanion copyWith(
      {Value<int>? idHorarioPrograma,
      Value<int?>? idHorario,
      Value<int?>? activo,
      Value<int?>? idProgramaEducativo,
      Value<int?>? idAnioAcademico,
      Value<int?>? idUsuarioActualizacion,
      Value<int?>? idUsuarioCreacion,
      Value<String?>? fechaCreacion,
      Value<String?>? fechaActualizacion}) {
    return HorarioProgramaCompanion(
      idHorarioPrograma: idHorarioPrograma ?? this.idHorarioPrograma,
      idHorario: idHorario ?? this.idHorario,
      activo: activo ?? this.activo,
      idProgramaEducativo: idProgramaEducativo ?? this.idProgramaEducativo,
      idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
      idUsuarioActualizacion:
          idUsuarioActualizacion ?? this.idUsuarioActualizacion,
      idUsuarioCreacion: idUsuarioCreacion ?? this.idUsuarioCreacion,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      fechaActualizacion: fechaActualizacion ?? this.fechaActualizacion,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idHorarioPrograma.present) {
      map['id_horario_programa'] = Variable<int>(idHorarioPrograma.value);
    }
    if (idHorario.present) {
      map['id_horario'] = Variable<int?>(idHorario.value);
    }
    if (activo.present) {
      map['activo'] = Variable<int?>(activo.value);
    }
    if (idProgramaEducativo.present) {
      map['id_programa_educativo'] = Variable<int?>(idProgramaEducativo.value);
    }
    if (idAnioAcademico.present) {
      map['id_anio_academico'] = Variable<int?>(idAnioAcademico.value);
    }
    if (idUsuarioActualizacion.present) {
      map['id_usuario_actualizacion'] =
          Variable<int?>(idUsuarioActualizacion.value);
    }
    if (idUsuarioCreacion.present) {
      map['id_usuario_creacion'] = Variable<int?>(idUsuarioCreacion.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<String?>(fechaCreacion.value);
    }
    if (fechaActualizacion.present) {
      map['fecha_actualizacion'] = Variable<String?>(fechaActualizacion.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HorarioProgramaCompanion(')
          ..write('idHorarioPrograma: $idHorarioPrograma, ')
          ..write('idHorario: $idHorario, ')
          ..write('activo: $activo, ')
          ..write('idProgramaEducativo: $idProgramaEducativo, ')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('idUsuarioActualizacion: $idUsuarioActualizacion, ')
          ..write('idUsuarioCreacion: $idUsuarioCreacion, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('fechaActualizacion: $fechaActualizacion')
          ..write(')'))
        .toString();
  }
}

class $HorarioProgramaTable extends HorarioPrograma
    with TableInfo<$HorarioProgramaTable, HorarioProgramaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $HorarioProgramaTable(this._db, [this._alias]);
  final VerificationMeta _idHorarioProgramaMeta =
      const VerificationMeta('idHorarioPrograma');
  late final GeneratedColumn<int?> idHorarioPrograma = GeneratedColumn<int?>(
      'id_horario_programa', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idHorarioMeta = const VerificationMeta('idHorario');
  late final GeneratedColumn<int?> idHorario = GeneratedColumn<int?>(
      'id_horario', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _activoMeta = const VerificationMeta('activo');
  late final GeneratedColumn<int?> activo = GeneratedColumn<int?>(
      'activo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idProgramaEducativoMeta =
      const VerificationMeta('idProgramaEducativo');
  late final GeneratedColumn<int?> idProgramaEducativo = GeneratedColumn<int?>(
      'id_programa_educativo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idAnioAcademicoMeta =
      const VerificationMeta('idAnioAcademico');
  late final GeneratedColumn<int?> idAnioAcademico = GeneratedColumn<int?>(
      'id_anio_academico', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idUsuarioActualizacionMeta =
      const VerificationMeta('idUsuarioActualizacion');
  late final GeneratedColumn<int?> idUsuarioActualizacion =
      GeneratedColumn<int?>('id_usuario_actualizacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idUsuarioCreacionMeta =
      const VerificationMeta('idUsuarioCreacion');
  late final GeneratedColumn<int?> idUsuarioCreacion = GeneratedColumn<int?>(
      'id_usuario_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<String?> fechaCreacion = GeneratedColumn<String?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaActualizacionMeta =
      const VerificationMeta('fechaActualizacion');
  late final GeneratedColumn<String?> fechaActualizacion =
      GeneratedColumn<String?>('fecha_actualizacion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        idHorarioPrograma,
        idHorario,
        activo,
        idProgramaEducativo,
        idAnioAcademico,
        idUsuarioActualizacion,
        idUsuarioCreacion,
        fechaCreacion,
        fechaActualizacion
      ];
  @override
  String get aliasedName => _alias ?? 'horario_programa';
  @override
  String get actualTableName => 'horario_programa';
  @override
  VerificationContext validateIntegrity(
      Insertable<HorarioProgramaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_horario_programa')) {
      context.handle(
          _idHorarioProgramaMeta,
          idHorarioPrograma.isAcceptableOrUnknown(
              data['id_horario_programa']!, _idHorarioProgramaMeta));
    }
    if (data.containsKey('id_horario')) {
      context.handle(_idHorarioMeta,
          idHorario.isAcceptableOrUnknown(data['id_horario']!, _idHorarioMeta));
    }
    if (data.containsKey('activo')) {
      context.handle(_activoMeta,
          activo.isAcceptableOrUnknown(data['activo']!, _activoMeta));
    }
    if (data.containsKey('id_programa_educativo')) {
      context.handle(
          _idProgramaEducativoMeta,
          idProgramaEducativo.isAcceptableOrUnknown(
              data['id_programa_educativo']!, _idProgramaEducativoMeta));
    }
    if (data.containsKey('id_anio_academico')) {
      context.handle(
          _idAnioAcademicoMeta,
          idAnioAcademico.isAcceptableOrUnknown(
              data['id_anio_academico']!, _idAnioAcademicoMeta));
    }
    if (data.containsKey('id_usuario_actualizacion')) {
      context.handle(
          _idUsuarioActualizacionMeta,
          idUsuarioActualizacion.isAcceptableOrUnknown(
              data['id_usuario_actualizacion']!, _idUsuarioActualizacionMeta));
    }
    if (data.containsKey('id_usuario_creacion')) {
      context.handle(
          _idUsuarioCreacionMeta,
          idUsuarioCreacion.isAcceptableOrUnknown(
              data['id_usuario_creacion']!, _idUsuarioCreacionMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('fecha_actualizacion')) {
      context.handle(
          _fechaActualizacionMeta,
          fechaActualizacion.isAcceptableOrUnknown(
              data['fecha_actualizacion']!, _fechaActualizacionMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idHorarioPrograma};
  @override
  HorarioProgramaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return HorarioProgramaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $HorarioProgramaTable createAlias(String alias) {
    return $HorarioProgramaTable(_db, alias);
  }
}

class HorarioHoraData extends DataClass implements Insertable<HorarioHoraData> {
  final int idHorarioHora;
  final int? horaId;
  final int? detalleHoraId;
  HorarioHoraData(
      {required this.idHorarioHora, this.horaId, this.detalleHoraId});
  factory HorarioHoraData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return HorarioHoraData(
      idHorarioHora: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_horario_hora'])!,
      horaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hora_id']),
      detalleHoraId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}detalle_hora_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_horario_hora'] = Variable<int>(idHorarioHora);
    if (!nullToAbsent || horaId != null) {
      map['hora_id'] = Variable<int?>(horaId);
    }
    if (!nullToAbsent || detalleHoraId != null) {
      map['detalle_hora_id'] = Variable<int?>(detalleHoraId);
    }
    return map;
  }

  HorarioHoraCompanion toCompanion(bool nullToAbsent) {
    return HorarioHoraCompanion(
      idHorarioHora: Value(idHorarioHora),
      horaId:
          horaId == null && nullToAbsent ? const Value.absent() : Value(horaId),
      detalleHoraId: detalleHoraId == null && nullToAbsent
          ? const Value.absent()
          : Value(detalleHoraId),
    );
  }

  factory HorarioHoraData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return HorarioHoraData(
      idHorarioHora: serializer.fromJson<int>(json['idHorarioHora']),
      horaId: serializer.fromJson<int?>(json['horaId']),
      detalleHoraId: serializer.fromJson<int?>(json['detalleHoraId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idHorarioHora': serializer.toJson<int>(idHorarioHora),
      'horaId': serializer.toJson<int?>(horaId),
      'detalleHoraId': serializer.toJson<int?>(detalleHoraId),
    };
  }

  HorarioHoraData copyWith(
          {int? idHorarioHora, int? horaId, int? detalleHoraId}) =>
      HorarioHoraData(
        idHorarioHora: idHorarioHora ?? this.idHorarioHora,
        horaId: horaId ?? this.horaId,
        detalleHoraId: detalleHoraId ?? this.detalleHoraId,
      );
  @override
  String toString() {
    return (StringBuffer('HorarioHoraData(')
          ..write('idHorarioHora: $idHorarioHora, ')
          ..write('horaId: $horaId, ')
          ..write('detalleHoraId: $detalleHoraId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      idHorarioHora.hashCode, $mrjc(horaId.hashCode, detalleHoraId.hashCode)));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HorarioHoraData &&
          other.idHorarioHora == this.idHorarioHora &&
          other.horaId == this.horaId &&
          other.detalleHoraId == this.detalleHoraId);
}

class HorarioHoraCompanion extends UpdateCompanion<HorarioHoraData> {
  final Value<int> idHorarioHora;
  final Value<int?> horaId;
  final Value<int?> detalleHoraId;
  const HorarioHoraCompanion({
    this.idHorarioHora = const Value.absent(),
    this.horaId = const Value.absent(),
    this.detalleHoraId = const Value.absent(),
  });
  HorarioHoraCompanion.insert({
    this.idHorarioHora = const Value.absent(),
    this.horaId = const Value.absent(),
    this.detalleHoraId = const Value.absent(),
  });
  static Insertable<HorarioHoraData> custom({
    Expression<int>? idHorarioHora,
    Expression<int?>? horaId,
    Expression<int?>? detalleHoraId,
  }) {
    return RawValuesInsertable({
      if (idHorarioHora != null) 'id_horario_hora': idHorarioHora,
      if (horaId != null) 'hora_id': horaId,
      if (detalleHoraId != null) 'detalle_hora_id': detalleHoraId,
    });
  }

  HorarioHoraCompanion copyWith(
      {Value<int>? idHorarioHora,
      Value<int?>? horaId,
      Value<int?>? detalleHoraId}) {
    return HorarioHoraCompanion(
      idHorarioHora: idHorarioHora ?? this.idHorarioHora,
      horaId: horaId ?? this.horaId,
      detalleHoraId: detalleHoraId ?? this.detalleHoraId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idHorarioHora.present) {
      map['id_horario_hora'] = Variable<int>(idHorarioHora.value);
    }
    if (horaId.present) {
      map['hora_id'] = Variable<int?>(horaId.value);
    }
    if (detalleHoraId.present) {
      map['detalle_hora_id'] = Variable<int?>(detalleHoraId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HorarioHoraCompanion(')
          ..write('idHorarioHora: $idHorarioHora, ')
          ..write('horaId: $horaId, ')
          ..write('detalleHoraId: $detalleHoraId')
          ..write(')'))
        .toString();
  }
}

class $HorarioHoraTable extends HorarioHora
    with TableInfo<$HorarioHoraTable, HorarioHoraData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $HorarioHoraTable(this._db, [this._alias]);
  final VerificationMeta _idHorarioHoraMeta =
      const VerificationMeta('idHorarioHora');
  late final GeneratedColumn<int?> idHorarioHora = GeneratedColumn<int?>(
      'id_horario_hora', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _horaIdMeta = const VerificationMeta('horaId');
  late final GeneratedColumn<int?> horaId = GeneratedColumn<int?>(
      'hora_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _detalleHoraIdMeta =
      const VerificationMeta('detalleHoraId');
  late final GeneratedColumn<int?> detalleHoraId = GeneratedColumn<int?>(
      'detalle_hora_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [idHorarioHora, horaId, detalleHoraId];
  @override
  String get aliasedName => _alias ?? 'horario_hora';
  @override
  String get actualTableName => 'horario_hora';
  @override
  VerificationContext validateIntegrity(Insertable<HorarioHoraData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_horario_hora')) {
      context.handle(
          _idHorarioHoraMeta,
          idHorarioHora.isAcceptableOrUnknown(
              data['id_horario_hora']!, _idHorarioHoraMeta));
    }
    if (data.containsKey('hora_id')) {
      context.handle(_horaIdMeta,
          horaId.isAcceptableOrUnknown(data['hora_id']!, _horaIdMeta));
    }
    if (data.containsKey('detalle_hora_id')) {
      context.handle(
          _detalleHoraIdMeta,
          detalleHoraId.isAcceptableOrUnknown(
              data['detalle_hora_id']!, _detalleHoraIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idHorarioHora};
  @override
  HorarioHoraData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return HorarioHoraData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $HorarioHoraTable createAlias(String alias) {
    return $HorarioHoraTable(_db, alias);
  }
}

class DetalleHorarioData extends DataClass
    implements Insertable<DetalleHorarioData> {
  final int? idDetalleHorario;
  final int? idTipoHora;
  final int? idTipoTurno;
  final String? horaInicio;
  final String? horaFin;
  final int? idHorarioDia;
  final int? timeChange;
  DetalleHorarioData(
      {this.idDetalleHorario,
      this.idTipoHora,
      this.idTipoTurno,
      this.horaInicio,
      this.horaFin,
      this.idHorarioDia,
      this.timeChange});
  factory DetalleHorarioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return DetalleHorarioData(
      idDetalleHorario: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_detalle_horario']),
      idTipoHora: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_tipo_hora']),
      idTipoTurno: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_tipo_turno']),
      horaInicio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hora_inicio']),
      horaFin: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hora_fin']),
      idHorarioDia: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_horario_dia']),
      timeChange: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}time_change']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || idDetalleHorario != null) {
      map['id_detalle_horario'] = Variable<int?>(idDetalleHorario);
    }
    if (!nullToAbsent || idTipoHora != null) {
      map['id_tipo_hora'] = Variable<int?>(idTipoHora);
    }
    if (!nullToAbsent || idTipoTurno != null) {
      map['id_tipo_turno'] = Variable<int?>(idTipoTurno);
    }
    if (!nullToAbsent || horaInicio != null) {
      map['hora_inicio'] = Variable<String?>(horaInicio);
    }
    if (!nullToAbsent || horaFin != null) {
      map['hora_fin'] = Variable<String?>(horaFin);
    }
    if (!nullToAbsent || idHorarioDia != null) {
      map['id_horario_dia'] = Variable<int?>(idHorarioDia);
    }
    if (!nullToAbsent || timeChange != null) {
      map['time_change'] = Variable<int?>(timeChange);
    }
    return map;
  }

  DetalleHorarioCompanion toCompanion(bool nullToAbsent) {
    return DetalleHorarioCompanion(
      idDetalleHorario: idDetalleHorario == null && nullToAbsent
          ? const Value.absent()
          : Value(idDetalleHorario),
      idTipoHora: idTipoHora == null && nullToAbsent
          ? const Value.absent()
          : Value(idTipoHora),
      idTipoTurno: idTipoTurno == null && nullToAbsent
          ? const Value.absent()
          : Value(idTipoTurno),
      horaInicio: horaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(horaInicio),
      horaFin: horaFin == null && nullToAbsent
          ? const Value.absent()
          : Value(horaFin),
      idHorarioDia: idHorarioDia == null && nullToAbsent
          ? const Value.absent()
          : Value(idHorarioDia),
      timeChange: timeChange == null && nullToAbsent
          ? const Value.absent()
          : Value(timeChange),
    );
  }

  factory DetalleHorarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return DetalleHorarioData(
      idDetalleHorario: serializer.fromJson<int?>(json['idDetalleHorario']),
      idTipoHora: serializer.fromJson<int?>(json['idTipoHora']),
      idTipoTurno: serializer.fromJson<int?>(json['idTipoTurno']),
      horaInicio: serializer.fromJson<String?>(json['horaInicio']),
      horaFin: serializer.fromJson<String?>(json['horaFin']),
      idHorarioDia: serializer.fromJson<int?>(json['idHorarioDia']),
      timeChange: serializer.fromJson<int?>(json['timeChange']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idDetalleHorario': serializer.toJson<int?>(idDetalleHorario),
      'idTipoHora': serializer.toJson<int?>(idTipoHora),
      'idTipoTurno': serializer.toJson<int?>(idTipoTurno),
      'horaInicio': serializer.toJson<String?>(horaInicio),
      'horaFin': serializer.toJson<String?>(horaFin),
      'idHorarioDia': serializer.toJson<int?>(idHorarioDia),
      'timeChange': serializer.toJson<int?>(timeChange),
    };
  }

  DetalleHorarioData copyWith(
          {int? idDetalleHorario,
          int? idTipoHora,
          int? idTipoTurno,
          String? horaInicio,
          String? horaFin,
          int? idHorarioDia,
          int? timeChange}) =>
      DetalleHorarioData(
        idDetalleHorario: idDetalleHorario ?? this.idDetalleHorario,
        idTipoHora: idTipoHora ?? this.idTipoHora,
        idTipoTurno: idTipoTurno ?? this.idTipoTurno,
        horaInicio: horaInicio ?? this.horaInicio,
        horaFin: horaFin ?? this.horaFin,
        idHorarioDia: idHorarioDia ?? this.idHorarioDia,
        timeChange: timeChange ?? this.timeChange,
      );
  @override
  String toString() {
    return (StringBuffer('DetalleHorarioData(')
          ..write('idDetalleHorario: $idDetalleHorario, ')
          ..write('idTipoHora: $idTipoHora, ')
          ..write('idTipoTurno: $idTipoTurno, ')
          ..write('horaInicio: $horaInicio, ')
          ..write('horaFin: $horaFin, ')
          ..write('idHorarioDia: $idHorarioDia, ')
          ..write('timeChange: $timeChange')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      idDetalleHorario.hashCode,
      $mrjc(
          idTipoHora.hashCode,
          $mrjc(
              idTipoTurno.hashCode,
              $mrjc(
                  horaInicio.hashCode,
                  $mrjc(horaFin.hashCode,
                      $mrjc(idHorarioDia.hashCode, timeChange.hashCode)))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DetalleHorarioData &&
          other.idDetalleHorario == this.idDetalleHorario &&
          other.idTipoHora == this.idTipoHora &&
          other.idTipoTurno == this.idTipoTurno &&
          other.horaInicio == this.horaInicio &&
          other.horaFin == this.horaFin &&
          other.idHorarioDia == this.idHorarioDia &&
          other.timeChange == this.timeChange);
}

class DetalleHorarioCompanion extends UpdateCompanion<DetalleHorarioData> {
  final Value<int?> idDetalleHorario;
  final Value<int?> idTipoHora;
  final Value<int?> idTipoTurno;
  final Value<String?> horaInicio;
  final Value<String?> horaFin;
  final Value<int?> idHorarioDia;
  final Value<int?> timeChange;
  const DetalleHorarioCompanion({
    this.idDetalleHorario = const Value.absent(),
    this.idTipoHora = const Value.absent(),
    this.idTipoTurno = const Value.absent(),
    this.horaInicio = const Value.absent(),
    this.horaFin = const Value.absent(),
    this.idHorarioDia = const Value.absent(),
    this.timeChange = const Value.absent(),
  });
  DetalleHorarioCompanion.insert({
    this.idDetalleHorario = const Value.absent(),
    this.idTipoHora = const Value.absent(),
    this.idTipoTurno = const Value.absent(),
    this.horaInicio = const Value.absent(),
    this.horaFin = const Value.absent(),
    this.idHorarioDia = const Value.absent(),
    this.timeChange = const Value.absent(),
  });
  static Insertable<DetalleHorarioData> custom({
    Expression<int?>? idDetalleHorario,
    Expression<int?>? idTipoHora,
    Expression<int?>? idTipoTurno,
    Expression<String?>? horaInicio,
    Expression<String?>? horaFin,
    Expression<int?>? idHorarioDia,
    Expression<int?>? timeChange,
  }) {
    return RawValuesInsertable({
      if (idDetalleHorario != null) 'id_detalle_horario': idDetalleHorario,
      if (idTipoHora != null) 'id_tipo_hora': idTipoHora,
      if (idTipoTurno != null) 'id_tipo_turno': idTipoTurno,
      if (horaInicio != null) 'hora_inicio': horaInicio,
      if (horaFin != null) 'hora_fin': horaFin,
      if (idHorarioDia != null) 'id_horario_dia': idHorarioDia,
      if (timeChange != null) 'time_change': timeChange,
    });
  }

  DetalleHorarioCompanion copyWith(
      {Value<int?>? idDetalleHorario,
      Value<int?>? idTipoHora,
      Value<int?>? idTipoTurno,
      Value<String?>? horaInicio,
      Value<String?>? horaFin,
      Value<int?>? idHorarioDia,
      Value<int?>? timeChange}) {
    return DetalleHorarioCompanion(
      idDetalleHorario: idDetalleHorario ?? this.idDetalleHorario,
      idTipoHora: idTipoHora ?? this.idTipoHora,
      idTipoTurno: idTipoTurno ?? this.idTipoTurno,
      horaInicio: horaInicio ?? this.horaInicio,
      horaFin: horaFin ?? this.horaFin,
      idHorarioDia: idHorarioDia ?? this.idHorarioDia,
      timeChange: timeChange ?? this.timeChange,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idDetalleHorario.present) {
      map['id_detalle_horario'] = Variable<int?>(idDetalleHorario.value);
    }
    if (idTipoHora.present) {
      map['id_tipo_hora'] = Variable<int?>(idTipoHora.value);
    }
    if (idTipoTurno.present) {
      map['id_tipo_turno'] = Variable<int?>(idTipoTurno.value);
    }
    if (horaInicio.present) {
      map['hora_inicio'] = Variable<String?>(horaInicio.value);
    }
    if (horaFin.present) {
      map['hora_fin'] = Variable<String?>(horaFin.value);
    }
    if (idHorarioDia.present) {
      map['id_horario_dia'] = Variable<int?>(idHorarioDia.value);
    }
    if (timeChange.present) {
      map['time_change'] = Variable<int?>(timeChange.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DetalleHorarioCompanion(')
          ..write('idDetalleHorario: $idDetalleHorario, ')
          ..write('idTipoHora: $idTipoHora, ')
          ..write('idTipoTurno: $idTipoTurno, ')
          ..write('horaInicio: $horaInicio, ')
          ..write('horaFin: $horaFin, ')
          ..write('idHorarioDia: $idHorarioDia, ')
          ..write('timeChange: $timeChange')
          ..write(')'))
        .toString();
  }
}

class $DetalleHorarioTable extends DetalleHorario
    with TableInfo<$DetalleHorarioTable, DetalleHorarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $DetalleHorarioTable(this._db, [this._alias]);
  final VerificationMeta _idDetalleHorarioMeta =
      const VerificationMeta('idDetalleHorario');
  late final GeneratedColumn<int?> idDetalleHorario = GeneratedColumn<int?>(
      'id_detalle_horario', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idTipoHoraMeta = const VerificationMeta('idTipoHora');
  late final GeneratedColumn<int?> idTipoHora = GeneratedColumn<int?>(
      'id_tipo_hora', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idTipoTurnoMeta =
      const VerificationMeta('idTipoTurno');
  late final GeneratedColumn<int?> idTipoTurno = GeneratedColumn<int?>(
      'id_tipo_turno', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _horaInicioMeta = const VerificationMeta('horaInicio');
  late final GeneratedColumn<String?> horaInicio = GeneratedColumn<String?>(
      'hora_inicio', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _horaFinMeta = const VerificationMeta('horaFin');
  late final GeneratedColumn<String?> horaFin = GeneratedColumn<String?>(
      'hora_fin', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _idHorarioDiaMeta =
      const VerificationMeta('idHorarioDia');
  late final GeneratedColumn<int?> idHorarioDia = GeneratedColumn<int?>(
      'id_horario_dia', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timeChangeMeta = const VerificationMeta('timeChange');
  late final GeneratedColumn<int?> timeChange = GeneratedColumn<int?>(
      'time_change', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        idDetalleHorario,
        idTipoHora,
        idTipoTurno,
        horaInicio,
        horaFin,
        idHorarioDia,
        timeChange
      ];
  @override
  String get aliasedName => _alias ?? 'detalle_horario';
  @override
  String get actualTableName => 'detalle_horario';
  @override
  VerificationContext validateIntegrity(Insertable<DetalleHorarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_detalle_horario')) {
      context.handle(
          _idDetalleHorarioMeta,
          idDetalleHorario.isAcceptableOrUnknown(
              data['id_detalle_horario']!, _idDetalleHorarioMeta));
    }
    if (data.containsKey('id_tipo_hora')) {
      context.handle(
          _idTipoHoraMeta,
          idTipoHora.isAcceptableOrUnknown(
              data['id_tipo_hora']!, _idTipoHoraMeta));
    }
    if (data.containsKey('id_tipo_turno')) {
      context.handle(
          _idTipoTurnoMeta,
          idTipoTurno.isAcceptableOrUnknown(
              data['id_tipo_turno']!, _idTipoTurnoMeta));
    }
    if (data.containsKey('hora_inicio')) {
      context.handle(
          _horaInicioMeta,
          horaInicio.isAcceptableOrUnknown(
              data['hora_inicio']!, _horaInicioMeta));
    }
    if (data.containsKey('hora_fin')) {
      context.handle(_horaFinMeta,
          horaFin.isAcceptableOrUnknown(data['hora_fin']!, _horaFinMeta));
    }
    if (data.containsKey('id_horario_dia')) {
      context.handle(
          _idHorarioDiaMeta,
          idHorarioDia.isAcceptableOrUnknown(
              data['id_horario_dia']!, _idHorarioDiaMeta));
    }
    if (data.containsKey('time_change')) {
      context.handle(
          _timeChangeMeta,
          timeChange.isAcceptableOrUnknown(
              data['time_change']!, _timeChangeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idDetalleHorario};
  @override
  DetalleHorarioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return DetalleHorarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DetalleHorarioTable createAlias(String alias) {
    return $DetalleHorarioTable(_db, alias);
  }
}

class DiaData extends DataClass implements Insertable<DiaData> {
  final int diaId;
  final String? nombre;
  final bool? estado;
  final String? alias_;
  DiaData({required this.diaId, this.nombre, this.estado, this.alias_});
  factory DiaData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return DiaData(
      diaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}dia_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      alias_: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alias']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['dia_id'] = Variable<int>(diaId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || alias_ != null) {
      map['alias'] = Variable<String?>(alias_);
    }
    return map;
  }

  DiaCompanion toCompanion(bool nullToAbsent) {
    return DiaCompanion(
      diaId: Value(diaId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      alias_:
          alias_ == null && nullToAbsent ? const Value.absent() : Value(alias_),
    );
  }

  factory DiaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return DiaData(
      diaId: serializer.fromJson<int>(json['diaId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      estado: serializer.fromJson<bool?>(json['estado']),
      alias_: serializer.fromJson<String?>(json['alias_']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'diaId': serializer.toJson<int>(diaId),
      'nombre': serializer.toJson<String?>(nombre),
      'estado': serializer.toJson<bool?>(estado),
      'alias_': serializer.toJson<String?>(alias_),
    };
  }

  DiaData copyWith(
          {int? diaId, String? nombre, bool? estado, String? alias_}) =>
      DiaData(
        diaId: diaId ?? this.diaId,
        nombre: nombre ?? this.nombre,
        estado: estado ?? this.estado,
        alias_: alias_ ?? this.alias_,
      );
  @override
  String toString() {
    return (StringBuffer('DiaData(')
          ..write('diaId: $diaId, ')
          ..write('nombre: $nombre, ')
          ..write('estado: $estado, ')
          ..write('alias_: $alias_')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(diaId.hashCode,
      $mrjc(nombre.hashCode, $mrjc(estado.hashCode, alias_.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DiaData &&
          other.diaId == this.diaId &&
          other.nombre == this.nombre &&
          other.estado == this.estado &&
          other.alias_ == this.alias_);
}

class DiaCompanion extends UpdateCompanion<DiaData> {
  final Value<int> diaId;
  final Value<String?> nombre;
  final Value<bool?> estado;
  final Value<String?> alias_;
  const DiaCompanion({
    this.diaId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estado = const Value.absent(),
    this.alias_ = const Value.absent(),
  });
  DiaCompanion.insert({
    this.diaId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estado = const Value.absent(),
    this.alias_ = const Value.absent(),
  });
  static Insertable<DiaData> custom({
    Expression<int>? diaId,
    Expression<String?>? nombre,
    Expression<bool?>? estado,
    Expression<String?>? alias_,
  }) {
    return RawValuesInsertable({
      if (diaId != null) 'dia_id': diaId,
      if (nombre != null) 'nombre': nombre,
      if (estado != null) 'estado': estado,
      if (alias_ != null) 'alias': alias_,
    });
  }

  DiaCompanion copyWith(
      {Value<int>? diaId,
      Value<String?>? nombre,
      Value<bool?>? estado,
      Value<String?>? alias_}) {
    return DiaCompanion(
      diaId: diaId ?? this.diaId,
      nombre: nombre ?? this.nombre,
      estado: estado ?? this.estado,
      alias_: alias_ ?? this.alias_,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (diaId.present) {
      map['dia_id'] = Variable<int>(diaId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (alias_.present) {
      map['alias'] = Variable<String?>(alias_.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DiaCompanion(')
          ..write('diaId: $diaId, ')
          ..write('nombre: $nombre, ')
          ..write('estado: $estado, ')
          ..write('alias_: $alias_')
          ..write(')'))
        .toString();
  }
}

class $DiaTable extends Dia with TableInfo<$DiaTable, DiaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $DiaTable(this._db, [this._alias]);
  final VerificationMeta _diaIdMeta = const VerificationMeta('diaId');
  late final GeneratedColumn<int?> diaId = GeneratedColumn<int?>(
      'dia_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _alias_Meta = const VerificationMeta('alias_');
  late final GeneratedColumn<String?> alias_ = GeneratedColumn<String?>(
      'alias', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [diaId, nombre, estado, alias_];
  @override
  String get aliasedName => _alias ?? 'dia';
  @override
  String get actualTableName => 'dia';
  @override
  VerificationContext validateIntegrity(Insertable<DiaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('dia_id')) {
      context.handle(
          _diaIdMeta, diaId.isAcceptableOrUnknown(data['dia_id']!, _diaIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('alias')) {
      context.handle(_alias_Meta,
          alias_.isAcceptableOrUnknown(data['alias']!, _alias_Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {diaId};
  @override
  DiaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return DiaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DiaTable createAlias(String alias) {
    return $DiaTable(_db, alias);
  }
}

class HorarioDiaData extends DataClass implements Insertable<HorarioDiaData> {
  final int idHorarioDia;
  final int? idHorario;
  final int? idDia;
  HorarioDiaData({required this.idHorarioDia, this.idHorario, this.idDia});
  factory HorarioDiaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return HorarioDiaData(
      idHorarioDia: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_horario_dia'])!,
      idHorario: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_horario']),
      idDia: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_dia']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_horario_dia'] = Variable<int>(idHorarioDia);
    if (!nullToAbsent || idHorario != null) {
      map['id_horario'] = Variable<int?>(idHorario);
    }
    if (!nullToAbsent || idDia != null) {
      map['id_dia'] = Variable<int?>(idDia);
    }
    return map;
  }

  HorarioDiaCompanion toCompanion(bool nullToAbsent) {
    return HorarioDiaCompanion(
      idHorarioDia: Value(idHorarioDia),
      idHorario: idHorario == null && nullToAbsent
          ? const Value.absent()
          : Value(idHorario),
      idDia:
          idDia == null && nullToAbsent ? const Value.absent() : Value(idDia),
    );
  }

  factory HorarioDiaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return HorarioDiaData(
      idHorarioDia: serializer.fromJson<int>(json['idHorarioDia']),
      idHorario: serializer.fromJson<int?>(json['idHorario']),
      idDia: serializer.fromJson<int?>(json['idDia']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idHorarioDia': serializer.toJson<int>(idHorarioDia),
      'idHorario': serializer.toJson<int?>(idHorario),
      'idDia': serializer.toJson<int?>(idDia),
    };
  }

  HorarioDiaData copyWith({int? idHorarioDia, int? idHorario, int? idDia}) =>
      HorarioDiaData(
        idHorarioDia: idHorarioDia ?? this.idHorarioDia,
        idHorario: idHorario ?? this.idHorario,
        idDia: idDia ?? this.idDia,
      );
  @override
  String toString() {
    return (StringBuffer('HorarioDiaData(')
          ..write('idHorarioDia: $idHorarioDia, ')
          ..write('idHorario: $idHorario, ')
          ..write('idDia: $idDia')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf(
      $mrjc(idHorarioDia.hashCode, $mrjc(idHorario.hashCode, idDia.hashCode)));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HorarioDiaData &&
          other.idHorarioDia == this.idHorarioDia &&
          other.idHorario == this.idHorario &&
          other.idDia == this.idDia);
}

class HorarioDiaCompanion extends UpdateCompanion<HorarioDiaData> {
  final Value<int> idHorarioDia;
  final Value<int?> idHorario;
  final Value<int?> idDia;
  const HorarioDiaCompanion({
    this.idHorarioDia = const Value.absent(),
    this.idHorario = const Value.absent(),
    this.idDia = const Value.absent(),
  });
  HorarioDiaCompanion.insert({
    required int idHorarioDia,
    this.idHorario = const Value.absent(),
    this.idDia = const Value.absent(),
  }) : idHorarioDia = Value(idHorarioDia);
  static Insertable<HorarioDiaData> custom({
    Expression<int>? idHorarioDia,
    Expression<int?>? idHorario,
    Expression<int?>? idDia,
  }) {
    return RawValuesInsertable({
      if (idHorarioDia != null) 'id_horario_dia': idHorarioDia,
      if (idHorario != null) 'id_horario': idHorario,
      if (idDia != null) 'id_dia': idDia,
    });
  }

  HorarioDiaCompanion copyWith(
      {Value<int>? idHorarioDia, Value<int?>? idHorario, Value<int?>? idDia}) {
    return HorarioDiaCompanion(
      idHorarioDia: idHorarioDia ?? this.idHorarioDia,
      idHorario: idHorario ?? this.idHorario,
      idDia: idDia ?? this.idDia,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idHorarioDia.present) {
      map['id_horario_dia'] = Variable<int>(idHorarioDia.value);
    }
    if (idHorario.present) {
      map['id_horario'] = Variable<int?>(idHorario.value);
    }
    if (idDia.present) {
      map['id_dia'] = Variable<int?>(idDia.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HorarioDiaCompanion(')
          ..write('idHorarioDia: $idHorarioDia, ')
          ..write('idHorario: $idHorario, ')
          ..write('idDia: $idDia')
          ..write(')'))
        .toString();
  }
}

class $HorarioDiaTable extends HorarioDia
    with TableInfo<$HorarioDiaTable, HorarioDiaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $HorarioDiaTable(this._db, [this._alias]);
  final VerificationMeta _idHorarioDiaMeta =
      const VerificationMeta('idHorarioDia');
  late final GeneratedColumn<int?> idHorarioDia = GeneratedColumn<int?>(
      'id_horario_dia', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _idHorarioMeta = const VerificationMeta('idHorario');
  late final GeneratedColumn<int?> idHorario = GeneratedColumn<int?>(
      'id_horario', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idDiaMeta = const VerificationMeta('idDia');
  late final GeneratedColumn<int?> idDia = GeneratedColumn<int?>(
      'id_dia', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [idHorarioDia, idHorario, idDia];
  @override
  String get aliasedName => _alias ?? 'horario_dia';
  @override
  String get actualTableName => 'horario_dia';
  @override
  VerificationContext validateIntegrity(Insertable<HorarioDiaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_horario_dia')) {
      context.handle(
          _idHorarioDiaMeta,
          idHorarioDia.isAcceptableOrUnknown(
              data['id_horario_dia']!, _idHorarioDiaMeta));
    } else if (isInserting) {
      context.missing(_idHorarioDiaMeta);
    }
    if (data.containsKey('id_horario')) {
      context.handle(_idHorarioMeta,
          idHorario.isAcceptableOrUnknown(data['id_horario']!, _idHorarioMeta));
    }
    if (data.containsKey('id_dia')) {
      context.handle(
          _idDiaMeta, idDia.isAcceptableOrUnknown(data['id_dia']!, _idDiaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idDia};
  @override
  HorarioDiaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return HorarioDiaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $HorarioDiaTable createAlias(String alias) {
    return $HorarioDiaTable(_db, alias);
  }
}

class CursosDetHorarioData extends DataClass
    implements Insertable<CursosDetHorarioData> {
  final int idCursosDetHorario;
  final int? idDetHorario;
  final int? idCargaCurso;
  CursosDetHorarioData(
      {required this.idCursosDetHorario, this.idDetHorario, this.idCargaCurso});
  factory CursosDetHorarioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CursosDetHorarioData(
      idCursosDetHorario: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}id_cursos_det_horario'])!,
      idDetHorario: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_det_horario']),
      idCargaCurso: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_carga_curso']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_cursos_det_horario'] = Variable<int>(idCursosDetHorario);
    if (!nullToAbsent || idDetHorario != null) {
      map['id_det_horario'] = Variable<int?>(idDetHorario);
    }
    if (!nullToAbsent || idCargaCurso != null) {
      map['id_carga_curso'] = Variable<int?>(idCargaCurso);
    }
    return map;
  }

  CursosDetHorarioCompanion toCompanion(bool nullToAbsent) {
    return CursosDetHorarioCompanion(
      idCursosDetHorario: Value(idCursosDetHorario),
      idDetHorario: idDetHorario == null && nullToAbsent
          ? const Value.absent()
          : Value(idDetHorario),
      idCargaCurso: idCargaCurso == null && nullToAbsent
          ? const Value.absent()
          : Value(idCargaCurso),
    );
  }

  factory CursosDetHorarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CursosDetHorarioData(
      idCursosDetHorario: serializer.fromJson<int>(json['idCursosDetHorario']),
      idDetHorario: serializer.fromJson<int?>(json['idDetHorario']),
      idCargaCurso: serializer.fromJson<int?>(json['idCargaCurso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idCursosDetHorario': serializer.toJson<int>(idCursosDetHorario),
      'idDetHorario': serializer.toJson<int?>(idDetHorario),
      'idCargaCurso': serializer.toJson<int?>(idCargaCurso),
    };
  }

  CursosDetHorarioData copyWith(
          {int? idCursosDetHorario, int? idDetHorario, int? idCargaCurso}) =>
      CursosDetHorarioData(
        idCursosDetHorario: idCursosDetHorario ?? this.idCursosDetHorario,
        idDetHorario: idDetHorario ?? this.idDetHorario,
        idCargaCurso: idCargaCurso ?? this.idCargaCurso,
      );
  @override
  String toString() {
    return (StringBuffer('CursosDetHorarioData(')
          ..write('idCursosDetHorario: $idCursosDetHorario, ')
          ..write('idDetHorario: $idDetHorario, ')
          ..write('idCargaCurso: $idCargaCurso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(idCursosDetHorario.hashCode,
      $mrjc(idDetHorario.hashCode, idCargaCurso.hashCode)));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CursosDetHorarioData &&
          other.idCursosDetHorario == this.idCursosDetHorario &&
          other.idDetHorario == this.idDetHorario &&
          other.idCargaCurso == this.idCargaCurso);
}

class CursosDetHorarioCompanion extends UpdateCompanion<CursosDetHorarioData> {
  final Value<int> idCursosDetHorario;
  final Value<int?> idDetHorario;
  final Value<int?> idCargaCurso;
  const CursosDetHorarioCompanion({
    this.idCursosDetHorario = const Value.absent(),
    this.idDetHorario = const Value.absent(),
    this.idCargaCurso = const Value.absent(),
  });
  CursosDetHorarioCompanion.insert({
    this.idCursosDetHorario = const Value.absent(),
    this.idDetHorario = const Value.absent(),
    this.idCargaCurso = const Value.absent(),
  });
  static Insertable<CursosDetHorarioData> custom({
    Expression<int>? idCursosDetHorario,
    Expression<int?>? idDetHorario,
    Expression<int?>? idCargaCurso,
  }) {
    return RawValuesInsertable({
      if (idCursosDetHorario != null)
        'id_cursos_det_horario': idCursosDetHorario,
      if (idDetHorario != null) 'id_det_horario': idDetHorario,
      if (idCargaCurso != null) 'id_carga_curso': idCargaCurso,
    });
  }

  CursosDetHorarioCompanion copyWith(
      {Value<int>? idCursosDetHorario,
      Value<int?>? idDetHorario,
      Value<int?>? idCargaCurso}) {
    return CursosDetHorarioCompanion(
      idCursosDetHorario: idCursosDetHorario ?? this.idCursosDetHorario,
      idDetHorario: idDetHorario ?? this.idDetHorario,
      idCargaCurso: idCargaCurso ?? this.idCargaCurso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idCursosDetHorario.present) {
      map['id_cursos_det_horario'] = Variable<int>(idCursosDetHorario.value);
    }
    if (idDetHorario.present) {
      map['id_det_horario'] = Variable<int?>(idDetHorario.value);
    }
    if (idCargaCurso.present) {
      map['id_carga_curso'] = Variable<int?>(idCargaCurso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CursosDetHorarioCompanion(')
          ..write('idCursosDetHorario: $idCursosDetHorario, ')
          ..write('idDetHorario: $idDetHorario, ')
          ..write('idCargaCurso: $idCargaCurso')
          ..write(')'))
        .toString();
  }
}

class $CursosDetHorarioTable extends CursosDetHorario
    with TableInfo<$CursosDetHorarioTable, CursosDetHorarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CursosDetHorarioTable(this._db, [this._alias]);
  final VerificationMeta _idCursosDetHorarioMeta =
      const VerificationMeta('idCursosDetHorario');
  late final GeneratedColumn<int?> idCursosDetHorario = GeneratedColumn<int?>(
      'id_cursos_det_horario', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idDetHorarioMeta =
      const VerificationMeta('idDetHorario');
  late final GeneratedColumn<int?> idDetHorario = GeneratedColumn<int?>(
      'id_det_horario', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idCargaCursoMeta =
      const VerificationMeta('idCargaCurso');
  late final GeneratedColumn<int?> idCargaCurso = GeneratedColumn<int?>(
      'id_carga_curso', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [idCursosDetHorario, idDetHorario, idCargaCurso];
  @override
  String get aliasedName => _alias ?? 'cursos_det_horario';
  @override
  String get actualTableName => 'cursos_det_horario';
  @override
  VerificationContext validateIntegrity(
      Insertable<CursosDetHorarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_cursos_det_horario')) {
      context.handle(
          _idCursosDetHorarioMeta,
          idCursosDetHorario.isAcceptableOrUnknown(
              data['id_cursos_det_horario']!, _idCursosDetHorarioMeta));
    }
    if (data.containsKey('id_det_horario')) {
      context.handle(
          _idDetHorarioMeta,
          idDetHorario.isAcceptableOrUnknown(
              data['id_det_horario']!, _idDetHorarioMeta));
    }
    if (data.containsKey('id_carga_curso')) {
      context.handle(
          _idCargaCursoMeta,
          idCargaCurso.isAcceptableOrUnknown(
              data['id_carga_curso']!, _idCargaCursoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idCursosDetHorario};
  @override
  CursosDetHorarioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CursosDetHorarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CursosDetHorarioTable createAlias(String alias) {
    return $CursosDetHorarioTable(_db, alias);
  }
}

class HorarioData extends DataClass implements Insertable<HorarioData> {
  final int idHorario;
  final String? nombre;
  final String? descripcion;
  final String? fecCreacion;
  final String? fecActualizacion;
  final bool? estado;
  final int? idUsuario;
  final int? entidadId;
  final int? georeferenciaId;
  final int? organigramaId;
  HorarioData(
      {required this.idHorario,
      this.nombre,
      this.descripcion,
      this.fecCreacion,
      this.fecActualizacion,
      this.estado,
      this.idUsuario,
      this.entidadId,
      this.georeferenciaId,
      this.organigramaId});
  factory HorarioData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return HorarioData(
      idHorario: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_horario'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      fecCreacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fec_creacion']),
      fecActualizacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fec_actualizacion']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      idUsuario: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_usuario']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      organigramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}organigrama_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_horario'] = Variable<int>(idHorario);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || fecCreacion != null) {
      map['fec_creacion'] = Variable<String?>(fecCreacion);
    }
    if (!nullToAbsent || fecActualizacion != null) {
      map['fec_actualizacion'] = Variable<String?>(fecActualizacion);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || idUsuario != null) {
      map['id_usuario'] = Variable<int?>(idUsuario);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || organigramaId != null) {
      map['organigrama_id'] = Variable<int?>(organigramaId);
    }
    return map;
  }

  HorarioCompanion toCompanion(bool nullToAbsent) {
    return HorarioCompanion(
      idHorario: Value(idHorario),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      fecCreacion: fecCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fecCreacion),
      fecActualizacion: fecActualizacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fecActualizacion),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      idUsuario: idUsuario == null && nullToAbsent
          ? const Value.absent()
          : Value(idUsuario),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      organigramaId: organigramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(organigramaId),
    );
  }

  factory HorarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return HorarioData(
      idHorario: serializer.fromJson<int>(json['idHorario']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      fecCreacion: serializer.fromJson<String?>(json['fecCreacion']),
      fecActualizacion: serializer.fromJson<String?>(json['fecActualizacion']),
      estado: serializer.fromJson<bool?>(json['estado']),
      idUsuario: serializer.fromJson<int?>(json['idUsuario']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      organigramaId: serializer.fromJson<int?>(json['organigramaId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idHorario': serializer.toJson<int>(idHorario),
      'nombre': serializer.toJson<String?>(nombre),
      'descripcion': serializer.toJson<String?>(descripcion),
      'fecCreacion': serializer.toJson<String?>(fecCreacion),
      'fecActualizacion': serializer.toJson<String?>(fecActualizacion),
      'estado': serializer.toJson<bool?>(estado),
      'idUsuario': serializer.toJson<int?>(idUsuario),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'organigramaId': serializer.toJson<int?>(organigramaId),
    };
  }

  HorarioData copyWith(
          {int? idHorario,
          String? nombre,
          String? descripcion,
          String? fecCreacion,
          String? fecActualizacion,
          bool? estado,
          int? idUsuario,
          int? entidadId,
          int? georeferenciaId,
          int? organigramaId}) =>
      HorarioData(
        idHorario: idHorario ?? this.idHorario,
        nombre: nombre ?? this.nombre,
        descripcion: descripcion ?? this.descripcion,
        fecCreacion: fecCreacion ?? this.fecCreacion,
        fecActualizacion: fecActualizacion ?? this.fecActualizacion,
        estado: estado ?? this.estado,
        idUsuario: idUsuario ?? this.idUsuario,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        organigramaId: organigramaId ?? this.organigramaId,
      );
  @override
  String toString() {
    return (StringBuffer('HorarioData(')
          ..write('idHorario: $idHorario, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('fecCreacion: $fecCreacion, ')
          ..write('fecActualizacion: $fecActualizacion, ')
          ..write('estado: $estado, ')
          ..write('idUsuario: $idUsuario, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      idHorario.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              descripcion.hashCode,
              $mrjc(
                  fecCreacion.hashCode,
                  $mrjc(
                      fecActualizacion.hashCode,
                      $mrjc(
                          estado.hashCode,
                          $mrjc(
                              idUsuario.hashCode,
                              $mrjc(
                                  entidadId.hashCode,
                                  $mrjc(georeferenciaId.hashCode,
                                      organigramaId.hashCode))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HorarioData &&
          other.idHorario == this.idHorario &&
          other.nombre == this.nombre &&
          other.descripcion == this.descripcion &&
          other.fecCreacion == this.fecCreacion &&
          other.fecActualizacion == this.fecActualizacion &&
          other.estado == this.estado &&
          other.idUsuario == this.idUsuario &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.organigramaId == this.organigramaId);
}

class HorarioCompanion extends UpdateCompanion<HorarioData> {
  final Value<int> idHorario;
  final Value<String?> nombre;
  final Value<String?> descripcion;
  final Value<String?> fecCreacion;
  final Value<String?> fecActualizacion;
  final Value<bool?> estado;
  final Value<int?> idUsuario;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  final Value<int?> organigramaId;
  const HorarioCompanion({
    this.idHorario = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.fecCreacion = const Value.absent(),
    this.fecActualizacion = const Value.absent(),
    this.estado = const Value.absent(),
    this.idUsuario = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
  });
  HorarioCompanion.insert({
    this.idHorario = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.fecCreacion = const Value.absent(),
    this.fecActualizacion = const Value.absent(),
    this.estado = const Value.absent(),
    this.idUsuario = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
  });
  static Insertable<HorarioData> custom({
    Expression<int>? idHorario,
    Expression<String?>? nombre,
    Expression<String?>? descripcion,
    Expression<String?>? fecCreacion,
    Expression<String?>? fecActualizacion,
    Expression<bool?>? estado,
    Expression<int?>? idUsuario,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
    Expression<int?>? organigramaId,
  }) {
    return RawValuesInsertable({
      if (idHorario != null) 'id_horario': idHorario,
      if (nombre != null) 'nombre': nombre,
      if (descripcion != null) 'descripcion': descripcion,
      if (fecCreacion != null) 'fec_creacion': fecCreacion,
      if (fecActualizacion != null) 'fec_actualizacion': fecActualizacion,
      if (estado != null) 'estado': estado,
      if (idUsuario != null) 'id_usuario': idUsuario,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (organigramaId != null) 'organigrama_id': organigramaId,
    });
  }

  HorarioCompanion copyWith(
      {Value<int>? idHorario,
      Value<String?>? nombre,
      Value<String?>? descripcion,
      Value<String?>? fecCreacion,
      Value<String?>? fecActualizacion,
      Value<bool?>? estado,
      Value<int?>? idUsuario,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId,
      Value<int?>? organigramaId}) {
    return HorarioCompanion(
      idHorario: idHorario ?? this.idHorario,
      nombre: nombre ?? this.nombre,
      descripcion: descripcion ?? this.descripcion,
      fecCreacion: fecCreacion ?? this.fecCreacion,
      fecActualizacion: fecActualizacion ?? this.fecActualizacion,
      estado: estado ?? this.estado,
      idUsuario: idUsuario ?? this.idUsuario,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      organigramaId: organigramaId ?? this.organigramaId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idHorario.present) {
      map['id_horario'] = Variable<int>(idHorario.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (fecCreacion.present) {
      map['fec_creacion'] = Variable<String?>(fecCreacion.value);
    }
    if (fecActualizacion.present) {
      map['fec_actualizacion'] = Variable<String?>(fecActualizacion.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (idUsuario.present) {
      map['id_usuario'] = Variable<int?>(idUsuario.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (organigramaId.present) {
      map['organigrama_id'] = Variable<int?>(organigramaId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HorarioCompanion(')
          ..write('idHorario: $idHorario, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('fecCreacion: $fecCreacion, ')
          ..write('fecActualizacion: $fecActualizacion, ')
          ..write('estado: $estado, ')
          ..write('idUsuario: $idUsuario, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId')
          ..write(')'))
        .toString();
  }
}

class $HorarioTable extends Horario with TableInfo<$HorarioTable, HorarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $HorarioTable(this._db, [this._alias]);
  final VerificationMeta _idHorarioMeta = const VerificationMeta('idHorario');
  late final GeneratedColumn<int?> idHorario = GeneratedColumn<int?>(
      'id_horario', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fecCreacionMeta =
      const VerificationMeta('fecCreacion');
  late final GeneratedColumn<String?> fecCreacion = GeneratedColumn<String?>(
      'fec_creacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fecActualizacionMeta =
      const VerificationMeta('fecActualizacion');
  late final GeneratedColumn<String?> fecActualizacion =
      GeneratedColumn<String?>('fec_actualizacion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _idUsuarioMeta = const VerificationMeta('idUsuario');
  late final GeneratedColumn<int?> idUsuario = GeneratedColumn<int?>(
      'id_usuario', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _organigramaIdMeta =
      const VerificationMeta('organigramaId');
  late final GeneratedColumn<int?> organigramaId = GeneratedColumn<int?>(
      'organigrama_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        idHorario,
        nombre,
        descripcion,
        fecCreacion,
        fecActualizacion,
        estado,
        idUsuario,
        entidadId,
        georeferenciaId,
        organigramaId
      ];
  @override
  String get aliasedName => _alias ?? 'horario';
  @override
  String get actualTableName => 'horario';
  @override
  VerificationContext validateIntegrity(Insertable<HorarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_horario')) {
      context.handle(_idHorarioMeta,
          idHorario.isAcceptableOrUnknown(data['id_horario']!, _idHorarioMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('fec_creacion')) {
      context.handle(
          _fecCreacionMeta,
          fecCreacion.isAcceptableOrUnknown(
              data['fec_creacion']!, _fecCreacionMeta));
    }
    if (data.containsKey('fec_actualizacion')) {
      context.handle(
          _fecActualizacionMeta,
          fecActualizacion.isAcceptableOrUnknown(
              data['fec_actualizacion']!, _fecActualizacionMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('id_usuario')) {
      context.handle(_idUsuarioMeta,
          idUsuario.isAcceptableOrUnknown(data['id_usuario']!, _idUsuarioMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('organigrama_id')) {
      context.handle(
          _organigramaIdMeta,
          organigramaId.isAcceptableOrUnknown(
              data['organigrama_id']!, _organigramaIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idHorario};
  @override
  HorarioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return HorarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $HorarioTable createAlias(String alias) {
    return $HorarioTable(_db, alias);
  }
}

class CalendarioAcademicoData extends DataClass
    implements Insertable<CalendarioAcademicoData> {
  final int calendarioAcademicoId;
  final int? programaEduId;
  final int? idAnioAcademico;
  final int? estadoId;
  CalendarioAcademicoData(
      {required this.calendarioAcademicoId,
      this.programaEduId,
      this.idAnioAcademico,
      this.estadoId});
  factory CalendarioAcademicoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CalendarioAcademicoData(
      calendarioAcademicoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_academico_id'])!,
      programaEduId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}programa_edu_id']),
      idAnioAcademico: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_anio_academico']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['calendario_academico_id'] = Variable<int>(calendarioAcademicoId);
    if (!nullToAbsent || programaEduId != null) {
      map['programa_edu_id'] = Variable<int?>(programaEduId);
    }
    if (!nullToAbsent || idAnioAcademico != null) {
      map['id_anio_academico'] = Variable<int?>(idAnioAcademico);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    return map;
  }

  CalendarioAcademicoCompanion toCompanion(bool nullToAbsent) {
    return CalendarioAcademicoCompanion(
      calendarioAcademicoId: Value(calendarioAcademicoId),
      programaEduId: programaEduId == null && nullToAbsent
          ? const Value.absent()
          : Value(programaEduId),
      idAnioAcademico: idAnioAcademico == null && nullToAbsent
          ? const Value.absent()
          : Value(idAnioAcademico),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
    );
  }

  factory CalendarioAcademicoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CalendarioAcademicoData(
      calendarioAcademicoId:
          serializer.fromJson<int>(json['calendarioAcademicoId']),
      programaEduId: serializer.fromJson<int?>(json['programaEduId']),
      idAnioAcademico: serializer.fromJson<int?>(json['idAnioAcademico']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'calendarioAcademicoId': serializer.toJson<int>(calendarioAcademicoId),
      'programaEduId': serializer.toJson<int?>(programaEduId),
      'idAnioAcademico': serializer.toJson<int?>(idAnioAcademico),
      'estadoId': serializer.toJson<int?>(estadoId),
    };
  }

  CalendarioAcademicoData copyWith(
          {int? calendarioAcademicoId,
          int? programaEduId,
          int? idAnioAcademico,
          int? estadoId}) =>
      CalendarioAcademicoData(
        calendarioAcademicoId:
            calendarioAcademicoId ?? this.calendarioAcademicoId,
        programaEduId: programaEduId ?? this.programaEduId,
        idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
        estadoId: estadoId ?? this.estadoId,
      );
  @override
  String toString() {
    return (StringBuffer('CalendarioAcademicoData(')
          ..write('calendarioAcademicoId: $calendarioAcademicoId, ')
          ..write('programaEduId: $programaEduId, ')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('estadoId: $estadoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      calendarioAcademicoId.hashCode,
      $mrjc(programaEduId.hashCode,
          $mrjc(idAnioAcademico.hashCode, estadoId.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CalendarioAcademicoData &&
          other.calendarioAcademicoId == this.calendarioAcademicoId &&
          other.programaEduId == this.programaEduId &&
          other.idAnioAcademico == this.idAnioAcademico &&
          other.estadoId == this.estadoId);
}

class CalendarioAcademicoCompanion
    extends UpdateCompanion<CalendarioAcademicoData> {
  final Value<int> calendarioAcademicoId;
  final Value<int?> programaEduId;
  final Value<int?> idAnioAcademico;
  final Value<int?> estadoId;
  const CalendarioAcademicoCompanion({
    this.calendarioAcademicoId = const Value.absent(),
    this.programaEduId = const Value.absent(),
    this.idAnioAcademico = const Value.absent(),
    this.estadoId = const Value.absent(),
  });
  CalendarioAcademicoCompanion.insert({
    this.calendarioAcademicoId = const Value.absent(),
    this.programaEduId = const Value.absent(),
    this.idAnioAcademico = const Value.absent(),
    this.estadoId = const Value.absent(),
  });
  static Insertable<CalendarioAcademicoData> custom({
    Expression<int>? calendarioAcademicoId,
    Expression<int?>? programaEduId,
    Expression<int?>? idAnioAcademico,
    Expression<int?>? estadoId,
  }) {
    return RawValuesInsertable({
      if (calendarioAcademicoId != null)
        'calendario_academico_id': calendarioAcademicoId,
      if (programaEduId != null) 'programa_edu_id': programaEduId,
      if (idAnioAcademico != null) 'id_anio_academico': idAnioAcademico,
      if (estadoId != null) 'estado_id': estadoId,
    });
  }

  CalendarioAcademicoCompanion copyWith(
      {Value<int>? calendarioAcademicoId,
      Value<int?>? programaEduId,
      Value<int?>? idAnioAcademico,
      Value<int?>? estadoId}) {
    return CalendarioAcademicoCompanion(
      calendarioAcademicoId:
          calendarioAcademicoId ?? this.calendarioAcademicoId,
      programaEduId: programaEduId ?? this.programaEduId,
      idAnioAcademico: idAnioAcademico ?? this.idAnioAcademico,
      estadoId: estadoId ?? this.estadoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (calendarioAcademicoId.present) {
      map['calendario_academico_id'] =
          Variable<int>(calendarioAcademicoId.value);
    }
    if (programaEduId.present) {
      map['programa_edu_id'] = Variable<int?>(programaEduId.value);
    }
    if (idAnioAcademico.present) {
      map['id_anio_academico'] = Variable<int?>(idAnioAcademico.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CalendarioAcademicoCompanion(')
          ..write('calendarioAcademicoId: $calendarioAcademicoId, ')
          ..write('programaEduId: $programaEduId, ')
          ..write('idAnioAcademico: $idAnioAcademico, ')
          ..write('estadoId: $estadoId')
          ..write(')'))
        .toString();
  }
}

class $CalendarioAcademicoTable extends CalendarioAcademico
    with TableInfo<$CalendarioAcademicoTable, CalendarioAcademicoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CalendarioAcademicoTable(this._db, [this._alias]);
  final VerificationMeta _calendarioAcademicoIdMeta =
      const VerificationMeta('calendarioAcademicoId');
  late final GeneratedColumn<int?> calendarioAcademicoId =
      GeneratedColumn<int?>('calendario_academico_id', aliasedName, false,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _programaEduIdMeta =
      const VerificationMeta('programaEduId');
  late final GeneratedColumn<int?> programaEduId = GeneratedColumn<int?>(
      'programa_edu_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _idAnioAcademicoMeta =
      const VerificationMeta('idAnioAcademico');
  late final GeneratedColumn<int?> idAnioAcademico = GeneratedColumn<int?>(
      'id_anio_academico', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [calendarioAcademicoId, programaEduId, idAnioAcademico, estadoId];
  @override
  String get aliasedName => _alias ?? 'calendario_academico';
  @override
  String get actualTableName => 'calendario_academico';
  @override
  VerificationContext validateIntegrity(
      Insertable<CalendarioAcademicoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('calendario_academico_id')) {
      context.handle(
          _calendarioAcademicoIdMeta,
          calendarioAcademicoId.isAcceptableOrUnknown(
              data['calendario_academico_id']!, _calendarioAcademicoIdMeta));
    }
    if (data.containsKey('programa_edu_id')) {
      context.handle(
          _programaEduIdMeta,
          programaEduId.isAcceptableOrUnknown(
              data['programa_edu_id']!, _programaEduIdMeta));
    }
    if (data.containsKey('id_anio_academico')) {
      context.handle(
          _idAnioAcademicoMeta,
          idAnioAcademico.isAcceptableOrUnknown(
              data['id_anio_academico']!, _idAnioAcademicoMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {calendarioAcademicoId};
  @override
  CalendarioAcademicoData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return CalendarioAcademicoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CalendarioAcademicoTable createAlias(String alias) {
    return $CalendarioAcademicoTable(_db, alias);
  }
}

class UsuarioData extends DataClass implements Insertable<UsuarioData> {
  final int usuarioId;
  final int? personaId;
  final String? usuario;
  final String? password;
  final bool? estado;
  final bool? habilitarAcceso;
  UsuarioData(
      {required this.usuarioId,
      this.personaId,
      this.usuario,
      this.password,
      this.estado,
      this.habilitarAcceso});
  factory UsuarioData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return UsuarioData(
      usuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_id'])!,
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id']),
      usuario: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario']),
      password: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}password']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      habilitarAcceso: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}habilitar_acceso']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['usuario_id'] = Variable<int>(usuarioId);
    if (!nullToAbsent || personaId != null) {
      map['persona_id'] = Variable<int?>(personaId);
    }
    if (!nullToAbsent || usuario != null) {
      map['usuario'] = Variable<String?>(usuario);
    }
    if (!nullToAbsent || password != null) {
      map['password'] = Variable<String?>(password);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || habilitarAcceso != null) {
      map['habilitar_acceso'] = Variable<bool?>(habilitarAcceso);
    }
    return map;
  }

  UsuarioCompanion toCompanion(bool nullToAbsent) {
    return UsuarioCompanion(
      usuarioId: Value(usuarioId),
      personaId: personaId == null && nullToAbsent
          ? const Value.absent()
          : Value(personaId),
      usuario: usuario == null && nullToAbsent
          ? const Value.absent()
          : Value(usuario),
      password: password == null && nullToAbsent
          ? const Value.absent()
          : Value(password),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      habilitarAcceso: habilitarAcceso == null && nullToAbsent
          ? const Value.absent()
          : Value(habilitarAcceso),
    );
  }

  factory UsuarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return UsuarioData(
      usuarioId: serializer.fromJson<int>(json['usuarioId']),
      personaId: serializer.fromJson<int?>(json['personaId']),
      usuario: serializer.fromJson<String?>(json['usuario']),
      password: serializer.fromJson<String?>(json['password']),
      estado: serializer.fromJson<bool?>(json['estado']),
      habilitarAcceso: serializer.fromJson<bool?>(json['habilitarAcceso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'usuarioId': serializer.toJson<int>(usuarioId),
      'personaId': serializer.toJson<int?>(personaId),
      'usuario': serializer.toJson<String?>(usuario),
      'password': serializer.toJson<String?>(password),
      'estado': serializer.toJson<bool?>(estado),
      'habilitarAcceso': serializer.toJson<bool?>(habilitarAcceso),
    };
  }

  UsuarioData copyWith(
          {int? usuarioId,
          int? personaId,
          String? usuario,
          String? password,
          bool? estado,
          bool? habilitarAcceso}) =>
      UsuarioData(
        usuarioId: usuarioId ?? this.usuarioId,
        personaId: personaId ?? this.personaId,
        usuario: usuario ?? this.usuario,
        password: password ?? this.password,
        estado: estado ?? this.estado,
        habilitarAcceso: habilitarAcceso ?? this.habilitarAcceso,
      );
  @override
  String toString() {
    return (StringBuffer('UsuarioData(')
          ..write('usuarioId: $usuarioId, ')
          ..write('personaId: $personaId, ')
          ..write('usuario: $usuario, ')
          ..write('password: $password, ')
          ..write('estado: $estado, ')
          ..write('habilitarAcceso: $habilitarAcceso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      usuarioId.hashCode,
      $mrjc(
          personaId.hashCode,
          $mrjc(
              usuario.hashCode,
              $mrjc(password.hashCode,
                  $mrjc(estado.hashCode, habilitarAcceso.hashCode))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UsuarioData &&
          other.usuarioId == this.usuarioId &&
          other.personaId == this.personaId &&
          other.usuario == this.usuario &&
          other.password == this.password &&
          other.estado == this.estado &&
          other.habilitarAcceso == this.habilitarAcceso);
}

class UsuarioCompanion extends UpdateCompanion<UsuarioData> {
  final Value<int> usuarioId;
  final Value<int?> personaId;
  final Value<String?> usuario;
  final Value<String?> password;
  final Value<bool?> estado;
  final Value<bool?> habilitarAcceso;
  const UsuarioCompanion({
    this.usuarioId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.usuario = const Value.absent(),
    this.password = const Value.absent(),
    this.estado = const Value.absent(),
    this.habilitarAcceso = const Value.absent(),
  });
  UsuarioCompanion.insert({
    this.usuarioId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.usuario = const Value.absent(),
    this.password = const Value.absent(),
    this.estado = const Value.absent(),
    this.habilitarAcceso = const Value.absent(),
  });
  static Insertable<UsuarioData> custom({
    Expression<int>? usuarioId,
    Expression<int?>? personaId,
    Expression<String?>? usuario,
    Expression<String?>? password,
    Expression<bool?>? estado,
    Expression<bool?>? habilitarAcceso,
  }) {
    return RawValuesInsertable({
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (personaId != null) 'persona_id': personaId,
      if (usuario != null) 'usuario': usuario,
      if (password != null) 'password': password,
      if (estado != null) 'estado': estado,
      if (habilitarAcceso != null) 'habilitar_acceso': habilitarAcceso,
    });
  }

  UsuarioCompanion copyWith(
      {Value<int>? usuarioId,
      Value<int?>? personaId,
      Value<String?>? usuario,
      Value<String?>? password,
      Value<bool?>? estado,
      Value<bool?>? habilitarAcceso}) {
    return UsuarioCompanion(
      usuarioId: usuarioId ?? this.usuarioId,
      personaId: personaId ?? this.personaId,
      usuario: usuario ?? this.usuario,
      password: password ?? this.password,
      estado: estado ?? this.estado,
      habilitarAcceso: habilitarAcceso ?? this.habilitarAcceso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (usuarioId.present) {
      map['usuario_id'] = Variable<int>(usuarioId.value);
    }
    if (personaId.present) {
      map['persona_id'] = Variable<int?>(personaId.value);
    }
    if (usuario.present) {
      map['usuario'] = Variable<String?>(usuario.value);
    }
    if (password.present) {
      map['password'] = Variable<String?>(password.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (habilitarAcceso.present) {
      map['habilitar_acceso'] = Variable<bool?>(habilitarAcceso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UsuarioCompanion(')
          ..write('usuarioId: $usuarioId, ')
          ..write('personaId: $personaId, ')
          ..write('usuario: $usuario, ')
          ..write('password: $password, ')
          ..write('estado: $estado, ')
          ..write('habilitarAcceso: $habilitarAcceso')
          ..write(')'))
        .toString();
  }
}

class $UsuarioTable extends Usuario with TableInfo<$UsuarioTable, UsuarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $UsuarioTable(this._db, [this._alias]);
  final VerificationMeta _usuarioIdMeta = const VerificationMeta('usuarioId');
  late final GeneratedColumn<int?> usuarioId = GeneratedColumn<int?>(
      'usuario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioMeta = const VerificationMeta('usuario');
  late final GeneratedColumn<String?> usuario = GeneratedColumn<String?>(
      'usuario', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _passwordMeta = const VerificationMeta('password');
  late final GeneratedColumn<String?> password = GeneratedColumn<String?>(
      'password', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _habilitarAccesoMeta =
      const VerificationMeta('habilitarAcceso');
  late final GeneratedColumn<bool?> habilitarAcceso = GeneratedColumn<bool?>(
      'habilitar_acceso', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (habilitar_acceso IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns =>
      [usuarioId, personaId, usuario, password, estado, habilitarAcceso];
  @override
  String get aliasedName => _alias ?? 'usuario';
  @override
  String get actualTableName => 'usuario';
  @override
  VerificationContext validateIntegrity(Insertable<UsuarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    }
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    }
    if (data.containsKey('usuario')) {
      context.handle(_usuarioMeta,
          usuario.isAcceptableOrUnknown(data['usuario']!, _usuarioMeta));
    }
    if (data.containsKey('password')) {
      context.handle(_passwordMeta,
          password.isAcceptableOrUnknown(data['password']!, _passwordMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('habilitar_acceso')) {
      context.handle(
          _habilitarAccesoMeta,
          habilitarAcceso.isAcceptableOrUnknown(
              data['habilitar_acceso']!, _habilitarAccesoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {usuarioId};
  @override
  UsuarioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return UsuarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $UsuarioTable createAlias(String alias) {
    return $UsuarioTable(_db, alias);
  }
}

class WebConfig extends DataClass implements Insertable<WebConfig> {
  final String? nombre;
  final String? content;
  WebConfig({this.nombre, this.content});
  factory WebConfig.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return WebConfig(
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      content: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}content']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || content != null) {
      map['content'] = Variable<String?>(content);
    }
    return map;
  }

  WebConfigsCompanion toCompanion(bool nullToAbsent) {
    return WebConfigsCompanion(
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      content: content == null && nullToAbsent
          ? const Value.absent()
          : Value(content),
    );
  }

  factory WebConfig.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return WebConfig(
      nombre: serializer.fromJson<String?>(json['nombre']),
      content: serializer.fromJson<String?>(json['content']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'nombre': serializer.toJson<String?>(nombre),
      'content': serializer.toJson<String?>(content),
    };
  }

  WebConfig copyWith({String? nombre, String? content}) => WebConfig(
        nombre: nombre ?? this.nombre,
        content: content ?? this.content,
      );
  @override
  String toString() {
    return (StringBuffer('WebConfig(')
          ..write('nombre: $nombre, ')
          ..write('content: $content')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(nombre.hashCode, content.hashCode));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is WebConfig &&
          other.nombre == this.nombre &&
          other.content == this.content);
}

class WebConfigsCompanion extends UpdateCompanion<WebConfig> {
  final Value<String?> nombre;
  final Value<String?> content;
  const WebConfigsCompanion({
    this.nombre = const Value.absent(),
    this.content = const Value.absent(),
  });
  WebConfigsCompanion.insert({
    this.nombre = const Value.absent(),
    this.content = const Value.absent(),
  });
  static Insertable<WebConfig> custom({
    Expression<String?>? nombre,
    Expression<String?>? content,
  }) {
    return RawValuesInsertable({
      if (nombre != null) 'nombre': nombre,
      if (content != null) 'content': content,
    });
  }

  WebConfigsCompanion copyWith(
      {Value<String?>? nombre, Value<String?>? content}) {
    return WebConfigsCompanion(
      nombre: nombre ?? this.nombre,
      content: content ?? this.content,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (content.present) {
      map['content'] = Variable<String?>(content.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('WebConfigsCompanion(')
          ..write('nombre: $nombre, ')
          ..write('content: $content')
          ..write(')'))
        .toString();
  }
}

class $WebConfigsTable extends WebConfigs
    with TableInfo<$WebConfigsTable, WebConfig> {
  final GeneratedDatabase _db;
  final String? _alias;
  $WebConfigsTable(this._db, [this._alias]);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _contentMeta = const VerificationMeta('content');
  late final GeneratedColumn<String?> content = GeneratedColumn<String?>(
      'content', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [nombre, content];
  @override
  String get aliasedName => _alias ?? 'web_configs';
  @override
  String get actualTableName => 'web_configs';
  @override
  VerificationContext validateIntegrity(Insertable<WebConfig> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('content')) {
      context.handle(_contentMeta,
          content.isAcceptableOrUnknown(data['content']!, _contentMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {nombre, content};
  @override
  WebConfig map(Map<String, dynamic> data, {String? tablePrefix}) {
    return WebConfig.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $WebConfigsTable createAlias(String alias) {
    return $WebConfigsTable(_db, alias);
  }
}

class CriterioData extends DataClass implements Insertable<CriterioData> {
  final int sesionAprendizajeId;
  final int unidadAprendiajeId;
  final int silaboEventoId;
  final int? sesionAprendizajePadreId;
  final String? tituloSesion;
  final int? rolIdSesion;
  final int? nroSesion;
  final String? propositoSesion;
  final String? tituloUnidad;
  final int? nroUnidad;

  /// <summary>
  /// Tabla Competencias
  /// </summary>
  final int competenciaId;
  final String? competenciaNombre;
  final String? competenciaDescripcion;
  final int? competenciaTipoId;
  final int? superCompetenciaId;
  final String? superCompetenciaNombre;
  final String? superCompetenciaDescripcion;
  final int? superCompetenciaTipoId;

  /// <summary>
  /// Tabla DesempenioIcd Desempenio Icd
  /// </summary>
  final int desempenioIcdId;
  final String? DesempenioDescripcion;
  final int? peso;
  final String? codigo;
  final int? tipoId;
  final String? url;
  final int? desempenioId;
  final String? desempenioIcdDescripcion;
  final int? icdId;
  final String? icdTitulo;
  final String? icdDescripcion;
  final String? icdAlias;

  /// <summary>
  /// Tabla CampoTematico
  /// </summary>
  ///
  final int campoTematicoId;
  final String? campoTematicoTitulo;
  final String? campoTematicoDescripcion;
  final int? campoTematicoEstado;
  final int? campoTematicoParentId;
  final String? campoTematicoParentTitulo;
  final String? campoTematicoParentDescripcion;
  final int? campoTematicoParentEstado;
  final int? campoTematicoParentParentId;
  final int? calendarioPeriodoId;
  CriterioData(
      {required this.sesionAprendizajeId,
      required this.unidadAprendiajeId,
      required this.silaboEventoId,
      this.sesionAprendizajePadreId,
      this.tituloSesion,
      this.rolIdSesion,
      this.nroSesion,
      this.propositoSesion,
      this.tituloUnidad,
      this.nroUnidad,
      required this.competenciaId,
      this.competenciaNombre,
      this.competenciaDescripcion,
      this.competenciaTipoId,
      this.superCompetenciaId,
      this.superCompetenciaNombre,
      this.superCompetenciaDescripcion,
      this.superCompetenciaTipoId,
      required this.desempenioIcdId,
      this.DesempenioDescripcion,
      this.peso,
      this.codigo,
      this.tipoId,
      this.url,
      this.desempenioId,
      this.desempenioIcdDescripcion,
      this.icdId,
      this.icdTitulo,
      this.icdDescripcion,
      this.icdAlias,
      required this.campoTematicoId,
      this.campoTematicoTitulo,
      this.campoTematicoDescripcion,
      this.campoTematicoEstado,
      this.campoTematicoParentId,
      this.campoTematicoParentTitulo,
      this.campoTematicoParentDescripcion,
      this.campoTematicoParentEstado,
      this.campoTematicoParentParentId,
      this.calendarioPeriodoId});
  factory CriterioData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CriterioData(
      sesionAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}sesion_aprendizaje_id'])!,
      unidadAprendiajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}unidad_aprendiaje_id'])!,
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id'])!,
      sesionAprendizajePadreId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}sesion_aprendizaje_padre_id']),
      tituloSesion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo_sesion']),
      rolIdSesion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rol_id_sesion']),
      nroSesion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_sesion']),
      propositoSesion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}proposito_sesion']),
      tituloUnidad: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo_unidad']),
      nroUnidad: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_unidad']),
      competenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}competencia_id'])!,
      competenciaNombre: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}competencia_nombre']),
      competenciaDescripcion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}competencia_descripcion']),
      competenciaTipoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}competencia_tipo_id']),
      superCompetenciaId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}super_competencia_id']),
      superCompetenciaNombre: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}super_competencia_nombre']),
      superCompetenciaDescripcion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}super_competencia_descripcion']),
      superCompetenciaTipoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}super_competencia_tipo_id']),
      desempenioIcdId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}desempenio_icd_id'])!,
      DesempenioDescripcion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}desempenio_descripcion']),
      peso: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}peso']),
      codigo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}codigo']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      url: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}url']),
      desempenioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}desempenio_id']),
      desempenioIcdDescripcion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}desempenio_icd_descripcion']),
      icdId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}icd_id']),
      icdTitulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}icd_titulo']),
      icdDescripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}icd_descripcion']),
      icdAlias: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}icd_alias']),
      campoTematicoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_id'])!,
      campoTematicoTitulo: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_titulo']),
      campoTematicoDescripcion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_descripcion']),
      campoTematicoEstado: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_estado']),
      campoTematicoParentId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_parent_id']),
      campoTematicoParentTitulo: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_parent_titulo']),
      campoTematicoParentDescripcion: const StringType()
          .mapFromDatabaseResponse(
              data['${effectivePrefix}campo_tematico_parent_descripcion']),
      campoTematicoParentEstado: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_parent_estado']),
      campoTematicoParentParentId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_parent_parent_id']),
      calendarioPeriodoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_periodo_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['sesion_aprendizaje_id'] = Variable<int>(sesionAprendizajeId);
    map['unidad_aprendiaje_id'] = Variable<int>(unidadAprendiajeId);
    map['silabo_evento_id'] = Variable<int>(silaboEventoId);
    if (!nullToAbsent || sesionAprendizajePadreId != null) {
      map['sesion_aprendizaje_padre_id'] =
          Variable<int?>(sesionAprendizajePadreId);
    }
    if (!nullToAbsent || tituloSesion != null) {
      map['titulo_sesion'] = Variable<String?>(tituloSesion);
    }
    if (!nullToAbsent || rolIdSesion != null) {
      map['rol_id_sesion'] = Variable<int?>(rolIdSesion);
    }
    if (!nullToAbsent || nroSesion != null) {
      map['nro_sesion'] = Variable<int?>(nroSesion);
    }
    if (!nullToAbsent || propositoSesion != null) {
      map['proposito_sesion'] = Variable<String?>(propositoSesion);
    }
    if (!nullToAbsent || tituloUnidad != null) {
      map['titulo_unidad'] = Variable<String?>(tituloUnidad);
    }
    if (!nullToAbsent || nroUnidad != null) {
      map['nro_unidad'] = Variable<int?>(nroUnidad);
    }
    map['competencia_id'] = Variable<int>(competenciaId);
    if (!nullToAbsent || competenciaNombre != null) {
      map['competencia_nombre'] = Variable<String?>(competenciaNombre);
    }
    if (!nullToAbsent || competenciaDescripcion != null) {
      map['competencia_descripcion'] =
          Variable<String?>(competenciaDescripcion);
    }
    if (!nullToAbsent || competenciaTipoId != null) {
      map['competencia_tipo_id'] = Variable<int?>(competenciaTipoId);
    }
    if (!nullToAbsent || superCompetenciaId != null) {
      map['super_competencia_id'] = Variable<int?>(superCompetenciaId);
    }
    if (!nullToAbsent || superCompetenciaNombre != null) {
      map['super_competencia_nombre'] =
          Variable<String?>(superCompetenciaNombre);
    }
    if (!nullToAbsent || superCompetenciaDescripcion != null) {
      map['super_competencia_descripcion'] =
          Variable<String?>(superCompetenciaDescripcion);
    }
    if (!nullToAbsent || superCompetenciaTipoId != null) {
      map['super_competencia_tipo_id'] = Variable<int?>(superCompetenciaTipoId);
    }
    map['desempenio_icd_id'] = Variable<int>(desempenioIcdId);
    if (!nullToAbsent || DesempenioDescripcion != null) {
      map['desempenio_descripcion'] = Variable<String?>(DesempenioDescripcion);
    }
    if (!nullToAbsent || peso != null) {
      map['peso'] = Variable<int?>(peso);
    }
    if (!nullToAbsent || codigo != null) {
      map['codigo'] = Variable<String?>(codigo);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || url != null) {
      map['url'] = Variable<String?>(url);
    }
    if (!nullToAbsent || desempenioId != null) {
      map['desempenio_id'] = Variable<int?>(desempenioId);
    }
    if (!nullToAbsent || desempenioIcdDescripcion != null) {
      map['desempenio_icd_descripcion'] =
          Variable<String?>(desempenioIcdDescripcion);
    }
    if (!nullToAbsent || icdId != null) {
      map['icd_id'] = Variable<int?>(icdId);
    }
    if (!nullToAbsent || icdTitulo != null) {
      map['icd_titulo'] = Variable<String?>(icdTitulo);
    }
    if (!nullToAbsent || icdDescripcion != null) {
      map['icd_descripcion'] = Variable<String?>(icdDescripcion);
    }
    if (!nullToAbsent || icdAlias != null) {
      map['icd_alias'] = Variable<String?>(icdAlias);
    }
    map['campo_tematico_id'] = Variable<int>(campoTematicoId);
    if (!nullToAbsent || campoTematicoTitulo != null) {
      map['campo_tematico_titulo'] = Variable<String?>(campoTematicoTitulo);
    }
    if (!nullToAbsent || campoTematicoDescripcion != null) {
      map['campo_tematico_descripcion'] =
          Variable<String?>(campoTematicoDescripcion);
    }
    if (!nullToAbsent || campoTematicoEstado != null) {
      map['campo_tematico_estado'] = Variable<int?>(campoTematicoEstado);
    }
    if (!nullToAbsent || campoTematicoParentId != null) {
      map['campo_tematico_parent_id'] = Variable<int?>(campoTematicoParentId);
    }
    if (!nullToAbsent || campoTematicoParentTitulo != null) {
      map['campo_tematico_parent_titulo'] =
          Variable<String?>(campoTematicoParentTitulo);
    }
    if (!nullToAbsent || campoTematicoParentDescripcion != null) {
      map['campo_tematico_parent_descripcion'] =
          Variable<String?>(campoTematicoParentDescripcion);
    }
    if (!nullToAbsent || campoTematicoParentEstado != null) {
      map['campo_tematico_parent_estado'] =
          Variable<int?>(campoTematicoParentEstado);
    }
    if (!nullToAbsent || campoTematicoParentParentId != null) {
      map['campo_tematico_parent_parent_id'] =
          Variable<int?>(campoTematicoParentParentId);
    }
    if (!nullToAbsent || calendarioPeriodoId != null) {
      map['calendario_periodo_id'] = Variable<int?>(calendarioPeriodoId);
    }
    return map;
  }

  CriterioCompanion toCompanion(bool nullToAbsent) {
    return CriterioCompanion(
      sesionAprendizajeId: Value(sesionAprendizajeId),
      unidadAprendiajeId: Value(unidadAprendiajeId),
      silaboEventoId: Value(silaboEventoId),
      sesionAprendizajePadreId: sesionAprendizajePadreId == null && nullToAbsent
          ? const Value.absent()
          : Value(sesionAprendizajePadreId),
      tituloSesion: tituloSesion == null && nullToAbsent
          ? const Value.absent()
          : Value(tituloSesion),
      rolIdSesion: rolIdSesion == null && nullToAbsent
          ? const Value.absent()
          : Value(rolIdSesion),
      nroSesion: nroSesion == null && nullToAbsent
          ? const Value.absent()
          : Value(nroSesion),
      propositoSesion: propositoSesion == null && nullToAbsent
          ? const Value.absent()
          : Value(propositoSesion),
      tituloUnidad: tituloUnidad == null && nullToAbsent
          ? const Value.absent()
          : Value(tituloUnidad),
      nroUnidad: nroUnidad == null && nullToAbsent
          ? const Value.absent()
          : Value(nroUnidad),
      competenciaId: Value(competenciaId),
      competenciaNombre: competenciaNombre == null && nullToAbsent
          ? const Value.absent()
          : Value(competenciaNombre),
      competenciaDescripcion: competenciaDescripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(competenciaDescripcion),
      competenciaTipoId: competenciaTipoId == null && nullToAbsent
          ? const Value.absent()
          : Value(competenciaTipoId),
      superCompetenciaId: superCompetenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(superCompetenciaId),
      superCompetenciaNombre: superCompetenciaNombre == null && nullToAbsent
          ? const Value.absent()
          : Value(superCompetenciaNombre),
      superCompetenciaDescripcion:
          superCompetenciaDescripcion == null && nullToAbsent
              ? const Value.absent()
              : Value(superCompetenciaDescripcion),
      superCompetenciaTipoId: superCompetenciaTipoId == null && nullToAbsent
          ? const Value.absent()
          : Value(superCompetenciaTipoId),
      desempenioIcdId: Value(desempenioIcdId),
      DesempenioDescripcion: DesempenioDescripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(DesempenioDescripcion),
      peso: peso == null && nullToAbsent ? const Value.absent() : Value(peso),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      desempenioId: desempenioId == null && nullToAbsent
          ? const Value.absent()
          : Value(desempenioId),
      desempenioIcdDescripcion: desempenioIcdDescripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(desempenioIcdDescripcion),
      icdId:
          icdId == null && nullToAbsent ? const Value.absent() : Value(icdId),
      icdTitulo: icdTitulo == null && nullToAbsent
          ? const Value.absent()
          : Value(icdTitulo),
      icdDescripcion: icdDescripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(icdDescripcion),
      icdAlias: icdAlias == null && nullToAbsent
          ? const Value.absent()
          : Value(icdAlias),
      campoTematicoId: Value(campoTematicoId),
      campoTematicoTitulo: campoTematicoTitulo == null && nullToAbsent
          ? const Value.absent()
          : Value(campoTematicoTitulo),
      campoTematicoDescripcion: campoTematicoDescripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(campoTematicoDescripcion),
      campoTematicoEstado: campoTematicoEstado == null && nullToAbsent
          ? const Value.absent()
          : Value(campoTematicoEstado),
      campoTematicoParentId: campoTematicoParentId == null && nullToAbsent
          ? const Value.absent()
          : Value(campoTematicoParentId),
      campoTematicoParentTitulo:
          campoTematicoParentTitulo == null && nullToAbsent
              ? const Value.absent()
              : Value(campoTematicoParentTitulo),
      campoTematicoParentDescripcion:
          campoTematicoParentDescripcion == null && nullToAbsent
              ? const Value.absent()
              : Value(campoTematicoParentDescripcion),
      campoTematicoParentEstado:
          campoTematicoParentEstado == null && nullToAbsent
              ? const Value.absent()
              : Value(campoTematicoParentEstado),
      campoTematicoParentParentId:
          campoTematicoParentParentId == null && nullToAbsent
              ? const Value.absent()
              : Value(campoTematicoParentParentId),
      calendarioPeriodoId: calendarioPeriodoId == null && nullToAbsent
          ? const Value.absent()
          : Value(calendarioPeriodoId),
    );
  }

  factory CriterioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CriterioData(
      sesionAprendizajeId:
          serializer.fromJson<int>(json['sesionAprendizajeId']),
      unidadAprendiajeId: serializer.fromJson<int>(json['unidadAprendiajeId']),
      silaboEventoId: serializer.fromJson<int>(json['silaboEventoId']),
      sesionAprendizajePadreId:
          serializer.fromJson<int?>(json['sesionAprendizajePadreId']),
      tituloSesion: serializer.fromJson<String?>(json['tituloSesion']),
      rolIdSesion: serializer.fromJson<int?>(json['rolIdSesion']),
      nroSesion: serializer.fromJson<int?>(json['nroSesion']),
      propositoSesion: serializer.fromJson<String?>(json['propositoSesion']),
      tituloUnidad: serializer.fromJson<String?>(json['tituloUnidad']),
      nroUnidad: serializer.fromJson<int?>(json['nroUnidad']),
      competenciaId: serializer.fromJson<int>(json['competenciaId']),
      competenciaNombre:
          serializer.fromJson<String?>(json['competenciaNombre']),
      competenciaDescripcion:
          serializer.fromJson<String?>(json['competenciaDescripcion']),
      competenciaTipoId: serializer.fromJson<int?>(json['competenciaTipoId']),
      superCompetenciaId: serializer.fromJson<int?>(json['superCompetenciaId']),
      superCompetenciaNombre:
          serializer.fromJson<String?>(json['superCompetenciaNombre']),
      superCompetenciaDescripcion:
          serializer.fromJson<String?>(json['superCompetenciaDescripcion']),
      superCompetenciaTipoId:
          serializer.fromJson<int?>(json['superCompetenciaTipoId']),
      desempenioIcdId: serializer.fromJson<int>(json['desempenioIcdId']),
      DesempenioDescripcion:
          serializer.fromJson<String?>(json['DesempenioDescripcion']),
      peso: serializer.fromJson<int?>(json['peso']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      url: serializer.fromJson<String?>(json['url']),
      desempenioId: serializer.fromJson<int?>(json['desempenioId']),
      desempenioIcdDescripcion:
          serializer.fromJson<String?>(json['desempenioIcdDescripcion']),
      icdId: serializer.fromJson<int?>(json['icdId']),
      icdTitulo: serializer.fromJson<String?>(json['icdTitulo']),
      icdDescripcion: serializer.fromJson<String?>(json['icdDescripcion']),
      icdAlias: serializer.fromJson<String?>(json['icdAlias']),
      campoTematicoId: serializer.fromJson<int>(json['campoTematicoId']),
      campoTematicoTitulo:
          serializer.fromJson<String?>(json['campoTematicoTitulo']),
      campoTematicoDescripcion:
          serializer.fromJson<String?>(json['campoTematicoDescripcion']),
      campoTematicoEstado:
          serializer.fromJson<int?>(json['campoTematicoEstado']),
      campoTematicoParentId:
          serializer.fromJson<int?>(json['campoTematicoParentId']),
      campoTematicoParentTitulo:
          serializer.fromJson<String?>(json['campoTematicoParentTitulo']),
      campoTematicoParentDescripcion:
          serializer.fromJson<String?>(json['campoTematicoParentDescripcion']),
      campoTematicoParentEstado:
          serializer.fromJson<int?>(json['campoTematicoParentEstado']),
      campoTematicoParentParentId:
          serializer.fromJson<int?>(json['campoTematicoParentParentId']),
      calendarioPeriodoId:
          serializer.fromJson<int?>(json['calendarioPeriodoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'sesionAprendizajeId': serializer.toJson<int>(sesionAprendizajeId),
      'unidadAprendiajeId': serializer.toJson<int>(unidadAprendiajeId),
      'silaboEventoId': serializer.toJson<int>(silaboEventoId),
      'sesionAprendizajePadreId':
          serializer.toJson<int?>(sesionAprendizajePadreId),
      'tituloSesion': serializer.toJson<String?>(tituloSesion),
      'rolIdSesion': serializer.toJson<int?>(rolIdSesion),
      'nroSesion': serializer.toJson<int?>(nroSesion),
      'propositoSesion': serializer.toJson<String?>(propositoSesion),
      'tituloUnidad': serializer.toJson<String?>(tituloUnidad),
      'nroUnidad': serializer.toJson<int?>(nroUnidad),
      'competenciaId': serializer.toJson<int>(competenciaId),
      'competenciaNombre': serializer.toJson<String?>(competenciaNombre),
      'competenciaDescripcion':
          serializer.toJson<String?>(competenciaDescripcion),
      'competenciaTipoId': serializer.toJson<int?>(competenciaTipoId),
      'superCompetenciaId': serializer.toJson<int?>(superCompetenciaId),
      'superCompetenciaNombre':
          serializer.toJson<String?>(superCompetenciaNombre),
      'superCompetenciaDescripcion':
          serializer.toJson<String?>(superCompetenciaDescripcion),
      'superCompetenciaTipoId': serializer.toJson<int?>(superCompetenciaTipoId),
      'desempenioIcdId': serializer.toJson<int>(desempenioIcdId),
      'DesempenioDescripcion':
          serializer.toJson<String?>(DesempenioDescripcion),
      'peso': serializer.toJson<int?>(peso),
      'codigo': serializer.toJson<String?>(codigo),
      'tipoId': serializer.toJson<int?>(tipoId),
      'url': serializer.toJson<String?>(url),
      'desempenioId': serializer.toJson<int?>(desempenioId),
      'desempenioIcdDescripcion':
          serializer.toJson<String?>(desempenioIcdDescripcion),
      'icdId': serializer.toJson<int?>(icdId),
      'icdTitulo': serializer.toJson<String?>(icdTitulo),
      'icdDescripcion': serializer.toJson<String?>(icdDescripcion),
      'icdAlias': serializer.toJson<String?>(icdAlias),
      'campoTematicoId': serializer.toJson<int>(campoTematicoId),
      'campoTematicoTitulo': serializer.toJson<String?>(campoTematicoTitulo),
      'campoTematicoDescripcion':
          serializer.toJson<String?>(campoTematicoDescripcion),
      'campoTematicoEstado': serializer.toJson<int?>(campoTematicoEstado),
      'campoTematicoParentId': serializer.toJson<int?>(campoTematicoParentId),
      'campoTematicoParentTitulo':
          serializer.toJson<String?>(campoTematicoParentTitulo),
      'campoTematicoParentDescripcion':
          serializer.toJson<String?>(campoTematicoParentDescripcion),
      'campoTematicoParentEstado':
          serializer.toJson<int?>(campoTematicoParentEstado),
      'campoTematicoParentParentId':
          serializer.toJson<int?>(campoTematicoParentParentId),
      'calendarioPeriodoId': serializer.toJson<int?>(calendarioPeriodoId),
    };
  }

  CriterioData copyWith(
          {int? sesionAprendizajeId,
          int? unidadAprendiajeId,
          int? silaboEventoId,
          int? sesionAprendizajePadreId,
          String? tituloSesion,
          int? rolIdSesion,
          int? nroSesion,
          String? propositoSesion,
          String? tituloUnidad,
          int? nroUnidad,
          int? competenciaId,
          String? competenciaNombre,
          String? competenciaDescripcion,
          int? competenciaTipoId,
          int? superCompetenciaId,
          String? superCompetenciaNombre,
          String? superCompetenciaDescripcion,
          int? superCompetenciaTipoId,
          int? desempenioIcdId,
          String? DesempenioDescripcion,
          int? peso,
          String? codigo,
          int? tipoId,
          String? url,
          int? desempenioId,
          String? desempenioIcdDescripcion,
          int? icdId,
          String? icdTitulo,
          String? icdDescripcion,
          String? icdAlias,
          int? campoTematicoId,
          String? campoTematicoTitulo,
          String? campoTematicoDescripcion,
          int? campoTematicoEstado,
          int? campoTematicoParentId,
          String? campoTematicoParentTitulo,
          String? campoTematicoParentDescripcion,
          int? campoTematicoParentEstado,
          int? campoTematicoParentParentId,
          int? calendarioPeriodoId}) =>
      CriterioData(
        sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
        unidadAprendiajeId: unidadAprendiajeId ?? this.unidadAprendiajeId,
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
        sesionAprendizajePadreId:
            sesionAprendizajePadreId ?? this.sesionAprendizajePadreId,
        tituloSesion: tituloSesion ?? this.tituloSesion,
        rolIdSesion: rolIdSesion ?? this.rolIdSesion,
        nroSesion: nroSesion ?? this.nroSesion,
        propositoSesion: propositoSesion ?? this.propositoSesion,
        tituloUnidad: tituloUnidad ?? this.tituloUnidad,
        nroUnidad: nroUnidad ?? this.nroUnidad,
        competenciaId: competenciaId ?? this.competenciaId,
        competenciaNombre: competenciaNombre ?? this.competenciaNombre,
        competenciaDescripcion:
            competenciaDescripcion ?? this.competenciaDescripcion,
        competenciaTipoId: competenciaTipoId ?? this.competenciaTipoId,
        superCompetenciaId: superCompetenciaId ?? this.superCompetenciaId,
        superCompetenciaNombre:
            superCompetenciaNombre ?? this.superCompetenciaNombre,
        superCompetenciaDescripcion:
            superCompetenciaDescripcion ?? this.superCompetenciaDescripcion,
        superCompetenciaTipoId:
            superCompetenciaTipoId ?? this.superCompetenciaTipoId,
        desempenioIcdId: desempenioIcdId ?? this.desempenioIcdId,
        DesempenioDescripcion:
            DesempenioDescripcion ?? this.DesempenioDescripcion,
        peso: peso ?? this.peso,
        codigo: codigo ?? this.codigo,
        tipoId: tipoId ?? this.tipoId,
        url: url ?? this.url,
        desempenioId: desempenioId ?? this.desempenioId,
        desempenioIcdDescripcion:
            desempenioIcdDescripcion ?? this.desempenioIcdDescripcion,
        icdId: icdId ?? this.icdId,
        icdTitulo: icdTitulo ?? this.icdTitulo,
        icdDescripcion: icdDescripcion ?? this.icdDescripcion,
        icdAlias: icdAlias ?? this.icdAlias,
        campoTematicoId: campoTematicoId ?? this.campoTematicoId,
        campoTematicoTitulo: campoTematicoTitulo ?? this.campoTematicoTitulo,
        campoTematicoDescripcion:
            campoTematicoDescripcion ?? this.campoTematicoDescripcion,
        campoTematicoEstado: campoTematicoEstado ?? this.campoTematicoEstado,
        campoTematicoParentId:
            campoTematicoParentId ?? this.campoTematicoParentId,
        campoTematicoParentTitulo:
            campoTematicoParentTitulo ?? this.campoTematicoParentTitulo,
        campoTematicoParentDescripcion: campoTematicoParentDescripcion ??
            this.campoTematicoParentDescripcion,
        campoTematicoParentEstado:
            campoTematicoParentEstado ?? this.campoTematicoParentEstado,
        campoTematicoParentParentId:
            campoTematicoParentParentId ?? this.campoTematicoParentParentId,
        calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
      );
  @override
  String toString() {
    return (StringBuffer('CriterioData(')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('unidadAprendiajeId: $unidadAprendiajeId, ')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('sesionAprendizajePadreId: $sesionAprendizajePadreId, ')
          ..write('tituloSesion: $tituloSesion, ')
          ..write('rolIdSesion: $rolIdSesion, ')
          ..write('nroSesion: $nroSesion, ')
          ..write('propositoSesion: $propositoSesion, ')
          ..write('tituloUnidad: $tituloUnidad, ')
          ..write('nroUnidad: $nroUnidad, ')
          ..write('competenciaId: $competenciaId, ')
          ..write('competenciaNombre: $competenciaNombre, ')
          ..write('competenciaDescripcion: $competenciaDescripcion, ')
          ..write('competenciaTipoId: $competenciaTipoId, ')
          ..write('superCompetenciaId: $superCompetenciaId, ')
          ..write('superCompetenciaNombre: $superCompetenciaNombre, ')
          ..write('superCompetenciaDescripcion: $superCompetenciaDescripcion, ')
          ..write('superCompetenciaTipoId: $superCompetenciaTipoId, ')
          ..write('desempenioIcdId: $desempenioIcdId, ')
          ..write('DesempenioDescripcion: $DesempenioDescripcion, ')
          ..write('peso: $peso, ')
          ..write('codigo: $codigo, ')
          ..write('tipoId: $tipoId, ')
          ..write('url: $url, ')
          ..write('desempenioId: $desempenioId, ')
          ..write('desempenioIcdDescripcion: $desempenioIcdDescripcion, ')
          ..write('icdId: $icdId, ')
          ..write('icdTitulo: $icdTitulo, ')
          ..write('icdDescripcion: $icdDescripcion, ')
          ..write('icdAlias: $icdAlias, ')
          ..write('campoTematicoId: $campoTematicoId, ')
          ..write('campoTematicoTitulo: $campoTematicoTitulo, ')
          ..write('campoTematicoDescripcion: $campoTematicoDescripcion, ')
          ..write('campoTematicoEstado: $campoTematicoEstado, ')
          ..write('campoTematicoParentId: $campoTematicoParentId, ')
          ..write('campoTematicoParentTitulo: $campoTematicoParentTitulo, ')
          ..write(
              'campoTematicoParentDescripcion: $campoTematicoParentDescripcion, ')
          ..write('campoTematicoParentEstado: $campoTematicoParentEstado, ')
          ..write('campoTematicoParentParentId: $campoTematicoParentParentId, ')
          ..write('calendarioPeriodoId: $calendarioPeriodoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      sesionAprendizajeId.hashCode,
      $mrjc(
          unidadAprendiajeId.hashCode,
          $mrjc(
              silaboEventoId.hashCode,
              $mrjc(
                  sesionAprendizajePadreId.hashCode,
                  $mrjc(
                      tituloSesion.hashCode,
                      $mrjc(
                          rolIdSesion.hashCode,
                          $mrjc(
                              nroSesion.hashCode,
                              $mrjc(
                                  propositoSesion.hashCode,
                                  $mrjc(
                                      tituloUnidad.hashCode,
                                      $mrjc(
                                          nroUnidad.hashCode,
                                          $mrjc(
                                              competenciaId.hashCode,
                                              $mrjc(
                                                  competenciaNombre.hashCode,
                                                  $mrjc(
                                                      competenciaDescripcion
                                                          .hashCode,
                                                      $mrjc(
                                                          competenciaTipoId
                                                              .hashCode,
                                                          $mrjc(
                                                              superCompetenciaId
                                                                  .hashCode,
                                                              $mrjc(
                                                                  superCompetenciaNombre
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      superCompetenciaDescripcion
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          superCompetenciaTipoId
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              desempenioIcdId.hashCode,
                                                                              $mrjc(DesempenioDescripcion.hashCode, $mrjc(peso.hashCode, $mrjc(codigo.hashCode, $mrjc(tipoId.hashCode, $mrjc(url.hashCode, $mrjc(desempenioId.hashCode, $mrjc(desempenioIcdDescripcion.hashCode, $mrjc(icdId.hashCode, $mrjc(icdTitulo.hashCode, $mrjc(icdDescripcion.hashCode, $mrjc(icdAlias.hashCode, $mrjc(campoTematicoId.hashCode, $mrjc(campoTematicoTitulo.hashCode, $mrjc(campoTematicoDescripcion.hashCode, $mrjc(campoTematicoEstado.hashCode, $mrjc(campoTematicoParentId.hashCode, $mrjc(campoTematicoParentTitulo.hashCode, $mrjc(campoTematicoParentDescripcion.hashCode, $mrjc(campoTematicoParentEstado.hashCode, $mrjc(campoTematicoParentParentId.hashCode, calendarioPeriodoId.hashCode))))))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CriterioData &&
          other.sesionAprendizajeId == this.sesionAprendizajeId &&
          other.unidadAprendiajeId == this.unidadAprendiajeId &&
          other.silaboEventoId == this.silaboEventoId &&
          other.sesionAprendizajePadreId == this.sesionAprendizajePadreId &&
          other.tituloSesion == this.tituloSesion &&
          other.rolIdSesion == this.rolIdSesion &&
          other.nroSesion == this.nroSesion &&
          other.propositoSesion == this.propositoSesion &&
          other.tituloUnidad == this.tituloUnidad &&
          other.nroUnidad == this.nroUnidad &&
          other.competenciaId == this.competenciaId &&
          other.competenciaNombre == this.competenciaNombre &&
          other.competenciaDescripcion == this.competenciaDescripcion &&
          other.competenciaTipoId == this.competenciaTipoId &&
          other.superCompetenciaId == this.superCompetenciaId &&
          other.superCompetenciaNombre == this.superCompetenciaNombre &&
          other.superCompetenciaDescripcion ==
              this.superCompetenciaDescripcion &&
          other.superCompetenciaTipoId == this.superCompetenciaTipoId &&
          other.desempenioIcdId == this.desempenioIcdId &&
          other.DesempenioDescripcion == this.DesempenioDescripcion &&
          other.peso == this.peso &&
          other.codigo == this.codigo &&
          other.tipoId == this.tipoId &&
          other.url == this.url &&
          other.desempenioId == this.desempenioId &&
          other.desempenioIcdDescripcion == this.desempenioIcdDescripcion &&
          other.icdId == this.icdId &&
          other.icdTitulo == this.icdTitulo &&
          other.icdDescripcion == this.icdDescripcion &&
          other.icdAlias == this.icdAlias &&
          other.campoTematicoId == this.campoTematicoId &&
          other.campoTematicoTitulo == this.campoTematicoTitulo &&
          other.campoTematicoDescripcion == this.campoTematicoDescripcion &&
          other.campoTematicoEstado == this.campoTematicoEstado &&
          other.campoTematicoParentId == this.campoTematicoParentId &&
          other.campoTematicoParentTitulo == this.campoTematicoParentTitulo &&
          other.campoTematicoParentDescripcion ==
              this.campoTematicoParentDescripcion &&
          other.campoTematicoParentEstado == this.campoTematicoParentEstado &&
          other.campoTematicoParentParentId ==
              this.campoTematicoParentParentId &&
          other.calendarioPeriodoId == this.calendarioPeriodoId);
}

class CriterioCompanion extends UpdateCompanion<CriterioData> {
  final Value<int> sesionAprendizajeId;
  final Value<int> unidadAprendiajeId;
  final Value<int> silaboEventoId;
  final Value<int?> sesionAprendizajePadreId;
  final Value<String?> tituloSesion;
  final Value<int?> rolIdSesion;
  final Value<int?> nroSesion;
  final Value<String?> propositoSesion;
  final Value<String?> tituloUnidad;
  final Value<int?> nroUnidad;
  final Value<int> competenciaId;
  final Value<String?> competenciaNombre;
  final Value<String?> competenciaDescripcion;
  final Value<int?> competenciaTipoId;
  final Value<int?> superCompetenciaId;
  final Value<String?> superCompetenciaNombre;
  final Value<String?> superCompetenciaDescripcion;
  final Value<int?> superCompetenciaTipoId;
  final Value<int> desempenioIcdId;
  final Value<String?> DesempenioDescripcion;
  final Value<int?> peso;
  final Value<String?> codigo;
  final Value<int?> tipoId;
  final Value<String?> url;
  final Value<int?> desempenioId;
  final Value<String?> desempenioIcdDescripcion;
  final Value<int?> icdId;
  final Value<String?> icdTitulo;
  final Value<String?> icdDescripcion;
  final Value<String?> icdAlias;
  final Value<int> campoTematicoId;
  final Value<String?> campoTematicoTitulo;
  final Value<String?> campoTematicoDescripcion;
  final Value<int?> campoTematicoEstado;
  final Value<int?> campoTematicoParentId;
  final Value<String?> campoTematicoParentTitulo;
  final Value<String?> campoTematicoParentDescripcion;
  final Value<int?> campoTematicoParentEstado;
  final Value<int?> campoTematicoParentParentId;
  final Value<int?> calendarioPeriodoId;
  const CriterioCompanion({
    this.sesionAprendizajeId = const Value.absent(),
    this.unidadAprendiajeId = const Value.absent(),
    this.silaboEventoId = const Value.absent(),
    this.sesionAprendizajePadreId = const Value.absent(),
    this.tituloSesion = const Value.absent(),
    this.rolIdSesion = const Value.absent(),
    this.nroSesion = const Value.absent(),
    this.propositoSesion = const Value.absent(),
    this.tituloUnidad = const Value.absent(),
    this.nroUnidad = const Value.absent(),
    this.competenciaId = const Value.absent(),
    this.competenciaNombre = const Value.absent(),
    this.competenciaDescripcion = const Value.absent(),
    this.competenciaTipoId = const Value.absent(),
    this.superCompetenciaId = const Value.absent(),
    this.superCompetenciaNombre = const Value.absent(),
    this.superCompetenciaDescripcion = const Value.absent(),
    this.superCompetenciaTipoId = const Value.absent(),
    this.desempenioIcdId = const Value.absent(),
    this.DesempenioDescripcion = const Value.absent(),
    this.peso = const Value.absent(),
    this.codigo = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.url = const Value.absent(),
    this.desempenioId = const Value.absent(),
    this.desempenioIcdDescripcion = const Value.absent(),
    this.icdId = const Value.absent(),
    this.icdTitulo = const Value.absent(),
    this.icdDescripcion = const Value.absent(),
    this.icdAlias = const Value.absent(),
    this.campoTematicoId = const Value.absent(),
    this.campoTematicoTitulo = const Value.absent(),
    this.campoTematicoDescripcion = const Value.absent(),
    this.campoTematicoEstado = const Value.absent(),
    this.campoTematicoParentId = const Value.absent(),
    this.campoTematicoParentTitulo = const Value.absent(),
    this.campoTematicoParentDescripcion = const Value.absent(),
    this.campoTematicoParentEstado = const Value.absent(),
    this.campoTematicoParentParentId = const Value.absent(),
    this.calendarioPeriodoId = const Value.absent(),
  });
  CriterioCompanion.insert({
    required int sesionAprendizajeId,
    required int unidadAprendiajeId,
    required int silaboEventoId,
    this.sesionAprendizajePadreId = const Value.absent(),
    this.tituloSesion = const Value.absent(),
    this.rolIdSesion = const Value.absent(),
    this.nroSesion = const Value.absent(),
    this.propositoSesion = const Value.absent(),
    this.tituloUnidad = const Value.absent(),
    this.nroUnidad = const Value.absent(),
    required int competenciaId,
    this.competenciaNombre = const Value.absent(),
    this.competenciaDescripcion = const Value.absent(),
    this.competenciaTipoId = const Value.absent(),
    this.superCompetenciaId = const Value.absent(),
    this.superCompetenciaNombre = const Value.absent(),
    this.superCompetenciaDescripcion = const Value.absent(),
    this.superCompetenciaTipoId = const Value.absent(),
    required int desempenioIcdId,
    this.DesempenioDescripcion = const Value.absent(),
    this.peso = const Value.absent(),
    this.codigo = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.url = const Value.absent(),
    this.desempenioId = const Value.absent(),
    this.desempenioIcdDescripcion = const Value.absent(),
    this.icdId = const Value.absent(),
    this.icdTitulo = const Value.absent(),
    this.icdDescripcion = const Value.absent(),
    this.icdAlias = const Value.absent(),
    required int campoTematicoId,
    this.campoTematicoTitulo = const Value.absent(),
    this.campoTematicoDescripcion = const Value.absent(),
    this.campoTematicoEstado = const Value.absent(),
    this.campoTematicoParentId = const Value.absent(),
    this.campoTematicoParentTitulo = const Value.absent(),
    this.campoTematicoParentDescripcion = const Value.absent(),
    this.campoTematicoParentEstado = const Value.absent(),
    this.campoTematicoParentParentId = const Value.absent(),
    this.calendarioPeriodoId = const Value.absent(),
  })  : sesionAprendizajeId = Value(sesionAprendizajeId),
        unidadAprendiajeId = Value(unidadAprendiajeId),
        silaboEventoId = Value(silaboEventoId),
        competenciaId = Value(competenciaId),
        desempenioIcdId = Value(desempenioIcdId),
        campoTematicoId = Value(campoTematicoId);
  static Insertable<CriterioData> custom({
    Expression<int>? sesionAprendizajeId,
    Expression<int>? unidadAprendiajeId,
    Expression<int>? silaboEventoId,
    Expression<int?>? sesionAprendizajePadreId,
    Expression<String?>? tituloSesion,
    Expression<int?>? rolIdSesion,
    Expression<int?>? nroSesion,
    Expression<String?>? propositoSesion,
    Expression<String?>? tituloUnidad,
    Expression<int?>? nroUnidad,
    Expression<int>? competenciaId,
    Expression<String?>? competenciaNombre,
    Expression<String?>? competenciaDescripcion,
    Expression<int?>? competenciaTipoId,
    Expression<int?>? superCompetenciaId,
    Expression<String?>? superCompetenciaNombre,
    Expression<String?>? superCompetenciaDescripcion,
    Expression<int?>? superCompetenciaTipoId,
    Expression<int>? desempenioIcdId,
    Expression<String?>? DesempenioDescripcion,
    Expression<int?>? peso,
    Expression<String?>? codigo,
    Expression<int?>? tipoId,
    Expression<String?>? url,
    Expression<int?>? desempenioId,
    Expression<String?>? desempenioIcdDescripcion,
    Expression<int?>? icdId,
    Expression<String?>? icdTitulo,
    Expression<String?>? icdDescripcion,
    Expression<String?>? icdAlias,
    Expression<int>? campoTematicoId,
    Expression<String?>? campoTematicoTitulo,
    Expression<String?>? campoTematicoDescripcion,
    Expression<int?>? campoTematicoEstado,
    Expression<int?>? campoTematicoParentId,
    Expression<String?>? campoTematicoParentTitulo,
    Expression<String?>? campoTematicoParentDescripcion,
    Expression<int?>? campoTematicoParentEstado,
    Expression<int?>? campoTematicoParentParentId,
    Expression<int?>? calendarioPeriodoId,
  }) {
    return RawValuesInsertable({
      if (sesionAprendizajeId != null)
        'sesion_aprendizaje_id': sesionAprendizajeId,
      if (unidadAprendiajeId != null)
        'unidad_aprendiaje_id': unidadAprendiajeId,
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
      if (sesionAprendizajePadreId != null)
        'sesion_aprendizaje_padre_id': sesionAprendizajePadreId,
      if (tituloSesion != null) 'titulo_sesion': tituloSesion,
      if (rolIdSesion != null) 'rol_id_sesion': rolIdSesion,
      if (nroSesion != null) 'nro_sesion': nroSesion,
      if (propositoSesion != null) 'proposito_sesion': propositoSesion,
      if (tituloUnidad != null) 'titulo_unidad': tituloUnidad,
      if (nroUnidad != null) 'nro_unidad': nroUnidad,
      if (competenciaId != null) 'competencia_id': competenciaId,
      if (competenciaNombre != null) 'competencia_nombre': competenciaNombre,
      if (competenciaDescripcion != null)
        'competencia_descripcion': competenciaDescripcion,
      if (competenciaTipoId != null) 'competencia_tipo_id': competenciaTipoId,
      if (superCompetenciaId != null)
        'super_competencia_id': superCompetenciaId,
      if (superCompetenciaNombre != null)
        'super_competencia_nombre': superCompetenciaNombre,
      if (superCompetenciaDescripcion != null)
        'super_competencia_descripcion': superCompetenciaDescripcion,
      if (superCompetenciaTipoId != null)
        'super_competencia_tipo_id': superCompetenciaTipoId,
      if (desempenioIcdId != null) 'desempenio_icd_id': desempenioIcdId,
      if (DesempenioDescripcion != null)
        'desempenio_descripcion': DesempenioDescripcion,
      if (peso != null) 'peso': peso,
      if (codigo != null) 'codigo': codigo,
      if (tipoId != null) 'tipo_id': tipoId,
      if (url != null) 'url': url,
      if (desempenioId != null) 'desempenio_id': desempenioId,
      if (desempenioIcdDescripcion != null)
        'desempenio_icd_descripcion': desempenioIcdDescripcion,
      if (icdId != null) 'icd_id': icdId,
      if (icdTitulo != null) 'icd_titulo': icdTitulo,
      if (icdDescripcion != null) 'icd_descripcion': icdDescripcion,
      if (icdAlias != null) 'icd_alias': icdAlias,
      if (campoTematicoId != null) 'campo_tematico_id': campoTematicoId,
      if (campoTematicoTitulo != null)
        'campo_tematico_titulo': campoTematicoTitulo,
      if (campoTematicoDescripcion != null)
        'campo_tematico_descripcion': campoTematicoDescripcion,
      if (campoTematicoEstado != null)
        'campo_tematico_estado': campoTematicoEstado,
      if (campoTematicoParentId != null)
        'campo_tematico_parent_id': campoTematicoParentId,
      if (campoTematicoParentTitulo != null)
        'campo_tematico_parent_titulo': campoTematicoParentTitulo,
      if (campoTematicoParentDescripcion != null)
        'campo_tematico_parent_descripcion': campoTematicoParentDescripcion,
      if (campoTematicoParentEstado != null)
        'campo_tematico_parent_estado': campoTematicoParentEstado,
      if (campoTematicoParentParentId != null)
        'campo_tematico_parent_parent_id': campoTematicoParentParentId,
      if (calendarioPeriodoId != null)
        'calendario_periodo_id': calendarioPeriodoId,
    });
  }

  CriterioCompanion copyWith(
      {Value<int>? sesionAprendizajeId,
      Value<int>? unidadAprendiajeId,
      Value<int>? silaboEventoId,
      Value<int?>? sesionAprendizajePadreId,
      Value<String?>? tituloSesion,
      Value<int?>? rolIdSesion,
      Value<int?>? nroSesion,
      Value<String?>? propositoSesion,
      Value<String?>? tituloUnidad,
      Value<int?>? nroUnidad,
      Value<int>? competenciaId,
      Value<String?>? competenciaNombre,
      Value<String?>? competenciaDescripcion,
      Value<int?>? competenciaTipoId,
      Value<int?>? superCompetenciaId,
      Value<String?>? superCompetenciaNombre,
      Value<String?>? superCompetenciaDescripcion,
      Value<int?>? superCompetenciaTipoId,
      Value<int>? desempenioIcdId,
      Value<String?>? DesempenioDescripcion,
      Value<int?>? peso,
      Value<String?>? codigo,
      Value<int?>? tipoId,
      Value<String?>? url,
      Value<int?>? desempenioId,
      Value<String?>? desempenioIcdDescripcion,
      Value<int?>? icdId,
      Value<String?>? icdTitulo,
      Value<String?>? icdDescripcion,
      Value<String?>? icdAlias,
      Value<int>? campoTematicoId,
      Value<String?>? campoTematicoTitulo,
      Value<String?>? campoTematicoDescripcion,
      Value<int?>? campoTematicoEstado,
      Value<int?>? campoTematicoParentId,
      Value<String?>? campoTematicoParentTitulo,
      Value<String?>? campoTematicoParentDescripcion,
      Value<int?>? campoTematicoParentEstado,
      Value<int?>? campoTematicoParentParentId,
      Value<int?>? calendarioPeriodoId}) {
    return CriterioCompanion(
      sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
      unidadAprendiajeId: unidadAprendiajeId ?? this.unidadAprendiajeId,
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      sesionAprendizajePadreId:
          sesionAprendizajePadreId ?? this.sesionAprendizajePadreId,
      tituloSesion: tituloSesion ?? this.tituloSesion,
      rolIdSesion: rolIdSesion ?? this.rolIdSesion,
      nroSesion: nroSesion ?? this.nroSesion,
      propositoSesion: propositoSesion ?? this.propositoSesion,
      tituloUnidad: tituloUnidad ?? this.tituloUnidad,
      nroUnidad: nroUnidad ?? this.nroUnidad,
      competenciaId: competenciaId ?? this.competenciaId,
      competenciaNombre: competenciaNombre ?? this.competenciaNombre,
      competenciaDescripcion:
          competenciaDescripcion ?? this.competenciaDescripcion,
      competenciaTipoId: competenciaTipoId ?? this.competenciaTipoId,
      superCompetenciaId: superCompetenciaId ?? this.superCompetenciaId,
      superCompetenciaNombre:
          superCompetenciaNombre ?? this.superCompetenciaNombre,
      superCompetenciaDescripcion:
          superCompetenciaDescripcion ?? this.superCompetenciaDescripcion,
      superCompetenciaTipoId:
          superCompetenciaTipoId ?? this.superCompetenciaTipoId,
      desempenioIcdId: desempenioIcdId ?? this.desempenioIcdId,
      DesempenioDescripcion:
          DesempenioDescripcion ?? this.DesempenioDescripcion,
      peso: peso ?? this.peso,
      codigo: codigo ?? this.codigo,
      tipoId: tipoId ?? this.tipoId,
      url: url ?? this.url,
      desempenioId: desempenioId ?? this.desempenioId,
      desempenioIcdDescripcion:
          desempenioIcdDescripcion ?? this.desempenioIcdDescripcion,
      icdId: icdId ?? this.icdId,
      icdTitulo: icdTitulo ?? this.icdTitulo,
      icdDescripcion: icdDescripcion ?? this.icdDescripcion,
      icdAlias: icdAlias ?? this.icdAlias,
      campoTematicoId: campoTematicoId ?? this.campoTematicoId,
      campoTematicoTitulo: campoTematicoTitulo ?? this.campoTematicoTitulo,
      campoTematicoDescripcion:
          campoTematicoDescripcion ?? this.campoTematicoDescripcion,
      campoTematicoEstado: campoTematicoEstado ?? this.campoTematicoEstado,
      campoTematicoParentId:
          campoTematicoParentId ?? this.campoTematicoParentId,
      campoTematicoParentTitulo:
          campoTematicoParentTitulo ?? this.campoTematicoParentTitulo,
      campoTematicoParentDescripcion:
          campoTematicoParentDescripcion ?? this.campoTematicoParentDescripcion,
      campoTematicoParentEstado:
          campoTematicoParentEstado ?? this.campoTematicoParentEstado,
      campoTematicoParentParentId:
          campoTematicoParentParentId ?? this.campoTematicoParentParentId,
      calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (sesionAprendizajeId.present) {
      map['sesion_aprendizaje_id'] = Variable<int>(sesionAprendizajeId.value);
    }
    if (unidadAprendiajeId.present) {
      map['unidad_aprendiaje_id'] = Variable<int>(unidadAprendiajeId.value);
    }
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int>(silaboEventoId.value);
    }
    if (sesionAprendizajePadreId.present) {
      map['sesion_aprendizaje_padre_id'] =
          Variable<int?>(sesionAprendizajePadreId.value);
    }
    if (tituloSesion.present) {
      map['titulo_sesion'] = Variable<String?>(tituloSesion.value);
    }
    if (rolIdSesion.present) {
      map['rol_id_sesion'] = Variable<int?>(rolIdSesion.value);
    }
    if (nroSesion.present) {
      map['nro_sesion'] = Variable<int?>(nroSesion.value);
    }
    if (propositoSesion.present) {
      map['proposito_sesion'] = Variable<String?>(propositoSesion.value);
    }
    if (tituloUnidad.present) {
      map['titulo_unidad'] = Variable<String?>(tituloUnidad.value);
    }
    if (nroUnidad.present) {
      map['nro_unidad'] = Variable<int?>(nroUnidad.value);
    }
    if (competenciaId.present) {
      map['competencia_id'] = Variable<int>(competenciaId.value);
    }
    if (competenciaNombre.present) {
      map['competencia_nombre'] = Variable<String?>(competenciaNombre.value);
    }
    if (competenciaDescripcion.present) {
      map['competencia_descripcion'] =
          Variable<String?>(competenciaDescripcion.value);
    }
    if (competenciaTipoId.present) {
      map['competencia_tipo_id'] = Variable<int?>(competenciaTipoId.value);
    }
    if (superCompetenciaId.present) {
      map['super_competencia_id'] = Variable<int?>(superCompetenciaId.value);
    }
    if (superCompetenciaNombre.present) {
      map['super_competencia_nombre'] =
          Variable<String?>(superCompetenciaNombre.value);
    }
    if (superCompetenciaDescripcion.present) {
      map['super_competencia_descripcion'] =
          Variable<String?>(superCompetenciaDescripcion.value);
    }
    if (superCompetenciaTipoId.present) {
      map['super_competencia_tipo_id'] =
          Variable<int?>(superCompetenciaTipoId.value);
    }
    if (desempenioIcdId.present) {
      map['desempenio_icd_id'] = Variable<int>(desempenioIcdId.value);
    }
    if (DesempenioDescripcion.present) {
      map['desempenio_descripcion'] =
          Variable<String?>(DesempenioDescripcion.value);
    }
    if (peso.present) {
      map['peso'] = Variable<int?>(peso.value);
    }
    if (codigo.present) {
      map['codigo'] = Variable<String?>(codigo.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (url.present) {
      map['url'] = Variable<String?>(url.value);
    }
    if (desempenioId.present) {
      map['desempenio_id'] = Variable<int?>(desempenioId.value);
    }
    if (desempenioIcdDescripcion.present) {
      map['desempenio_icd_descripcion'] =
          Variable<String?>(desempenioIcdDescripcion.value);
    }
    if (icdId.present) {
      map['icd_id'] = Variable<int?>(icdId.value);
    }
    if (icdTitulo.present) {
      map['icd_titulo'] = Variable<String?>(icdTitulo.value);
    }
    if (icdDescripcion.present) {
      map['icd_descripcion'] = Variable<String?>(icdDescripcion.value);
    }
    if (icdAlias.present) {
      map['icd_alias'] = Variable<String?>(icdAlias.value);
    }
    if (campoTematicoId.present) {
      map['campo_tematico_id'] = Variable<int>(campoTematicoId.value);
    }
    if (campoTematicoTitulo.present) {
      map['campo_tematico_titulo'] =
          Variable<String?>(campoTematicoTitulo.value);
    }
    if (campoTematicoDescripcion.present) {
      map['campo_tematico_descripcion'] =
          Variable<String?>(campoTematicoDescripcion.value);
    }
    if (campoTematicoEstado.present) {
      map['campo_tematico_estado'] = Variable<int?>(campoTematicoEstado.value);
    }
    if (campoTematicoParentId.present) {
      map['campo_tematico_parent_id'] =
          Variable<int?>(campoTematicoParentId.value);
    }
    if (campoTematicoParentTitulo.present) {
      map['campo_tematico_parent_titulo'] =
          Variable<String?>(campoTematicoParentTitulo.value);
    }
    if (campoTematicoParentDescripcion.present) {
      map['campo_tematico_parent_descripcion'] =
          Variable<String?>(campoTematicoParentDescripcion.value);
    }
    if (campoTematicoParentEstado.present) {
      map['campo_tematico_parent_estado'] =
          Variable<int?>(campoTematicoParentEstado.value);
    }
    if (campoTematicoParentParentId.present) {
      map['campo_tematico_parent_parent_id'] =
          Variable<int?>(campoTematicoParentParentId.value);
    }
    if (calendarioPeriodoId.present) {
      map['calendario_periodo_id'] = Variable<int?>(calendarioPeriodoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CriterioCompanion(')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('unidadAprendiajeId: $unidadAprendiajeId, ')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('sesionAprendizajePadreId: $sesionAprendizajePadreId, ')
          ..write('tituloSesion: $tituloSesion, ')
          ..write('rolIdSesion: $rolIdSesion, ')
          ..write('nroSesion: $nroSesion, ')
          ..write('propositoSesion: $propositoSesion, ')
          ..write('tituloUnidad: $tituloUnidad, ')
          ..write('nroUnidad: $nroUnidad, ')
          ..write('competenciaId: $competenciaId, ')
          ..write('competenciaNombre: $competenciaNombre, ')
          ..write('competenciaDescripcion: $competenciaDescripcion, ')
          ..write('competenciaTipoId: $competenciaTipoId, ')
          ..write('superCompetenciaId: $superCompetenciaId, ')
          ..write('superCompetenciaNombre: $superCompetenciaNombre, ')
          ..write('superCompetenciaDescripcion: $superCompetenciaDescripcion, ')
          ..write('superCompetenciaTipoId: $superCompetenciaTipoId, ')
          ..write('desempenioIcdId: $desempenioIcdId, ')
          ..write('DesempenioDescripcion: $DesempenioDescripcion, ')
          ..write('peso: $peso, ')
          ..write('codigo: $codigo, ')
          ..write('tipoId: $tipoId, ')
          ..write('url: $url, ')
          ..write('desempenioId: $desempenioId, ')
          ..write('desempenioIcdDescripcion: $desempenioIcdDescripcion, ')
          ..write('icdId: $icdId, ')
          ..write('icdTitulo: $icdTitulo, ')
          ..write('icdDescripcion: $icdDescripcion, ')
          ..write('icdAlias: $icdAlias, ')
          ..write('campoTematicoId: $campoTematicoId, ')
          ..write('campoTematicoTitulo: $campoTematicoTitulo, ')
          ..write('campoTematicoDescripcion: $campoTematicoDescripcion, ')
          ..write('campoTematicoEstado: $campoTematicoEstado, ')
          ..write('campoTematicoParentId: $campoTematicoParentId, ')
          ..write('campoTematicoParentTitulo: $campoTematicoParentTitulo, ')
          ..write(
              'campoTematicoParentDescripcion: $campoTematicoParentDescripcion, ')
          ..write('campoTematicoParentEstado: $campoTematicoParentEstado, ')
          ..write('campoTematicoParentParentId: $campoTematicoParentParentId, ')
          ..write('calendarioPeriodoId: $calendarioPeriodoId')
          ..write(')'))
        .toString();
  }
}

class $CriterioTable extends Criterio
    with TableInfo<$CriterioTable, CriterioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CriterioTable(this._db, [this._alias]);
  final VerificationMeta _sesionAprendizajeIdMeta =
      const VerificationMeta('sesionAprendizajeId');
  late final GeneratedColumn<int?> sesionAprendizajeId = GeneratedColumn<int?>(
      'sesion_aprendizaje_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _unidadAprendiajeIdMeta =
      const VerificationMeta('unidadAprendiajeId');
  late final GeneratedColumn<int?> unidadAprendiajeId = GeneratedColumn<int?>(
      'unidad_aprendiaje_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _sesionAprendizajePadreIdMeta =
      const VerificationMeta('sesionAprendizajePadreId');
  late final GeneratedColumn<int?> sesionAprendizajePadreId =
      GeneratedColumn<int?>('sesion_aprendizaje_padre_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tituloSesionMeta =
      const VerificationMeta('tituloSesion');
  late final GeneratedColumn<String?> tituloSesion = GeneratedColumn<String?>(
      'titulo_sesion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _rolIdSesionMeta =
      const VerificationMeta('rolIdSesion');
  late final GeneratedColumn<int?> rolIdSesion = GeneratedColumn<int?>(
      'rol_id_sesion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nroSesionMeta = const VerificationMeta('nroSesion');
  late final GeneratedColumn<int?> nroSesion = GeneratedColumn<int?>(
      'nro_sesion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _propositoSesionMeta =
      const VerificationMeta('propositoSesion');
  late final GeneratedColumn<String?> propositoSesion =
      GeneratedColumn<String?>('proposito_sesion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tituloUnidadMeta =
      const VerificationMeta('tituloUnidad');
  late final GeneratedColumn<String?> tituloUnidad = GeneratedColumn<String?>(
      'titulo_unidad', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nroUnidadMeta = const VerificationMeta('nroUnidad');
  late final GeneratedColumn<int?> nroUnidad = GeneratedColumn<int?>(
      'nro_unidad', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _competenciaIdMeta =
      const VerificationMeta('competenciaId');
  late final GeneratedColumn<int?> competenciaId = GeneratedColumn<int?>(
      'competencia_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _competenciaNombreMeta =
      const VerificationMeta('competenciaNombre');
  late final GeneratedColumn<String?> competenciaNombre =
      GeneratedColumn<String?>('competencia_nombre', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _competenciaDescripcionMeta =
      const VerificationMeta('competenciaDescripcion');
  late final GeneratedColumn<String?> competenciaDescripcion =
      GeneratedColumn<String?>('competencia_descripcion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _competenciaTipoIdMeta =
      const VerificationMeta('competenciaTipoId');
  late final GeneratedColumn<int?> competenciaTipoId = GeneratedColumn<int?>(
      'competencia_tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _superCompetenciaIdMeta =
      const VerificationMeta('superCompetenciaId');
  late final GeneratedColumn<int?> superCompetenciaId = GeneratedColumn<int?>(
      'super_competencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _superCompetenciaNombreMeta =
      const VerificationMeta('superCompetenciaNombre');
  late final GeneratedColumn<String?> superCompetenciaNombre =
      GeneratedColumn<String?>('super_competencia_nombre', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _superCompetenciaDescripcionMeta =
      const VerificationMeta('superCompetenciaDescripcion');
  late final GeneratedColumn<String?> superCompetenciaDescripcion =
      GeneratedColumn<String?>(
          'super_competencia_descripcion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _superCompetenciaTipoIdMeta =
      const VerificationMeta('superCompetenciaTipoId');
  late final GeneratedColumn<int?> superCompetenciaTipoId =
      GeneratedColumn<int?>('super_competencia_tipo_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _desempenioIcdIdMeta =
      const VerificationMeta('desempenioIcdId');
  late final GeneratedColumn<int?> desempenioIcdId = GeneratedColumn<int?>(
      'desempenio_icd_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _DesempenioDescripcionMeta =
      const VerificationMeta('DesempenioDescripcion');
  late final GeneratedColumn<String?> DesempenioDescripcion =
      GeneratedColumn<String?>('desempenio_descripcion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _pesoMeta = const VerificationMeta('peso');
  late final GeneratedColumn<int?> peso = GeneratedColumn<int?>(
      'peso', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
      'codigo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _urlMeta = const VerificationMeta('url');
  late final GeneratedColumn<String?> url = GeneratedColumn<String?>(
      'url', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _desempenioIdMeta =
      const VerificationMeta('desempenioId');
  late final GeneratedColumn<int?> desempenioId = GeneratedColumn<int?>(
      'desempenio_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _desempenioIcdDescripcionMeta =
      const VerificationMeta('desempenioIcdDescripcion');
  late final GeneratedColumn<String?> desempenioIcdDescripcion =
      GeneratedColumn<String?>('desempenio_icd_descripcion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _icdIdMeta = const VerificationMeta('icdId');
  late final GeneratedColumn<int?> icdId = GeneratedColumn<int?>(
      'icd_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _icdTituloMeta = const VerificationMeta('icdTitulo');
  late final GeneratedColumn<String?> icdTitulo = GeneratedColumn<String?>(
      'icd_titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _icdDescripcionMeta =
      const VerificationMeta('icdDescripcion');
  late final GeneratedColumn<String?> icdDescripcion = GeneratedColumn<String?>(
      'icd_descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _icdAliasMeta = const VerificationMeta('icdAlias');
  late final GeneratedColumn<String?> icdAlias = GeneratedColumn<String?>(
      'icd_alias', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoIdMeta =
      const VerificationMeta('campoTematicoId');
  late final GeneratedColumn<int?> campoTematicoId = GeneratedColumn<int?>(
      'campo_tematico_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _campoTematicoTituloMeta =
      const VerificationMeta('campoTematicoTitulo');
  late final GeneratedColumn<String?> campoTematicoTitulo =
      GeneratedColumn<String?>('campo_tematico_titulo', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoDescripcionMeta =
      const VerificationMeta('campoTematicoDescripcion');
  late final GeneratedColumn<String?> campoTematicoDescripcion =
      GeneratedColumn<String?>('campo_tematico_descripcion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoEstadoMeta =
      const VerificationMeta('campoTematicoEstado');
  late final GeneratedColumn<int?> campoTematicoEstado = GeneratedColumn<int?>(
      'campo_tematico_estado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoParentIdMeta =
      const VerificationMeta('campoTematicoParentId');
  late final GeneratedColumn<int?> campoTematicoParentId =
      GeneratedColumn<int?>('campo_tematico_parent_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoParentTituloMeta =
      const VerificationMeta('campoTematicoParentTitulo');
  late final GeneratedColumn<String?> campoTematicoParentTitulo =
      GeneratedColumn<String?>(
          'campo_tematico_parent_titulo', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoParentDescripcionMeta =
      const VerificationMeta('campoTematicoParentDescripcion');
  late final GeneratedColumn<String?> campoTematicoParentDescripcion =
      GeneratedColumn<String?>(
          'campo_tematico_parent_descripcion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoParentEstadoMeta =
      const VerificationMeta('campoTematicoParentEstado');
  late final GeneratedColumn<int?> campoTematicoParentEstado =
      GeneratedColumn<int?>('campo_tematico_parent_estado', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoParentParentIdMeta =
      const VerificationMeta('campoTematicoParentParentId');
  late final GeneratedColumn<int?> campoTematicoParentParentId =
      GeneratedColumn<int?>(
          'campo_tematico_parent_parent_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _calendarioPeriodoIdMeta =
      const VerificationMeta('calendarioPeriodoId');
  late final GeneratedColumn<int?> calendarioPeriodoId = GeneratedColumn<int?>(
      'calendario_periodo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        sesionAprendizajeId,
        unidadAprendiajeId,
        silaboEventoId,
        sesionAprendizajePadreId,
        tituloSesion,
        rolIdSesion,
        nroSesion,
        propositoSesion,
        tituloUnidad,
        nroUnidad,
        competenciaId,
        competenciaNombre,
        competenciaDescripcion,
        competenciaTipoId,
        superCompetenciaId,
        superCompetenciaNombre,
        superCompetenciaDescripcion,
        superCompetenciaTipoId,
        desempenioIcdId,
        DesempenioDescripcion,
        peso,
        codigo,
        tipoId,
        url,
        desempenioId,
        desempenioIcdDescripcion,
        icdId,
        icdTitulo,
        icdDescripcion,
        icdAlias,
        campoTematicoId,
        campoTematicoTitulo,
        campoTematicoDescripcion,
        campoTematicoEstado,
        campoTematicoParentId,
        campoTematicoParentTitulo,
        campoTematicoParentDescripcion,
        campoTematicoParentEstado,
        campoTematicoParentParentId,
        calendarioPeriodoId
      ];
  @override
  String get aliasedName => _alias ?? 'criterio';
  @override
  String get actualTableName => 'criterio';
  @override
  VerificationContext validateIntegrity(Insertable<CriterioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sesion_aprendizaje_id')) {
      context.handle(
          _sesionAprendizajeIdMeta,
          sesionAprendizajeId.isAcceptableOrUnknown(
              data['sesion_aprendizaje_id']!, _sesionAprendizajeIdMeta));
    } else if (isInserting) {
      context.missing(_sesionAprendizajeIdMeta);
    }
    if (data.containsKey('unidad_aprendiaje_id')) {
      context.handle(
          _unidadAprendiajeIdMeta,
          unidadAprendiajeId.isAcceptableOrUnknown(
              data['unidad_aprendiaje_id']!, _unidadAprendiajeIdMeta));
    } else if (isInserting) {
      context.missing(_unidadAprendiajeIdMeta);
    }
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    } else if (isInserting) {
      context.missing(_silaboEventoIdMeta);
    }
    if (data.containsKey('sesion_aprendizaje_padre_id')) {
      context.handle(
          _sesionAprendizajePadreIdMeta,
          sesionAprendizajePadreId.isAcceptableOrUnknown(
              data['sesion_aprendizaje_padre_id']!,
              _sesionAprendizajePadreIdMeta));
    }
    if (data.containsKey('titulo_sesion')) {
      context.handle(
          _tituloSesionMeta,
          tituloSesion.isAcceptableOrUnknown(
              data['titulo_sesion']!, _tituloSesionMeta));
    }
    if (data.containsKey('rol_id_sesion')) {
      context.handle(
          _rolIdSesionMeta,
          rolIdSesion.isAcceptableOrUnknown(
              data['rol_id_sesion']!, _rolIdSesionMeta));
    }
    if (data.containsKey('nro_sesion')) {
      context.handle(_nroSesionMeta,
          nroSesion.isAcceptableOrUnknown(data['nro_sesion']!, _nroSesionMeta));
    }
    if (data.containsKey('proposito_sesion')) {
      context.handle(
          _propositoSesionMeta,
          propositoSesion.isAcceptableOrUnknown(
              data['proposito_sesion']!, _propositoSesionMeta));
    }
    if (data.containsKey('titulo_unidad')) {
      context.handle(
          _tituloUnidadMeta,
          tituloUnidad.isAcceptableOrUnknown(
              data['titulo_unidad']!, _tituloUnidadMeta));
    }
    if (data.containsKey('nro_unidad')) {
      context.handle(_nroUnidadMeta,
          nroUnidad.isAcceptableOrUnknown(data['nro_unidad']!, _nroUnidadMeta));
    }
    if (data.containsKey('competencia_id')) {
      context.handle(
          _competenciaIdMeta,
          competenciaId.isAcceptableOrUnknown(
              data['competencia_id']!, _competenciaIdMeta));
    } else if (isInserting) {
      context.missing(_competenciaIdMeta);
    }
    if (data.containsKey('competencia_nombre')) {
      context.handle(
          _competenciaNombreMeta,
          competenciaNombre.isAcceptableOrUnknown(
              data['competencia_nombre']!, _competenciaNombreMeta));
    }
    if (data.containsKey('competencia_descripcion')) {
      context.handle(
          _competenciaDescripcionMeta,
          competenciaDescripcion.isAcceptableOrUnknown(
              data['competencia_descripcion']!, _competenciaDescripcionMeta));
    }
    if (data.containsKey('competencia_tipo_id')) {
      context.handle(
          _competenciaTipoIdMeta,
          competenciaTipoId.isAcceptableOrUnknown(
              data['competencia_tipo_id']!, _competenciaTipoIdMeta));
    }
    if (data.containsKey('super_competencia_id')) {
      context.handle(
          _superCompetenciaIdMeta,
          superCompetenciaId.isAcceptableOrUnknown(
              data['super_competencia_id']!, _superCompetenciaIdMeta));
    }
    if (data.containsKey('super_competencia_nombre')) {
      context.handle(
          _superCompetenciaNombreMeta,
          superCompetenciaNombre.isAcceptableOrUnknown(
              data['super_competencia_nombre']!, _superCompetenciaNombreMeta));
    }
    if (data.containsKey('super_competencia_descripcion')) {
      context.handle(
          _superCompetenciaDescripcionMeta,
          superCompetenciaDescripcion.isAcceptableOrUnknown(
              data['super_competencia_descripcion']!,
              _superCompetenciaDescripcionMeta));
    }
    if (data.containsKey('super_competencia_tipo_id')) {
      context.handle(
          _superCompetenciaTipoIdMeta,
          superCompetenciaTipoId.isAcceptableOrUnknown(
              data['super_competencia_tipo_id']!, _superCompetenciaTipoIdMeta));
    }
    if (data.containsKey('desempenio_icd_id')) {
      context.handle(
          _desempenioIcdIdMeta,
          desempenioIcdId.isAcceptableOrUnknown(
              data['desempenio_icd_id']!, _desempenioIcdIdMeta));
    } else if (isInserting) {
      context.missing(_desempenioIcdIdMeta);
    }
    if (data.containsKey('desempenio_descripcion')) {
      context.handle(
          _DesempenioDescripcionMeta,
          DesempenioDescripcion.isAcceptableOrUnknown(
              data['desempenio_descripcion']!, _DesempenioDescripcionMeta));
    }
    if (data.containsKey('peso')) {
      context.handle(
          _pesoMeta, peso.isAcceptableOrUnknown(data['peso']!, _pesoMeta));
    }
    if (data.containsKey('codigo')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['codigo']!, _codigoMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('url')) {
      context.handle(
          _urlMeta, url.isAcceptableOrUnknown(data['url']!, _urlMeta));
    }
    if (data.containsKey('desempenio_id')) {
      context.handle(
          _desempenioIdMeta,
          desempenioId.isAcceptableOrUnknown(
              data['desempenio_id']!, _desempenioIdMeta));
    }
    if (data.containsKey('desempenio_icd_descripcion')) {
      context.handle(
          _desempenioIcdDescripcionMeta,
          desempenioIcdDescripcion.isAcceptableOrUnknown(
              data['desempenio_icd_descripcion']!,
              _desempenioIcdDescripcionMeta));
    }
    if (data.containsKey('icd_id')) {
      context.handle(
          _icdIdMeta, icdId.isAcceptableOrUnknown(data['icd_id']!, _icdIdMeta));
    }
    if (data.containsKey('icd_titulo')) {
      context.handle(_icdTituloMeta,
          icdTitulo.isAcceptableOrUnknown(data['icd_titulo']!, _icdTituloMeta));
    }
    if (data.containsKey('icd_descripcion')) {
      context.handle(
          _icdDescripcionMeta,
          icdDescripcion.isAcceptableOrUnknown(
              data['icd_descripcion']!, _icdDescripcionMeta));
    }
    if (data.containsKey('icd_alias')) {
      context.handle(_icdAliasMeta,
          icdAlias.isAcceptableOrUnknown(data['icd_alias']!, _icdAliasMeta));
    }
    if (data.containsKey('campo_tematico_id')) {
      context.handle(
          _campoTematicoIdMeta,
          campoTematicoId.isAcceptableOrUnknown(
              data['campo_tematico_id']!, _campoTematicoIdMeta));
    } else if (isInserting) {
      context.missing(_campoTematicoIdMeta);
    }
    if (data.containsKey('campo_tematico_titulo')) {
      context.handle(
          _campoTematicoTituloMeta,
          campoTematicoTitulo.isAcceptableOrUnknown(
              data['campo_tematico_titulo']!, _campoTematicoTituloMeta));
    }
    if (data.containsKey('campo_tematico_descripcion')) {
      context.handle(
          _campoTematicoDescripcionMeta,
          campoTematicoDescripcion.isAcceptableOrUnknown(
              data['campo_tematico_descripcion']!,
              _campoTematicoDescripcionMeta));
    }
    if (data.containsKey('campo_tematico_estado')) {
      context.handle(
          _campoTematicoEstadoMeta,
          campoTematicoEstado.isAcceptableOrUnknown(
              data['campo_tematico_estado']!, _campoTematicoEstadoMeta));
    }
    if (data.containsKey('campo_tematico_parent_id')) {
      context.handle(
          _campoTematicoParentIdMeta,
          campoTematicoParentId.isAcceptableOrUnknown(
              data['campo_tematico_parent_id']!, _campoTematicoParentIdMeta));
    }
    if (data.containsKey('campo_tematico_parent_titulo')) {
      context.handle(
          _campoTematicoParentTituloMeta,
          campoTematicoParentTitulo.isAcceptableOrUnknown(
              data['campo_tematico_parent_titulo']!,
              _campoTematicoParentTituloMeta));
    }
    if (data.containsKey('campo_tematico_parent_descripcion')) {
      context.handle(
          _campoTematicoParentDescripcionMeta,
          campoTematicoParentDescripcion.isAcceptableOrUnknown(
              data['campo_tematico_parent_descripcion']!,
              _campoTematicoParentDescripcionMeta));
    }
    if (data.containsKey('campo_tematico_parent_estado')) {
      context.handle(
          _campoTematicoParentEstadoMeta,
          campoTematicoParentEstado.isAcceptableOrUnknown(
              data['campo_tematico_parent_estado']!,
              _campoTematicoParentEstadoMeta));
    }
    if (data.containsKey('campo_tematico_parent_parent_id')) {
      context.handle(
          _campoTematicoParentParentIdMeta,
          campoTematicoParentParentId.isAcceptableOrUnknown(
              data['campo_tematico_parent_parent_id']!,
              _campoTematicoParentParentIdMeta));
    }
    if (data.containsKey('calendario_periodo_id')) {
      context.handle(
          _calendarioPeriodoIdMeta,
          calendarioPeriodoId.isAcceptableOrUnknown(
              data['calendario_periodo_id']!, _calendarioPeriodoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {
        silaboEventoId,
        unidadAprendiajeId,
        sesionAprendizajeId,
        competenciaId,
        desempenioIcdId,
        campoTematicoId
      };
  @override
  CriterioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CriterioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CriterioTable createAlias(String alias) {
    return $CriterioTable(_db, alias);
  }
}

class TipoEvaluacionRubroData extends DataClass
    implements Insertable<TipoEvaluacionRubroData> {
  final int tipoEvaluacionId;
  final String? nombre;
  final bool? estado;
  TipoEvaluacionRubroData(
      {required this.tipoEvaluacionId, this.nombre, this.estado});
  factory TipoEvaluacionRubroData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TipoEvaluacionRubroData(
      tipoEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}tipo_evaluacion_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['tipo_evaluacion_id'] = Variable<int>(tipoEvaluacionId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    return map;
  }

  TipoEvaluacionRubroCompanion toCompanion(bool nullToAbsent) {
    return TipoEvaluacionRubroCompanion(
      tipoEvaluacionId: Value(tipoEvaluacionId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
    );
  }

  factory TipoEvaluacionRubroData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return TipoEvaluacionRubroData(
      tipoEvaluacionId: serializer.fromJson<int>(json['tipoEvaluacionId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      estado: serializer.fromJson<bool?>(json['estado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'tipoEvaluacionId': serializer.toJson<int>(tipoEvaluacionId),
      'nombre': serializer.toJson<String?>(nombre),
      'estado': serializer.toJson<bool?>(estado),
    };
  }

  TipoEvaluacionRubroData copyWith(
          {int? tipoEvaluacionId, String? nombre, bool? estado}) =>
      TipoEvaluacionRubroData(
        tipoEvaluacionId: tipoEvaluacionId ?? this.tipoEvaluacionId,
        nombre: nombre ?? this.nombre,
        estado: estado ?? this.estado,
      );
  @override
  String toString() {
    return (StringBuffer('TipoEvaluacionRubroData(')
          ..write('tipoEvaluacionId: $tipoEvaluacionId, ')
          ..write('nombre: $nombre, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      tipoEvaluacionId.hashCode, $mrjc(nombre.hashCode, estado.hashCode)));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TipoEvaluacionRubroData &&
          other.tipoEvaluacionId == this.tipoEvaluacionId &&
          other.nombre == this.nombre &&
          other.estado == this.estado);
}

class TipoEvaluacionRubroCompanion
    extends UpdateCompanion<TipoEvaluacionRubroData> {
  final Value<int> tipoEvaluacionId;
  final Value<String?> nombre;
  final Value<bool?> estado;
  const TipoEvaluacionRubroCompanion({
    this.tipoEvaluacionId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estado = const Value.absent(),
  });
  TipoEvaluacionRubroCompanion.insert({
    this.tipoEvaluacionId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.estado = const Value.absent(),
  });
  static Insertable<TipoEvaluacionRubroData> custom({
    Expression<int>? tipoEvaluacionId,
    Expression<String?>? nombre,
    Expression<bool?>? estado,
  }) {
    return RawValuesInsertable({
      if (tipoEvaluacionId != null) 'tipo_evaluacion_id': tipoEvaluacionId,
      if (nombre != null) 'nombre': nombre,
      if (estado != null) 'estado': estado,
    });
  }

  TipoEvaluacionRubroCompanion copyWith(
      {Value<int>? tipoEvaluacionId,
      Value<String?>? nombre,
      Value<bool?>? estado}) {
    return TipoEvaluacionRubroCompanion(
      tipoEvaluacionId: tipoEvaluacionId ?? this.tipoEvaluacionId,
      nombre: nombre ?? this.nombre,
      estado: estado ?? this.estado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (tipoEvaluacionId.present) {
      map['tipo_evaluacion_id'] = Variable<int>(tipoEvaluacionId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TipoEvaluacionRubroCompanion(')
          ..write('tipoEvaluacionId: $tipoEvaluacionId, ')
          ..write('nombre: $nombre, ')
          ..write('estado: $estado')
          ..write(')'))
        .toString();
  }
}

class $TipoEvaluacionRubroTable extends TipoEvaluacionRubro
    with TableInfo<$TipoEvaluacionRubroTable, TipoEvaluacionRubroData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $TipoEvaluacionRubroTable(this._db, [this._alias]);
  final VerificationMeta _tipoEvaluacionIdMeta =
      const VerificationMeta('tipoEvaluacionId');
  late final GeneratedColumn<int?> tipoEvaluacionId = GeneratedColumn<int?>(
      'tipo_evaluacion_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns => [tipoEvaluacionId, nombre, estado];
  @override
  String get aliasedName => _alias ?? 'tipo_evaluacion_rubro';
  @override
  String get actualTableName => 'tipo_evaluacion_rubro';
  @override
  VerificationContext validateIntegrity(
      Insertable<TipoEvaluacionRubroData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('tipo_evaluacion_id')) {
      context.handle(
          _tipoEvaluacionIdMeta,
          tipoEvaluacionId.isAcceptableOrUnknown(
              data['tipo_evaluacion_id']!, _tipoEvaluacionIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {tipoEvaluacionId};
  @override
  TipoEvaluacionRubroData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return TipoEvaluacionRubroData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TipoEvaluacionRubroTable createAlias(String alias) {
    return $TipoEvaluacionRubroTable(_db, alias);
  }
}

class TiposRubroData extends DataClass implements Insertable<TiposRubroData> {
  final int tipoId;
  final String? objeto;
  final String? concepto;
  final String? nombre;
  final String? codigo;
  final int? parentId;
  TiposRubroData(
      {required this.tipoId,
      this.objeto,
      this.concepto,
      this.nombre,
      this.codigo,
      this.parentId});
  factory TiposRubroData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TiposRubroData(
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id'])!,
      objeto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}objeto']),
      concepto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}concepto']),
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      codigo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}codigo']),
      parentId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parent_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['tipo_id'] = Variable<int>(tipoId);
    if (!nullToAbsent || objeto != null) {
      map['objeto'] = Variable<String?>(objeto);
    }
    if (!nullToAbsent || concepto != null) {
      map['concepto'] = Variable<String?>(concepto);
    }
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || codigo != null) {
      map['codigo'] = Variable<String?>(codigo);
    }
    if (!nullToAbsent || parentId != null) {
      map['parent_id'] = Variable<int?>(parentId);
    }
    return map;
  }

  TiposRubroCompanion toCompanion(bool nullToAbsent) {
    return TiposRubroCompanion(
      tipoId: Value(tipoId),
      objeto:
          objeto == null && nullToAbsent ? const Value.absent() : Value(objeto),
      concepto: concepto == null && nullToAbsent
          ? const Value.absent()
          : Value(concepto),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      parentId: parentId == null && nullToAbsent
          ? const Value.absent()
          : Value(parentId),
    );
  }

  factory TiposRubroData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return TiposRubroData(
      tipoId: serializer.fromJson<int>(json['tipoId']),
      objeto: serializer.fromJson<String?>(json['objeto']),
      concepto: serializer.fromJson<String?>(json['concepto']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      parentId: serializer.fromJson<int?>(json['parentId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'tipoId': serializer.toJson<int>(tipoId),
      'objeto': serializer.toJson<String?>(objeto),
      'concepto': serializer.toJson<String?>(concepto),
      'nombre': serializer.toJson<String?>(nombre),
      'codigo': serializer.toJson<String?>(codigo),
      'parentId': serializer.toJson<int?>(parentId),
    };
  }

  TiposRubroData copyWith(
          {int? tipoId,
          String? objeto,
          String? concepto,
          String? nombre,
          String? codigo,
          int? parentId}) =>
      TiposRubroData(
        tipoId: tipoId ?? this.tipoId,
        objeto: objeto ?? this.objeto,
        concepto: concepto ?? this.concepto,
        nombre: nombre ?? this.nombre,
        codigo: codigo ?? this.codigo,
        parentId: parentId ?? this.parentId,
      );
  @override
  String toString() {
    return (StringBuffer('TiposRubroData(')
          ..write('tipoId: $tipoId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('codigo: $codigo, ')
          ..write('parentId: $parentId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      tipoId.hashCode,
      $mrjc(
          objeto.hashCode,
          $mrjc(
              concepto.hashCode,
              $mrjc(nombre.hashCode,
                  $mrjc(codigo.hashCode, parentId.hashCode))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TiposRubroData &&
          other.tipoId == this.tipoId &&
          other.objeto == this.objeto &&
          other.concepto == this.concepto &&
          other.nombre == this.nombre &&
          other.codigo == this.codigo &&
          other.parentId == this.parentId);
}

class TiposRubroCompanion extends UpdateCompanion<TiposRubroData> {
  final Value<int> tipoId;
  final Value<String?> objeto;
  final Value<String?> concepto;
  final Value<String?> nombre;
  final Value<String?> codigo;
  final Value<int?> parentId;
  const TiposRubroCompanion({
    this.tipoId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.codigo = const Value.absent(),
    this.parentId = const Value.absent(),
  });
  TiposRubroCompanion.insert({
    this.tipoId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.codigo = const Value.absent(),
    this.parentId = const Value.absent(),
  });
  static Insertable<TiposRubroData> custom({
    Expression<int>? tipoId,
    Expression<String?>? objeto,
    Expression<String?>? concepto,
    Expression<String?>? nombre,
    Expression<String?>? codigo,
    Expression<int?>? parentId,
  }) {
    return RawValuesInsertable({
      if (tipoId != null) 'tipo_id': tipoId,
      if (objeto != null) 'objeto': objeto,
      if (concepto != null) 'concepto': concepto,
      if (nombre != null) 'nombre': nombre,
      if (codigo != null) 'codigo': codigo,
      if (parentId != null) 'parent_id': parentId,
    });
  }

  TiposRubroCompanion copyWith(
      {Value<int>? tipoId,
      Value<String?>? objeto,
      Value<String?>? concepto,
      Value<String?>? nombre,
      Value<String?>? codigo,
      Value<int?>? parentId}) {
    return TiposRubroCompanion(
      tipoId: tipoId ?? this.tipoId,
      objeto: objeto ?? this.objeto,
      concepto: concepto ?? this.concepto,
      nombre: nombre ?? this.nombre,
      codigo: codigo ?? this.codigo,
      parentId: parentId ?? this.parentId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (tipoId.present) {
      map['tipo_id'] = Variable<int>(tipoId.value);
    }
    if (objeto.present) {
      map['objeto'] = Variable<String?>(objeto.value);
    }
    if (concepto.present) {
      map['concepto'] = Variable<String?>(concepto.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (codigo.present) {
      map['codigo'] = Variable<String?>(codigo.value);
    }
    if (parentId.present) {
      map['parent_id'] = Variable<int?>(parentId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TiposRubroCompanion(')
          ..write('tipoId: $tipoId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('codigo: $codigo, ')
          ..write('parentId: $parentId')
          ..write(')'))
        .toString();
  }
}

class $TiposRubroTable extends TiposRubro
    with TableInfo<$TiposRubroTable, TiposRubroData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $TiposRubroTable(this._db, [this._alias]);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _objetoMeta = const VerificationMeta('objeto');
  late final GeneratedColumn<String?> objeto = GeneratedColumn<String?>(
      'objeto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _conceptoMeta = const VerificationMeta('concepto');
  late final GeneratedColumn<String?> concepto = GeneratedColumn<String?>(
      'concepto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
      'codigo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _parentIdMeta = const VerificationMeta('parentId');
  late final GeneratedColumn<int?> parentId = GeneratedColumn<int?>(
      'parent_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [tipoId, objeto, concepto, nombre, codigo, parentId];
  @override
  String get aliasedName => _alias ?? 'tipos_rubro';
  @override
  String get actualTableName => 'tipos_rubro';
  @override
  VerificationContext validateIntegrity(Insertable<TiposRubroData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('objeto')) {
      context.handle(_objetoMeta,
          objeto.isAcceptableOrUnknown(data['objeto']!, _objetoMeta));
    }
    if (data.containsKey('concepto')) {
      context.handle(_conceptoMeta,
          concepto.isAcceptableOrUnknown(data['concepto']!, _conceptoMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('codigo')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['codigo']!, _codigoMeta));
    }
    if (data.containsKey('parent_id')) {
      context.handle(_parentIdMeta,
          parentId.isAcceptableOrUnknown(data['parent_id']!, _parentIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {tipoId};
  @override
  TiposRubroData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TiposRubroData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TiposRubroTable createAlias(String alias) {
    return $TiposRubroTable(_db, alias);
  }
}

class TipoNotaRubroData extends DataClass
    implements Insertable<TipoNotaRubroData> {
  final String tipoNotaId;
  final String? nombre;
  final int? tipoId;
  final String? tiponombre;
  final String? valorDefecto;
  final double? longitudPaso;
  final bool? intervalo;
  final bool? estatico;
  final int? entidadId;
  final int? georeferenciaId;
  final int? organigramaId;
  final int? estadoId;
  final int? tipoFuenteId;
  final int? valorMinimo;
  final int? valorMaximo;
  final int? escalaEvaluacionId;
  final String? escalanombre;
  final int? escalavalorMinimo;
  final int? escalavalorMaximo;
  final int? escalaestado;
  final bool? escaladefecto;
  final int? escalaentidadId;
  final int? programaEducativoId;
  TipoNotaRubroData(
      {required this.tipoNotaId,
      this.nombre,
      this.tipoId,
      this.tiponombre,
      this.valorDefecto,
      this.longitudPaso,
      this.intervalo,
      this.estatico,
      this.entidadId,
      this.georeferenciaId,
      this.organigramaId,
      this.estadoId,
      this.tipoFuenteId,
      this.valorMinimo,
      this.valorMaximo,
      this.escalaEvaluacionId,
      this.escalanombre,
      this.escalavalorMinimo,
      this.escalavalorMaximo,
      this.escalaestado,
      this.escaladefecto,
      this.escalaentidadId,
      this.programaEducativoId});
  factory TipoNotaRubroData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TipoNotaRubroData(
      tipoNotaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_nota_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      tiponombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tiponombre']),
      valorDefecto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_defecto']),
      longitudPaso: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}longitud_paso']),
      intervalo: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}intervalo']),
      estatico: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estatico']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      organigramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}organigrama_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      tipoFuenteId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_fuente_id']),
      valorMinimo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_minimo']),
      valorMaximo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_maximo']),
      escalaEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}escala_evaluacion_id']),
      escalanombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escalanombre']),
      escalavalorMinimo: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}escalavalor_minimo']),
      escalavalorMaximo: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}escalavalor_maximo']),
      escalaestado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escalaestado']),
      escaladefecto: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escaladefecto']),
      escalaentidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escalaentidad_id']),
      programaEducativoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}programa_educativo_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['tipo_nota_id'] = Variable<String>(tipoNotaId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || tiponombre != null) {
      map['tiponombre'] = Variable<String?>(tiponombre);
    }
    if (!nullToAbsent || valorDefecto != null) {
      map['valor_defecto'] = Variable<String?>(valorDefecto);
    }
    if (!nullToAbsent || longitudPaso != null) {
      map['longitud_paso'] = Variable<double?>(longitudPaso);
    }
    if (!nullToAbsent || intervalo != null) {
      map['intervalo'] = Variable<bool?>(intervalo);
    }
    if (!nullToAbsent || estatico != null) {
      map['estatico'] = Variable<bool?>(estatico);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || organigramaId != null) {
      map['organigrama_id'] = Variable<int?>(organigramaId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || tipoFuenteId != null) {
      map['tipo_fuente_id'] = Variable<int?>(tipoFuenteId);
    }
    if (!nullToAbsent || valorMinimo != null) {
      map['valor_minimo'] = Variable<int?>(valorMinimo);
    }
    if (!nullToAbsent || valorMaximo != null) {
      map['valor_maximo'] = Variable<int?>(valorMaximo);
    }
    if (!nullToAbsent || escalaEvaluacionId != null) {
      map['escala_evaluacion_id'] = Variable<int?>(escalaEvaluacionId);
    }
    if (!nullToAbsent || escalanombre != null) {
      map['escalanombre'] = Variable<String?>(escalanombre);
    }
    if (!nullToAbsent || escalavalorMinimo != null) {
      map['escalavalor_minimo'] = Variable<int?>(escalavalorMinimo);
    }
    if (!nullToAbsent || escalavalorMaximo != null) {
      map['escalavalor_maximo'] = Variable<int?>(escalavalorMaximo);
    }
    if (!nullToAbsent || escalaestado != null) {
      map['escalaestado'] = Variable<int?>(escalaestado);
    }
    if (!nullToAbsent || escaladefecto != null) {
      map['escaladefecto'] = Variable<bool?>(escaladefecto);
    }
    if (!nullToAbsent || escalaentidadId != null) {
      map['escalaentidad_id'] = Variable<int?>(escalaentidadId);
    }
    if (!nullToAbsent || programaEducativoId != null) {
      map['programa_educativo_id'] = Variable<int?>(programaEducativoId);
    }
    return map;
  }

  TipoNotaRubroCompanion toCompanion(bool nullToAbsent) {
    return TipoNotaRubroCompanion(
      tipoNotaId: Value(tipoNotaId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      tiponombre: tiponombre == null && nullToAbsent
          ? const Value.absent()
          : Value(tiponombre),
      valorDefecto: valorDefecto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDefecto),
      longitudPaso: longitudPaso == null && nullToAbsent
          ? const Value.absent()
          : Value(longitudPaso),
      intervalo: intervalo == null && nullToAbsent
          ? const Value.absent()
          : Value(intervalo),
      estatico: estatico == null && nullToAbsent
          ? const Value.absent()
          : Value(estatico),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      organigramaId: organigramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(organigramaId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      tipoFuenteId: tipoFuenteId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoFuenteId),
      valorMinimo: valorMinimo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMinimo),
      valorMaximo: valorMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMaximo),
      escalaEvaluacionId: escalaEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(escalaEvaluacionId),
      escalanombre: escalanombre == null && nullToAbsent
          ? const Value.absent()
          : Value(escalanombre),
      escalavalorMinimo: escalavalorMinimo == null && nullToAbsent
          ? const Value.absent()
          : Value(escalavalorMinimo),
      escalavalorMaximo: escalavalorMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(escalavalorMaximo),
      escalaestado: escalaestado == null && nullToAbsent
          ? const Value.absent()
          : Value(escalaestado),
      escaladefecto: escaladefecto == null && nullToAbsent
          ? const Value.absent()
          : Value(escaladefecto),
      escalaentidadId: escalaentidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(escalaentidadId),
      programaEducativoId: programaEducativoId == null && nullToAbsent
          ? const Value.absent()
          : Value(programaEducativoId),
    );
  }

  factory TipoNotaRubroData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return TipoNotaRubroData(
      tipoNotaId: serializer.fromJson<String>(json['tipoNotaId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      tiponombre: serializer.fromJson<String?>(json['tiponombre']),
      valorDefecto: serializer.fromJson<String?>(json['valorDefecto']),
      longitudPaso: serializer.fromJson<double?>(json['longitudPaso']),
      intervalo: serializer.fromJson<bool?>(json['intervalo']),
      estatico: serializer.fromJson<bool?>(json['estatico']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      organigramaId: serializer.fromJson<int?>(json['organigramaId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      tipoFuenteId: serializer.fromJson<int?>(json['tipoFuenteId']),
      valorMinimo: serializer.fromJson<int?>(json['valorMinimo']),
      valorMaximo: serializer.fromJson<int?>(json['valorMaximo']),
      escalaEvaluacionId: serializer.fromJson<int?>(json['escalaEvaluacionId']),
      escalanombre: serializer.fromJson<String?>(json['escalanombre']),
      escalavalorMinimo: serializer.fromJson<int?>(json['escalavalorMinimo']),
      escalavalorMaximo: serializer.fromJson<int?>(json['escalavalorMaximo']),
      escalaestado: serializer.fromJson<int?>(json['escalaestado']),
      escaladefecto: serializer.fromJson<bool?>(json['escaladefecto']),
      escalaentidadId: serializer.fromJson<int?>(json['escalaentidadId']),
      programaEducativoId:
          serializer.fromJson<int?>(json['programaEducativoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'tipoNotaId': serializer.toJson<String>(tipoNotaId),
      'nombre': serializer.toJson<String?>(nombre),
      'tipoId': serializer.toJson<int?>(tipoId),
      'tiponombre': serializer.toJson<String?>(tiponombre),
      'valorDefecto': serializer.toJson<String?>(valorDefecto),
      'longitudPaso': serializer.toJson<double?>(longitudPaso),
      'intervalo': serializer.toJson<bool?>(intervalo),
      'estatico': serializer.toJson<bool?>(estatico),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'organigramaId': serializer.toJson<int?>(organigramaId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'tipoFuenteId': serializer.toJson<int?>(tipoFuenteId),
      'valorMinimo': serializer.toJson<int?>(valorMinimo),
      'valorMaximo': serializer.toJson<int?>(valorMaximo),
      'escalaEvaluacionId': serializer.toJson<int?>(escalaEvaluacionId),
      'escalanombre': serializer.toJson<String?>(escalanombre),
      'escalavalorMinimo': serializer.toJson<int?>(escalavalorMinimo),
      'escalavalorMaximo': serializer.toJson<int?>(escalavalorMaximo),
      'escalaestado': serializer.toJson<int?>(escalaestado),
      'escaladefecto': serializer.toJson<bool?>(escaladefecto),
      'escalaentidadId': serializer.toJson<int?>(escalaentidadId),
      'programaEducativoId': serializer.toJson<int?>(programaEducativoId),
    };
  }

  TipoNotaRubroData copyWith(
          {String? tipoNotaId,
          String? nombre,
          int? tipoId,
          String? tiponombre,
          String? valorDefecto,
          double? longitudPaso,
          bool? intervalo,
          bool? estatico,
          int? entidadId,
          int? georeferenciaId,
          int? organigramaId,
          int? estadoId,
          int? tipoFuenteId,
          int? valorMinimo,
          int? valorMaximo,
          int? escalaEvaluacionId,
          String? escalanombre,
          int? escalavalorMinimo,
          int? escalavalorMaximo,
          int? escalaestado,
          bool? escaladefecto,
          int? escalaentidadId,
          int? programaEducativoId}) =>
      TipoNotaRubroData(
        tipoNotaId: tipoNotaId ?? this.tipoNotaId,
        nombre: nombre ?? this.nombre,
        tipoId: tipoId ?? this.tipoId,
        tiponombre: tiponombre ?? this.tiponombre,
        valorDefecto: valorDefecto ?? this.valorDefecto,
        longitudPaso: longitudPaso ?? this.longitudPaso,
        intervalo: intervalo ?? this.intervalo,
        estatico: estatico ?? this.estatico,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        organigramaId: organigramaId ?? this.organigramaId,
        estadoId: estadoId ?? this.estadoId,
        tipoFuenteId: tipoFuenteId ?? this.tipoFuenteId,
        valorMinimo: valorMinimo ?? this.valorMinimo,
        valorMaximo: valorMaximo ?? this.valorMaximo,
        escalaEvaluacionId: escalaEvaluacionId ?? this.escalaEvaluacionId,
        escalanombre: escalanombre ?? this.escalanombre,
        escalavalorMinimo: escalavalorMinimo ?? this.escalavalorMinimo,
        escalavalorMaximo: escalavalorMaximo ?? this.escalavalorMaximo,
        escalaestado: escalaestado ?? this.escalaestado,
        escaladefecto: escaladefecto ?? this.escaladefecto,
        escalaentidadId: escalaentidadId ?? this.escalaentidadId,
        programaEducativoId: programaEducativoId ?? this.programaEducativoId,
      );
  @override
  String toString() {
    return (StringBuffer('TipoNotaRubroData(')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('nombre: $nombre, ')
          ..write('tipoId: $tipoId, ')
          ..write('tiponombre: $tiponombre, ')
          ..write('valorDefecto: $valorDefecto, ')
          ..write('longitudPaso: $longitudPaso, ')
          ..write('intervalo: $intervalo, ')
          ..write('estatico: $estatico, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoFuenteId: $tipoFuenteId, ')
          ..write('valorMinimo: $valorMinimo, ')
          ..write('valorMaximo: $valorMaximo, ')
          ..write('escalaEvaluacionId: $escalaEvaluacionId, ')
          ..write('escalanombre: $escalanombre, ')
          ..write('escalavalorMinimo: $escalavalorMinimo, ')
          ..write('escalavalorMaximo: $escalavalorMaximo, ')
          ..write('escalaestado: $escalaestado, ')
          ..write('escaladefecto: $escaladefecto, ')
          ..write('escalaentidadId: $escalaentidadId, ')
          ..write('programaEducativoId: $programaEducativoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      tipoNotaId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              tipoId.hashCode,
              $mrjc(
                  tiponombre.hashCode,
                  $mrjc(
                      valorDefecto.hashCode,
                      $mrjc(
                          longitudPaso.hashCode,
                          $mrjc(
                              intervalo.hashCode,
                              $mrjc(
                                  estatico.hashCode,
                                  $mrjc(
                                      entidadId.hashCode,
                                      $mrjc(
                                          georeferenciaId.hashCode,
                                          $mrjc(
                                              organigramaId.hashCode,
                                              $mrjc(
                                                  estadoId.hashCode,
                                                  $mrjc(
                                                      tipoFuenteId.hashCode,
                                                      $mrjc(
                                                          valorMinimo.hashCode,
                                                          $mrjc(
                                                              valorMaximo
                                                                  .hashCode,
                                                              $mrjc(
                                                                  escalaEvaluacionId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      escalanombre
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          escalavalorMinimo
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              escalavalorMaximo.hashCode,
                                                                              $mrjc(escalaestado.hashCode, $mrjc(escaladefecto.hashCode, $mrjc(escalaentidadId.hashCode, programaEducativoId.hashCode)))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TipoNotaRubroData &&
          other.tipoNotaId == this.tipoNotaId &&
          other.nombre == this.nombre &&
          other.tipoId == this.tipoId &&
          other.tiponombre == this.tiponombre &&
          other.valorDefecto == this.valorDefecto &&
          other.longitudPaso == this.longitudPaso &&
          other.intervalo == this.intervalo &&
          other.estatico == this.estatico &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.organigramaId == this.organigramaId &&
          other.estadoId == this.estadoId &&
          other.tipoFuenteId == this.tipoFuenteId &&
          other.valorMinimo == this.valorMinimo &&
          other.valorMaximo == this.valorMaximo &&
          other.escalaEvaluacionId == this.escalaEvaluacionId &&
          other.escalanombre == this.escalanombre &&
          other.escalavalorMinimo == this.escalavalorMinimo &&
          other.escalavalorMaximo == this.escalavalorMaximo &&
          other.escalaestado == this.escalaestado &&
          other.escaladefecto == this.escaladefecto &&
          other.escalaentidadId == this.escalaentidadId &&
          other.programaEducativoId == this.programaEducativoId);
}

class TipoNotaRubroCompanion extends UpdateCompanion<TipoNotaRubroData> {
  final Value<String> tipoNotaId;
  final Value<String?> nombre;
  final Value<int?> tipoId;
  final Value<String?> tiponombre;
  final Value<String?> valorDefecto;
  final Value<double?> longitudPaso;
  final Value<bool?> intervalo;
  final Value<bool?> estatico;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  final Value<int?> organigramaId;
  final Value<int?> estadoId;
  final Value<int?> tipoFuenteId;
  final Value<int?> valorMinimo;
  final Value<int?> valorMaximo;
  final Value<int?> escalaEvaluacionId;
  final Value<String?> escalanombre;
  final Value<int?> escalavalorMinimo;
  final Value<int?> escalavalorMaximo;
  final Value<int?> escalaestado;
  final Value<bool?> escaladefecto;
  final Value<int?> escalaentidadId;
  final Value<int?> programaEducativoId;
  const TipoNotaRubroCompanion({
    this.tipoNotaId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.tiponombre = const Value.absent(),
    this.valorDefecto = const Value.absent(),
    this.longitudPaso = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.estatico = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoFuenteId = const Value.absent(),
    this.valorMinimo = const Value.absent(),
    this.valorMaximo = const Value.absent(),
    this.escalaEvaluacionId = const Value.absent(),
    this.escalanombre = const Value.absent(),
    this.escalavalorMinimo = const Value.absent(),
    this.escalavalorMaximo = const Value.absent(),
    this.escalaestado = const Value.absent(),
    this.escaladefecto = const Value.absent(),
    this.escalaentidadId = const Value.absent(),
    this.programaEducativoId = const Value.absent(),
  });
  TipoNotaRubroCompanion.insert({
    required String tipoNotaId,
    this.nombre = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.tiponombre = const Value.absent(),
    this.valorDefecto = const Value.absent(),
    this.longitudPaso = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.estatico = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoFuenteId = const Value.absent(),
    this.valorMinimo = const Value.absent(),
    this.valorMaximo = const Value.absent(),
    this.escalaEvaluacionId = const Value.absent(),
    this.escalanombre = const Value.absent(),
    this.escalavalorMinimo = const Value.absent(),
    this.escalavalorMaximo = const Value.absent(),
    this.escalaestado = const Value.absent(),
    this.escaladefecto = const Value.absent(),
    this.escalaentidadId = const Value.absent(),
    this.programaEducativoId = const Value.absent(),
  }) : tipoNotaId = Value(tipoNotaId);
  static Insertable<TipoNotaRubroData> custom({
    Expression<String>? tipoNotaId,
    Expression<String?>? nombre,
    Expression<int?>? tipoId,
    Expression<String?>? tiponombre,
    Expression<String?>? valorDefecto,
    Expression<double?>? longitudPaso,
    Expression<bool?>? intervalo,
    Expression<bool?>? estatico,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
    Expression<int?>? organigramaId,
    Expression<int?>? estadoId,
    Expression<int?>? tipoFuenteId,
    Expression<int?>? valorMinimo,
    Expression<int?>? valorMaximo,
    Expression<int?>? escalaEvaluacionId,
    Expression<String?>? escalanombre,
    Expression<int?>? escalavalorMinimo,
    Expression<int?>? escalavalorMaximo,
    Expression<int?>? escalaestado,
    Expression<bool?>? escaladefecto,
    Expression<int?>? escalaentidadId,
    Expression<int?>? programaEducativoId,
  }) {
    return RawValuesInsertable({
      if (tipoNotaId != null) 'tipo_nota_id': tipoNotaId,
      if (nombre != null) 'nombre': nombre,
      if (tipoId != null) 'tipo_id': tipoId,
      if (tiponombre != null) 'tiponombre': tiponombre,
      if (valorDefecto != null) 'valor_defecto': valorDefecto,
      if (longitudPaso != null) 'longitud_paso': longitudPaso,
      if (intervalo != null) 'intervalo': intervalo,
      if (estatico != null) 'estatico': estatico,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (organigramaId != null) 'organigrama_id': organigramaId,
      if (estadoId != null) 'estado_id': estadoId,
      if (tipoFuenteId != null) 'tipo_fuente_id': tipoFuenteId,
      if (valorMinimo != null) 'valor_minimo': valorMinimo,
      if (valorMaximo != null) 'valor_maximo': valorMaximo,
      if (escalaEvaluacionId != null)
        'escala_evaluacion_id': escalaEvaluacionId,
      if (escalanombre != null) 'escalanombre': escalanombre,
      if (escalavalorMinimo != null) 'escalavalor_minimo': escalavalorMinimo,
      if (escalavalorMaximo != null) 'escalavalor_maximo': escalavalorMaximo,
      if (escalaestado != null) 'escalaestado': escalaestado,
      if (escaladefecto != null) 'escaladefecto': escaladefecto,
      if (escalaentidadId != null) 'escalaentidad_id': escalaentidadId,
      if (programaEducativoId != null)
        'programa_educativo_id': programaEducativoId,
    });
  }

  TipoNotaRubroCompanion copyWith(
      {Value<String>? tipoNotaId,
      Value<String?>? nombre,
      Value<int?>? tipoId,
      Value<String?>? tiponombre,
      Value<String?>? valorDefecto,
      Value<double?>? longitudPaso,
      Value<bool?>? intervalo,
      Value<bool?>? estatico,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId,
      Value<int?>? organigramaId,
      Value<int?>? estadoId,
      Value<int?>? tipoFuenteId,
      Value<int?>? valorMinimo,
      Value<int?>? valorMaximo,
      Value<int?>? escalaEvaluacionId,
      Value<String?>? escalanombre,
      Value<int?>? escalavalorMinimo,
      Value<int?>? escalavalorMaximo,
      Value<int?>? escalaestado,
      Value<bool?>? escaladefecto,
      Value<int?>? escalaentidadId,
      Value<int?>? programaEducativoId}) {
    return TipoNotaRubroCompanion(
      tipoNotaId: tipoNotaId ?? this.tipoNotaId,
      nombre: nombre ?? this.nombre,
      tipoId: tipoId ?? this.tipoId,
      tiponombre: tiponombre ?? this.tiponombre,
      valorDefecto: valorDefecto ?? this.valorDefecto,
      longitudPaso: longitudPaso ?? this.longitudPaso,
      intervalo: intervalo ?? this.intervalo,
      estatico: estatico ?? this.estatico,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      organigramaId: organigramaId ?? this.organigramaId,
      estadoId: estadoId ?? this.estadoId,
      tipoFuenteId: tipoFuenteId ?? this.tipoFuenteId,
      valorMinimo: valorMinimo ?? this.valorMinimo,
      valorMaximo: valorMaximo ?? this.valorMaximo,
      escalaEvaluacionId: escalaEvaluacionId ?? this.escalaEvaluacionId,
      escalanombre: escalanombre ?? this.escalanombre,
      escalavalorMinimo: escalavalorMinimo ?? this.escalavalorMinimo,
      escalavalorMaximo: escalavalorMaximo ?? this.escalavalorMaximo,
      escalaestado: escalaestado ?? this.escalaestado,
      escaladefecto: escaladefecto ?? this.escaladefecto,
      escalaentidadId: escalaentidadId ?? this.escalaentidadId,
      programaEducativoId: programaEducativoId ?? this.programaEducativoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (tipoNotaId.present) {
      map['tipo_nota_id'] = Variable<String>(tipoNotaId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (tiponombre.present) {
      map['tiponombre'] = Variable<String?>(tiponombre.value);
    }
    if (valorDefecto.present) {
      map['valor_defecto'] = Variable<String?>(valorDefecto.value);
    }
    if (longitudPaso.present) {
      map['longitud_paso'] = Variable<double?>(longitudPaso.value);
    }
    if (intervalo.present) {
      map['intervalo'] = Variable<bool?>(intervalo.value);
    }
    if (estatico.present) {
      map['estatico'] = Variable<bool?>(estatico.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (organigramaId.present) {
      map['organigrama_id'] = Variable<int?>(organigramaId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (tipoFuenteId.present) {
      map['tipo_fuente_id'] = Variable<int?>(tipoFuenteId.value);
    }
    if (valorMinimo.present) {
      map['valor_minimo'] = Variable<int?>(valorMinimo.value);
    }
    if (valorMaximo.present) {
      map['valor_maximo'] = Variable<int?>(valorMaximo.value);
    }
    if (escalaEvaluacionId.present) {
      map['escala_evaluacion_id'] = Variable<int?>(escalaEvaluacionId.value);
    }
    if (escalanombre.present) {
      map['escalanombre'] = Variable<String?>(escalanombre.value);
    }
    if (escalavalorMinimo.present) {
      map['escalavalor_minimo'] = Variable<int?>(escalavalorMinimo.value);
    }
    if (escalavalorMaximo.present) {
      map['escalavalor_maximo'] = Variable<int?>(escalavalorMaximo.value);
    }
    if (escalaestado.present) {
      map['escalaestado'] = Variable<int?>(escalaestado.value);
    }
    if (escaladefecto.present) {
      map['escaladefecto'] = Variable<bool?>(escaladefecto.value);
    }
    if (escalaentidadId.present) {
      map['escalaentidad_id'] = Variable<int?>(escalaentidadId.value);
    }
    if (programaEducativoId.present) {
      map['programa_educativo_id'] = Variable<int?>(programaEducativoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TipoNotaRubroCompanion(')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('nombre: $nombre, ')
          ..write('tipoId: $tipoId, ')
          ..write('tiponombre: $tiponombre, ')
          ..write('valorDefecto: $valorDefecto, ')
          ..write('longitudPaso: $longitudPaso, ')
          ..write('intervalo: $intervalo, ')
          ..write('estatico: $estatico, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoFuenteId: $tipoFuenteId, ')
          ..write('valorMinimo: $valorMinimo, ')
          ..write('valorMaximo: $valorMaximo, ')
          ..write('escalaEvaluacionId: $escalaEvaluacionId, ')
          ..write('escalanombre: $escalanombre, ')
          ..write('escalavalorMinimo: $escalavalorMinimo, ')
          ..write('escalavalorMaximo: $escalavalorMaximo, ')
          ..write('escalaestado: $escalaestado, ')
          ..write('escaladefecto: $escaladefecto, ')
          ..write('escalaentidadId: $escalaentidadId, ')
          ..write('programaEducativoId: $programaEducativoId')
          ..write(')'))
        .toString();
  }
}

class $TipoNotaRubroTable extends TipoNotaRubro
    with TableInfo<$TipoNotaRubroTable, TipoNotaRubroData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $TipoNotaRubroTable(this._db, [this._alias]);
  final VerificationMeta _tipoNotaIdMeta = const VerificationMeta('tipoNotaId');
  late final GeneratedColumn<String?> tipoNotaId = GeneratedColumn<String?>(
      'tipo_nota_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tiponombreMeta = const VerificationMeta('tiponombre');
  late final GeneratedColumn<String?> tiponombre = GeneratedColumn<String?>(
      'tiponombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _valorDefectoMeta =
      const VerificationMeta('valorDefecto');
  late final GeneratedColumn<String?> valorDefecto = GeneratedColumn<String?>(
      'valor_defecto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _longitudPasoMeta =
      const VerificationMeta('longitudPaso');
  late final GeneratedColumn<double?> longitudPaso = GeneratedColumn<double?>(
      'longitud_paso', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _intervaloMeta = const VerificationMeta('intervalo');
  late final GeneratedColumn<bool?> intervalo = GeneratedColumn<bool?>(
      'intervalo', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (intervalo IN (0, 1))');
  final VerificationMeta _estaticoMeta = const VerificationMeta('estatico');
  late final GeneratedColumn<bool?> estatico = GeneratedColumn<bool?>(
      'estatico', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estatico IN (0, 1))');
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _organigramaIdMeta =
      const VerificationMeta('organigramaId');
  late final GeneratedColumn<int?> organigramaId = GeneratedColumn<int?>(
      'organigrama_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoFuenteIdMeta =
      const VerificationMeta('tipoFuenteId');
  late final GeneratedColumn<int?> tipoFuenteId = GeneratedColumn<int?>(
      'tipo_fuente_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _valorMinimoMeta =
      const VerificationMeta('valorMinimo');
  late final GeneratedColumn<int?> valorMinimo = GeneratedColumn<int?>(
      'valor_minimo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _valorMaximoMeta =
      const VerificationMeta('valorMaximo');
  late final GeneratedColumn<int?> valorMaximo = GeneratedColumn<int?>(
      'valor_maximo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalaEvaluacionIdMeta =
      const VerificationMeta('escalaEvaluacionId');
  late final GeneratedColumn<int?> escalaEvaluacionId = GeneratedColumn<int?>(
      'escala_evaluacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalanombreMeta =
      const VerificationMeta('escalanombre');
  late final GeneratedColumn<String?> escalanombre = GeneratedColumn<String?>(
      'escalanombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _escalavalorMinimoMeta =
      const VerificationMeta('escalavalorMinimo');
  late final GeneratedColumn<int?> escalavalorMinimo = GeneratedColumn<int?>(
      'escalavalor_minimo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalavalorMaximoMeta =
      const VerificationMeta('escalavalorMaximo');
  late final GeneratedColumn<int?> escalavalorMaximo = GeneratedColumn<int?>(
      'escalavalor_maximo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalaestadoMeta =
      const VerificationMeta('escalaestado');
  late final GeneratedColumn<int?> escalaestado = GeneratedColumn<int?>(
      'escalaestado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escaladefectoMeta =
      const VerificationMeta('escaladefecto');
  late final GeneratedColumn<bool?> escaladefecto = GeneratedColumn<bool?>(
      'escaladefecto', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (escaladefecto IN (0, 1))');
  final VerificationMeta _escalaentidadIdMeta =
      const VerificationMeta('escalaentidadId');
  late final GeneratedColumn<int?> escalaentidadId = GeneratedColumn<int?>(
      'escalaentidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _programaEducativoIdMeta =
      const VerificationMeta('programaEducativoId');
  late final GeneratedColumn<int?> programaEducativoId = GeneratedColumn<int?>(
      'programa_educativo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        tipoNotaId,
        nombre,
        tipoId,
        tiponombre,
        valorDefecto,
        longitudPaso,
        intervalo,
        estatico,
        entidadId,
        georeferenciaId,
        organigramaId,
        estadoId,
        tipoFuenteId,
        valorMinimo,
        valorMaximo,
        escalaEvaluacionId,
        escalanombre,
        escalavalorMinimo,
        escalavalorMaximo,
        escalaestado,
        escaladefecto,
        escalaentidadId,
        programaEducativoId
      ];
  @override
  String get aliasedName => _alias ?? 'tipo_nota_rubro';
  @override
  String get actualTableName => 'tipo_nota_rubro';
  @override
  VerificationContext validateIntegrity(Insertable<TipoNotaRubroData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('tipo_nota_id')) {
      context.handle(
          _tipoNotaIdMeta,
          tipoNotaId.isAcceptableOrUnknown(
              data['tipo_nota_id']!, _tipoNotaIdMeta));
    } else if (isInserting) {
      context.missing(_tipoNotaIdMeta);
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('tiponombre')) {
      context.handle(
          _tiponombreMeta,
          tiponombre.isAcceptableOrUnknown(
              data['tiponombre']!, _tiponombreMeta));
    }
    if (data.containsKey('valor_defecto')) {
      context.handle(
          _valorDefectoMeta,
          valorDefecto.isAcceptableOrUnknown(
              data['valor_defecto']!, _valorDefectoMeta));
    }
    if (data.containsKey('longitud_paso')) {
      context.handle(
          _longitudPasoMeta,
          longitudPaso.isAcceptableOrUnknown(
              data['longitud_paso']!, _longitudPasoMeta));
    }
    if (data.containsKey('intervalo')) {
      context.handle(_intervaloMeta,
          intervalo.isAcceptableOrUnknown(data['intervalo']!, _intervaloMeta));
    }
    if (data.containsKey('estatico')) {
      context.handle(_estaticoMeta,
          estatico.isAcceptableOrUnknown(data['estatico']!, _estaticoMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('organigrama_id')) {
      context.handle(
          _organigramaIdMeta,
          organigramaId.isAcceptableOrUnknown(
              data['organigrama_id']!, _organigramaIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('tipo_fuente_id')) {
      context.handle(
          _tipoFuenteIdMeta,
          tipoFuenteId.isAcceptableOrUnknown(
              data['tipo_fuente_id']!, _tipoFuenteIdMeta));
    }
    if (data.containsKey('valor_minimo')) {
      context.handle(
          _valorMinimoMeta,
          valorMinimo.isAcceptableOrUnknown(
              data['valor_minimo']!, _valorMinimoMeta));
    }
    if (data.containsKey('valor_maximo')) {
      context.handle(
          _valorMaximoMeta,
          valorMaximo.isAcceptableOrUnknown(
              data['valor_maximo']!, _valorMaximoMeta));
    }
    if (data.containsKey('escala_evaluacion_id')) {
      context.handle(
          _escalaEvaluacionIdMeta,
          escalaEvaluacionId.isAcceptableOrUnknown(
              data['escala_evaluacion_id']!, _escalaEvaluacionIdMeta));
    }
    if (data.containsKey('escalanombre')) {
      context.handle(
          _escalanombreMeta,
          escalanombre.isAcceptableOrUnknown(
              data['escalanombre']!, _escalanombreMeta));
    }
    if (data.containsKey('escalavalor_minimo')) {
      context.handle(
          _escalavalorMinimoMeta,
          escalavalorMinimo.isAcceptableOrUnknown(
              data['escalavalor_minimo']!, _escalavalorMinimoMeta));
    }
    if (data.containsKey('escalavalor_maximo')) {
      context.handle(
          _escalavalorMaximoMeta,
          escalavalorMaximo.isAcceptableOrUnknown(
              data['escalavalor_maximo']!, _escalavalorMaximoMeta));
    }
    if (data.containsKey('escalaestado')) {
      context.handle(
          _escalaestadoMeta,
          escalaestado.isAcceptableOrUnknown(
              data['escalaestado']!, _escalaestadoMeta));
    }
    if (data.containsKey('escaladefecto')) {
      context.handle(
          _escaladefectoMeta,
          escaladefecto.isAcceptableOrUnknown(
              data['escaladefecto']!, _escaladefectoMeta));
    }
    if (data.containsKey('escalaentidad_id')) {
      context.handle(
          _escalaentidadIdMeta,
          escalaentidadId.isAcceptableOrUnknown(
              data['escalaentidad_id']!, _escalaentidadIdMeta));
    }
    if (data.containsKey('programa_educativo_id')) {
      context.handle(
          _programaEducativoIdMeta,
          programaEducativoId.isAcceptableOrUnknown(
              data['programa_educativo_id']!, _programaEducativoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {tipoNotaId};
  @override
  TipoNotaRubroData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TipoNotaRubroData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TipoNotaRubroTable createAlias(String alias) {
    return $TipoNotaRubroTable(_db, alias);
  }
}

class ValorTipoNotaRubroData extends DataClass
    implements Insertable<ValorTipoNotaRubroData> {
  final String valorTipoNotaId;
  final String? tipoNotaId;
  final String? titulo;
  final String? alias;
  final double? limiteInferior;
  final double? limiteSuperior;
  final double? valorNumerico;
  final String? icono;
  final int? estadoId;
  final bool? incluidoLInferior;
  final bool? incluidoLSuperior;
  final int? tipoId;
  final int? usuarioCreacionId;
  final int? usuarioCreadorId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? fechaEnvio;
  final int? fechaEntrega;
  final int? fechaRecibido;
  final int? fechaVisto;
  final int? fechaRespuesta;
  final String? getSTime;
  ValorTipoNotaRubroData(
      {required this.valorTipoNotaId,
      this.tipoNotaId,
      this.titulo,
      this.alias,
      this.limiteInferior,
      this.limiteSuperior,
      this.valorNumerico,
      this.icono,
      this.estadoId,
      this.incluidoLInferior,
      this.incluidoLSuperior,
      this.tipoId,
      this.usuarioCreacionId,
      this.usuarioCreadorId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.fechaEnvio,
      this.fechaEntrega,
      this.fechaRecibido,
      this.fechaVisto,
      this.fechaRespuesta,
      this.getSTime});
  factory ValorTipoNotaRubroData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ValorTipoNotaRubroData(
      valorTipoNotaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}valor_tipo_nota_id'])!,
      tipoNotaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_nota_id']),
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      alias: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alias']),
      limiteInferior: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}limite_inferior']),
      limiteSuperior: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}limite_superior']),
      valorNumerico: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_numerico']),
      icono: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}icono']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      incluidoLInferior: const BoolType().mapFromDatabaseResponse(
          data['${effectivePrefix}incluido_l_inferior']),
      incluidoLSuperior: const BoolType().mapFromDatabaseResponse(
          data['${effectivePrefix}incluido_l_superior']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      usuarioCreadorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creador_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      fechaEnvio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_envio']),
      fechaEntrega: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_entrega']),
      fechaRecibido: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_recibido']),
      fechaVisto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_visto']),
      fechaRespuesta: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_respuesta']),
      getSTime: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}get_s_time']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['valor_tipo_nota_id'] = Variable<String>(valorTipoNotaId);
    if (!nullToAbsent || tipoNotaId != null) {
      map['tipo_nota_id'] = Variable<String?>(tipoNotaId);
    }
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || alias != null) {
      map['alias'] = Variable<String?>(alias);
    }
    if (!nullToAbsent || limiteInferior != null) {
      map['limite_inferior'] = Variable<double?>(limiteInferior);
    }
    if (!nullToAbsent || limiteSuperior != null) {
      map['limite_superior'] = Variable<double?>(limiteSuperior);
    }
    if (!nullToAbsent || valorNumerico != null) {
      map['valor_numerico'] = Variable<double?>(valorNumerico);
    }
    if (!nullToAbsent || icono != null) {
      map['icono'] = Variable<String?>(icono);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || incluidoLInferior != null) {
      map['incluido_l_inferior'] = Variable<bool?>(incluidoLInferior);
    }
    if (!nullToAbsent || incluidoLSuperior != null) {
      map['incluido_l_superior'] = Variable<bool?>(incluidoLSuperior);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || usuarioCreadorId != null) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || fechaEnvio != null) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio);
    }
    if (!nullToAbsent || fechaEntrega != null) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega);
    }
    if (!nullToAbsent || fechaRecibido != null) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido);
    }
    if (!nullToAbsent || fechaVisto != null) {
      map['fecha_visto'] = Variable<int?>(fechaVisto);
    }
    if (!nullToAbsent || fechaRespuesta != null) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta);
    }
    if (!nullToAbsent || getSTime != null) {
      map['get_s_time'] = Variable<String?>(getSTime);
    }
    return map;
  }

  ValorTipoNotaRubroCompanion toCompanion(bool nullToAbsent) {
    return ValorTipoNotaRubroCompanion(
      valorTipoNotaId: Value(valorTipoNotaId),
      tipoNotaId: tipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoNotaId),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      alias:
          alias == null && nullToAbsent ? const Value.absent() : Value(alias),
      limiteInferior: limiteInferior == null && nullToAbsent
          ? const Value.absent()
          : Value(limiteInferior),
      limiteSuperior: limiteSuperior == null && nullToAbsent
          ? const Value.absent()
          : Value(limiteSuperior),
      valorNumerico: valorNumerico == null && nullToAbsent
          ? const Value.absent()
          : Value(valorNumerico),
      icono:
          icono == null && nullToAbsent ? const Value.absent() : Value(icono),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      incluidoLInferior: incluidoLInferior == null && nullToAbsent
          ? const Value.absent()
          : Value(incluidoLInferior),
      incluidoLSuperior: incluidoLSuperior == null && nullToAbsent
          ? const Value.absent()
          : Value(incluidoLSuperior),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      usuarioCreadorId: usuarioCreadorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreadorId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      fechaEnvio: fechaEnvio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEnvio),
      fechaEntrega: fechaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEntrega),
      fechaRecibido: fechaRecibido == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRecibido),
      fechaVisto: fechaVisto == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaVisto),
      fechaRespuesta: fechaRespuesta == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRespuesta),
      getSTime: getSTime == null && nullToAbsent
          ? const Value.absent()
          : Value(getSTime),
    );
  }

  factory ValorTipoNotaRubroData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ValorTipoNotaRubroData(
      valorTipoNotaId: serializer.fromJson<String>(json['valorTipoNotaId']),
      tipoNotaId: serializer.fromJson<String?>(json['tipoNotaId']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      alias: serializer.fromJson<String?>(json['alias']),
      limiteInferior: serializer.fromJson<double?>(json['limiteInferior']),
      limiteSuperior: serializer.fromJson<double?>(json['limiteSuperior']),
      valorNumerico: serializer.fromJson<double?>(json['valorNumerico']),
      icono: serializer.fromJson<String?>(json['icono']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      incluidoLInferior: serializer.fromJson<bool?>(json['incluidoLInferior']),
      incluidoLSuperior: serializer.fromJson<bool?>(json['incluidoLSuperior']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      usuarioCreadorId: serializer.fromJson<int?>(json['usuarioCreadorId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      fechaEnvio: serializer.fromJson<int?>(json['fechaEnvio']),
      fechaEntrega: serializer.fromJson<int?>(json['fechaEntrega']),
      fechaRecibido: serializer.fromJson<int?>(json['fechaRecibido']),
      fechaVisto: serializer.fromJson<int?>(json['fechaVisto']),
      fechaRespuesta: serializer.fromJson<int?>(json['fechaRespuesta']),
      getSTime: serializer.fromJson<String?>(json['getSTime']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'valorTipoNotaId': serializer.toJson<String>(valorTipoNotaId),
      'tipoNotaId': serializer.toJson<String?>(tipoNotaId),
      'titulo': serializer.toJson<String?>(titulo),
      'alias': serializer.toJson<String?>(alias),
      'limiteInferior': serializer.toJson<double?>(limiteInferior),
      'limiteSuperior': serializer.toJson<double?>(limiteSuperior),
      'valorNumerico': serializer.toJson<double?>(valorNumerico),
      'icono': serializer.toJson<String?>(icono),
      'estadoId': serializer.toJson<int?>(estadoId),
      'incluidoLInferior': serializer.toJson<bool?>(incluidoLInferior),
      'incluidoLSuperior': serializer.toJson<bool?>(incluidoLSuperior),
      'tipoId': serializer.toJson<int?>(tipoId),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'usuarioCreadorId': serializer.toJson<int?>(usuarioCreadorId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'fechaEnvio': serializer.toJson<int?>(fechaEnvio),
      'fechaEntrega': serializer.toJson<int?>(fechaEntrega),
      'fechaRecibido': serializer.toJson<int?>(fechaRecibido),
      'fechaVisto': serializer.toJson<int?>(fechaVisto),
      'fechaRespuesta': serializer.toJson<int?>(fechaRespuesta),
      'getSTime': serializer.toJson<String?>(getSTime),
    };
  }

  ValorTipoNotaRubroData copyWith(
          {String? valorTipoNotaId,
          String? tipoNotaId,
          String? titulo,
          String? alias,
          double? limiteInferior,
          double? limiteSuperior,
          double? valorNumerico,
          String? icono,
          int? estadoId,
          bool? incluidoLInferior,
          bool? incluidoLSuperior,
          int? tipoId,
          int? usuarioCreacionId,
          int? usuarioCreadorId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? fechaEnvio,
          int? fechaEntrega,
          int? fechaRecibido,
          int? fechaVisto,
          int? fechaRespuesta,
          String? getSTime}) =>
      ValorTipoNotaRubroData(
        valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
        tipoNotaId: tipoNotaId ?? this.tipoNotaId,
        titulo: titulo ?? this.titulo,
        alias: alias ?? this.alias,
        limiteInferior: limiteInferior ?? this.limiteInferior,
        limiteSuperior: limiteSuperior ?? this.limiteSuperior,
        valorNumerico: valorNumerico ?? this.valorNumerico,
        icono: icono ?? this.icono,
        estadoId: estadoId ?? this.estadoId,
        incluidoLInferior: incluidoLInferior ?? this.incluidoLInferior,
        incluidoLSuperior: incluidoLSuperior ?? this.incluidoLSuperior,
        tipoId: tipoId ?? this.tipoId,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        fechaEnvio: fechaEnvio ?? this.fechaEnvio,
        fechaEntrega: fechaEntrega ?? this.fechaEntrega,
        fechaRecibido: fechaRecibido ?? this.fechaRecibido,
        fechaVisto: fechaVisto ?? this.fechaVisto,
        fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
        getSTime: getSTime ?? this.getSTime,
      );
  @override
  String toString() {
    return (StringBuffer('ValorTipoNotaRubroData(')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('titulo: $titulo, ')
          ..write('alias: $alias, ')
          ..write('limiteInferior: $limiteInferior, ')
          ..write('limiteSuperior: $limiteSuperior, ')
          ..write('valorNumerico: $valorNumerico, ')
          ..write('icono: $icono, ')
          ..write('estadoId: $estadoId, ')
          ..write('incluidoLInferior: $incluidoLInferior, ')
          ..write('incluidoLSuperior: $incluidoLSuperior, ')
          ..write('tipoId: $tipoId, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      valorTipoNotaId.hashCode,
      $mrjc(
          tipoNotaId.hashCode,
          $mrjc(
              titulo.hashCode,
              $mrjc(
                  alias.hashCode,
                  $mrjc(
                      limiteInferior.hashCode,
                      $mrjc(
                          limiteSuperior.hashCode,
                          $mrjc(
                              valorNumerico.hashCode,
                              $mrjc(
                                  icono.hashCode,
                                  $mrjc(
                                      estadoId.hashCode,
                                      $mrjc(
                                          incluidoLInferior.hashCode,
                                          $mrjc(
                                              incluidoLSuperior.hashCode,
                                              $mrjc(
                                                  tipoId.hashCode,
                                                  $mrjc(
                                                      usuarioCreacionId
                                                          .hashCode,
                                                      $mrjc(
                                                          usuarioCreadorId
                                                              .hashCode,
                                                          $mrjc(
                                                              fechaCreacion
                                                                  .hashCode,
                                                              $mrjc(
                                                                  usuarioAccionId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      fechaAccion
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          fechaEnvio
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              fechaEntrega.hashCode,
                                                                              $mrjc(fechaRecibido.hashCode, $mrjc(fechaVisto.hashCode, $mrjc(fechaRespuesta.hashCode, getSTime.hashCode)))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ValorTipoNotaRubroData &&
          other.valorTipoNotaId == this.valorTipoNotaId &&
          other.tipoNotaId == this.tipoNotaId &&
          other.titulo == this.titulo &&
          other.alias == this.alias &&
          other.limiteInferior == this.limiteInferior &&
          other.limiteSuperior == this.limiteSuperior &&
          other.valorNumerico == this.valorNumerico &&
          other.icono == this.icono &&
          other.estadoId == this.estadoId &&
          other.incluidoLInferior == this.incluidoLInferior &&
          other.incluidoLSuperior == this.incluidoLSuperior &&
          other.tipoId == this.tipoId &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.usuarioCreadorId == this.usuarioCreadorId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.fechaEnvio == this.fechaEnvio &&
          other.fechaEntrega == this.fechaEntrega &&
          other.fechaRecibido == this.fechaRecibido &&
          other.fechaVisto == this.fechaVisto &&
          other.fechaRespuesta == this.fechaRespuesta &&
          other.getSTime == this.getSTime);
}

class ValorTipoNotaRubroCompanion
    extends UpdateCompanion<ValorTipoNotaRubroData> {
  final Value<String> valorTipoNotaId;
  final Value<String?> tipoNotaId;
  final Value<String?> titulo;
  final Value<String?> alias;
  final Value<double?> limiteInferior;
  final Value<double?> limiteSuperior;
  final Value<double?> valorNumerico;
  final Value<String?> icono;
  final Value<int?> estadoId;
  final Value<bool?> incluidoLInferior;
  final Value<bool?> incluidoLSuperior;
  final Value<int?> tipoId;
  final Value<int?> usuarioCreacionId;
  final Value<int?> usuarioCreadorId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> fechaEnvio;
  final Value<int?> fechaEntrega;
  final Value<int?> fechaRecibido;
  final Value<int?> fechaVisto;
  final Value<int?> fechaRespuesta;
  final Value<String?> getSTime;
  const ValorTipoNotaRubroCompanion({
    this.valorTipoNotaId = const Value.absent(),
    this.tipoNotaId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.alias = const Value.absent(),
    this.limiteInferior = const Value.absent(),
    this.limiteSuperior = const Value.absent(),
    this.valorNumerico = const Value.absent(),
    this.icono = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.incluidoLInferior = const Value.absent(),
    this.incluidoLSuperior = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  });
  ValorTipoNotaRubroCompanion.insert({
    required String valorTipoNotaId,
    this.tipoNotaId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.alias = const Value.absent(),
    this.limiteInferior = const Value.absent(),
    this.limiteSuperior = const Value.absent(),
    this.valorNumerico = const Value.absent(),
    this.icono = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.incluidoLInferior = const Value.absent(),
    this.incluidoLSuperior = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  }) : valorTipoNotaId = Value(valorTipoNotaId);
  static Insertable<ValorTipoNotaRubroData> custom({
    Expression<String>? valorTipoNotaId,
    Expression<String?>? tipoNotaId,
    Expression<String?>? titulo,
    Expression<String?>? alias,
    Expression<double?>? limiteInferior,
    Expression<double?>? limiteSuperior,
    Expression<double?>? valorNumerico,
    Expression<String?>? icono,
    Expression<int?>? estadoId,
    Expression<bool?>? incluidoLInferior,
    Expression<bool?>? incluidoLSuperior,
    Expression<int?>? tipoId,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? usuarioCreadorId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? fechaEnvio,
    Expression<int?>? fechaEntrega,
    Expression<int?>? fechaRecibido,
    Expression<int?>? fechaVisto,
    Expression<int?>? fechaRespuesta,
    Expression<String?>? getSTime,
  }) {
    return RawValuesInsertable({
      if (valorTipoNotaId != null) 'valor_tipo_nota_id': valorTipoNotaId,
      if (tipoNotaId != null) 'tipo_nota_id': tipoNotaId,
      if (titulo != null) 'titulo': titulo,
      if (alias != null) 'alias': alias,
      if (limiteInferior != null) 'limite_inferior': limiteInferior,
      if (limiteSuperior != null) 'limite_superior': limiteSuperior,
      if (valorNumerico != null) 'valor_numerico': valorNumerico,
      if (icono != null) 'icono': icono,
      if (estadoId != null) 'estado_id': estadoId,
      if (incluidoLInferior != null) 'incluido_l_inferior': incluidoLInferior,
      if (incluidoLSuperior != null) 'incluido_l_superior': incluidoLSuperior,
      if (tipoId != null) 'tipo_id': tipoId,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (usuarioCreadorId != null) 'usuario_creador_id': usuarioCreadorId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (fechaEnvio != null) 'fecha_envio': fechaEnvio,
      if (fechaEntrega != null) 'fecha_entrega': fechaEntrega,
      if (fechaRecibido != null) 'fecha_recibido': fechaRecibido,
      if (fechaVisto != null) 'fecha_visto': fechaVisto,
      if (fechaRespuesta != null) 'fecha_respuesta': fechaRespuesta,
      if (getSTime != null) 'get_s_time': getSTime,
    });
  }

  ValorTipoNotaRubroCompanion copyWith(
      {Value<String>? valorTipoNotaId,
      Value<String?>? tipoNotaId,
      Value<String?>? titulo,
      Value<String?>? alias,
      Value<double?>? limiteInferior,
      Value<double?>? limiteSuperior,
      Value<double?>? valorNumerico,
      Value<String?>? icono,
      Value<int?>? estadoId,
      Value<bool?>? incluidoLInferior,
      Value<bool?>? incluidoLSuperior,
      Value<int?>? tipoId,
      Value<int?>? usuarioCreacionId,
      Value<int?>? usuarioCreadorId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? fechaEnvio,
      Value<int?>? fechaEntrega,
      Value<int?>? fechaRecibido,
      Value<int?>? fechaVisto,
      Value<int?>? fechaRespuesta,
      Value<String?>? getSTime}) {
    return ValorTipoNotaRubroCompanion(
      valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
      tipoNotaId: tipoNotaId ?? this.tipoNotaId,
      titulo: titulo ?? this.titulo,
      alias: alias ?? this.alias,
      limiteInferior: limiteInferior ?? this.limiteInferior,
      limiteSuperior: limiteSuperior ?? this.limiteSuperior,
      valorNumerico: valorNumerico ?? this.valorNumerico,
      icono: icono ?? this.icono,
      estadoId: estadoId ?? this.estadoId,
      incluidoLInferior: incluidoLInferior ?? this.incluidoLInferior,
      incluidoLSuperior: incluidoLSuperior ?? this.incluidoLSuperior,
      tipoId: tipoId ?? this.tipoId,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      fechaEnvio: fechaEnvio ?? this.fechaEnvio,
      fechaEntrega: fechaEntrega ?? this.fechaEntrega,
      fechaRecibido: fechaRecibido ?? this.fechaRecibido,
      fechaVisto: fechaVisto ?? this.fechaVisto,
      fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
      getSTime: getSTime ?? this.getSTime,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (valorTipoNotaId.present) {
      map['valor_tipo_nota_id'] = Variable<String>(valorTipoNotaId.value);
    }
    if (tipoNotaId.present) {
      map['tipo_nota_id'] = Variable<String?>(tipoNotaId.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (alias.present) {
      map['alias'] = Variable<String?>(alias.value);
    }
    if (limiteInferior.present) {
      map['limite_inferior'] = Variable<double?>(limiteInferior.value);
    }
    if (limiteSuperior.present) {
      map['limite_superior'] = Variable<double?>(limiteSuperior.value);
    }
    if (valorNumerico.present) {
      map['valor_numerico'] = Variable<double?>(valorNumerico.value);
    }
    if (icono.present) {
      map['icono'] = Variable<String?>(icono.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (incluidoLInferior.present) {
      map['incluido_l_inferior'] = Variable<bool?>(incluidoLInferior.value);
    }
    if (incluidoLSuperior.present) {
      map['incluido_l_superior'] = Variable<bool?>(incluidoLSuperior.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (usuarioCreadorId.present) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (fechaEnvio.present) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio.value);
    }
    if (fechaEntrega.present) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega.value);
    }
    if (fechaRecibido.present) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido.value);
    }
    if (fechaVisto.present) {
      map['fecha_visto'] = Variable<int?>(fechaVisto.value);
    }
    if (fechaRespuesta.present) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta.value);
    }
    if (getSTime.present) {
      map['get_s_time'] = Variable<String?>(getSTime.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ValorTipoNotaRubroCompanion(')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('titulo: $titulo, ')
          ..write('alias: $alias, ')
          ..write('limiteInferior: $limiteInferior, ')
          ..write('limiteSuperior: $limiteSuperior, ')
          ..write('valorNumerico: $valorNumerico, ')
          ..write('icono: $icono, ')
          ..write('estadoId: $estadoId, ')
          ..write('incluidoLInferior: $incluidoLInferior, ')
          ..write('incluidoLSuperior: $incluidoLSuperior, ')
          ..write('tipoId: $tipoId, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }
}

class $ValorTipoNotaRubroTable extends ValorTipoNotaRubro
    with TableInfo<$ValorTipoNotaRubroTable, ValorTipoNotaRubroData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ValorTipoNotaRubroTable(this._db, [this._alias]);
  final VerificationMeta _valorTipoNotaIdMeta =
      const VerificationMeta('valorTipoNotaId');
  late final GeneratedColumn<String?> valorTipoNotaId =
      GeneratedColumn<String?>('valor_tipo_nota_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _tipoNotaIdMeta = const VerificationMeta('tipoNotaId');
  late final GeneratedColumn<String?> tipoNotaId = GeneratedColumn<String?>(
      'tipo_nota_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _aliasMeta = const VerificationMeta('alias');
  late final GeneratedColumn<String?> alias = GeneratedColumn<String?>(
      'alias', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _limiteInferiorMeta =
      const VerificationMeta('limiteInferior');
  late final GeneratedColumn<double?> limiteInferior = GeneratedColumn<double?>(
      'limite_inferior', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _limiteSuperiorMeta =
      const VerificationMeta('limiteSuperior');
  late final GeneratedColumn<double?> limiteSuperior = GeneratedColumn<double?>(
      'limite_superior', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _valorNumericoMeta =
      const VerificationMeta('valorNumerico');
  late final GeneratedColumn<double?> valorNumerico = GeneratedColumn<double?>(
      'valor_numerico', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _iconoMeta = const VerificationMeta('icono');
  late final GeneratedColumn<String?> icono = GeneratedColumn<String?>(
      'icono', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _incluidoLInferiorMeta =
      const VerificationMeta('incluidoLInferior');
  late final GeneratedColumn<bool?> incluidoLInferior = GeneratedColumn<bool?>(
      'incluido_l_inferior', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (incluido_l_inferior IN (0, 1))');
  final VerificationMeta _incluidoLSuperiorMeta =
      const VerificationMeta('incluidoLSuperior');
  late final GeneratedColumn<bool?> incluidoLSuperior = GeneratedColumn<bool?>(
      'incluido_l_superior', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (incluido_l_superior IN (0, 1))');
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreadorIdMeta =
      const VerificationMeta('usuarioCreadorId');
  late final GeneratedColumn<int?> usuarioCreadorId = GeneratedColumn<int?>(
      'usuario_creador_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEnvioMeta = const VerificationMeta('fechaEnvio');
  late final GeneratedColumn<int?> fechaEnvio = GeneratedColumn<int?>(
      'fecha_envio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEntregaMeta =
      const VerificationMeta('fechaEntrega');
  late final GeneratedColumn<int?> fechaEntrega = GeneratedColumn<int?>(
      'fecha_entrega', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRecibidoMeta =
      const VerificationMeta('fechaRecibido');
  late final GeneratedColumn<int?> fechaRecibido = GeneratedColumn<int?>(
      'fecha_recibido', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaVistoMeta = const VerificationMeta('fechaVisto');
  late final GeneratedColumn<int?> fechaVisto = GeneratedColumn<int?>(
      'fecha_visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRespuestaMeta =
      const VerificationMeta('fechaRespuesta');
  late final GeneratedColumn<int?> fechaRespuesta = GeneratedColumn<int?>(
      'fecha_respuesta', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _getSTimeMeta = const VerificationMeta('getSTime');
  late final GeneratedColumn<String?> getSTime = GeneratedColumn<String?>(
      'get_s_time', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        valorTipoNotaId,
        tipoNotaId,
        titulo,
        alias,
        limiteInferior,
        limiteSuperior,
        valorNumerico,
        icono,
        estadoId,
        incluidoLInferior,
        incluidoLSuperior,
        tipoId,
        usuarioCreacionId,
        usuarioCreadorId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        fechaEnvio,
        fechaEntrega,
        fechaRecibido,
        fechaVisto,
        fechaRespuesta,
        getSTime
      ];
  @override
  String get aliasedName => _alias ?? 'valor_tipo_nota_rubro';
  @override
  String get actualTableName => 'valor_tipo_nota_rubro';
  @override
  VerificationContext validateIntegrity(
      Insertable<ValorTipoNotaRubroData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('valor_tipo_nota_id')) {
      context.handle(
          _valorTipoNotaIdMeta,
          valorTipoNotaId.isAcceptableOrUnknown(
              data['valor_tipo_nota_id']!, _valorTipoNotaIdMeta));
    } else if (isInserting) {
      context.missing(_valorTipoNotaIdMeta);
    }
    if (data.containsKey('tipo_nota_id')) {
      context.handle(
          _tipoNotaIdMeta,
          tipoNotaId.isAcceptableOrUnknown(
              data['tipo_nota_id']!, _tipoNotaIdMeta));
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('alias')) {
      context.handle(
          _aliasMeta, alias.isAcceptableOrUnknown(data['alias']!, _aliasMeta));
    }
    if (data.containsKey('limite_inferior')) {
      context.handle(
          _limiteInferiorMeta,
          limiteInferior.isAcceptableOrUnknown(
              data['limite_inferior']!, _limiteInferiorMeta));
    }
    if (data.containsKey('limite_superior')) {
      context.handle(
          _limiteSuperiorMeta,
          limiteSuperior.isAcceptableOrUnknown(
              data['limite_superior']!, _limiteSuperiorMeta));
    }
    if (data.containsKey('valor_numerico')) {
      context.handle(
          _valorNumericoMeta,
          valorNumerico.isAcceptableOrUnknown(
              data['valor_numerico']!, _valorNumericoMeta));
    }
    if (data.containsKey('icono')) {
      context.handle(
          _iconoMeta, icono.isAcceptableOrUnknown(data['icono']!, _iconoMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('incluido_l_inferior')) {
      context.handle(
          _incluidoLInferiorMeta,
          incluidoLInferior.isAcceptableOrUnknown(
              data['incluido_l_inferior']!, _incluidoLInferiorMeta));
    }
    if (data.containsKey('incluido_l_superior')) {
      context.handle(
          _incluidoLSuperiorMeta,
          incluidoLSuperior.isAcceptableOrUnknown(
              data['incluido_l_superior']!, _incluidoLSuperiorMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('usuario_creador_id')) {
      context.handle(
          _usuarioCreadorIdMeta,
          usuarioCreadorId.isAcceptableOrUnknown(
              data['usuario_creador_id']!, _usuarioCreadorIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('fecha_envio')) {
      context.handle(
          _fechaEnvioMeta,
          fechaEnvio.isAcceptableOrUnknown(
              data['fecha_envio']!, _fechaEnvioMeta));
    }
    if (data.containsKey('fecha_entrega')) {
      context.handle(
          _fechaEntregaMeta,
          fechaEntrega.isAcceptableOrUnknown(
              data['fecha_entrega']!, _fechaEntregaMeta));
    }
    if (data.containsKey('fecha_recibido')) {
      context.handle(
          _fechaRecibidoMeta,
          fechaRecibido.isAcceptableOrUnknown(
              data['fecha_recibido']!, _fechaRecibidoMeta));
    }
    if (data.containsKey('fecha_visto')) {
      context.handle(
          _fechaVistoMeta,
          fechaVisto.isAcceptableOrUnknown(
              data['fecha_visto']!, _fechaVistoMeta));
    }
    if (data.containsKey('fecha_respuesta')) {
      context.handle(
          _fechaRespuestaMeta,
          fechaRespuesta.isAcceptableOrUnknown(
              data['fecha_respuesta']!, _fechaRespuestaMeta));
    }
    if (data.containsKey('get_s_time')) {
      context.handle(_getSTimeMeta,
          getSTime.isAcceptableOrUnknown(data['get_s_time']!, _getSTimeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {valorTipoNotaId};
  @override
  ValorTipoNotaRubroData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ValorTipoNotaRubroData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ValorTipoNotaRubroTable createAlias(String alias) {
    return $ValorTipoNotaRubroTable(_db, alias);
  }
}

class RubroEvaluacionProcesoData extends DataClass
    implements Insertable<RubroEvaluacionProcesoData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String rubroEvalProcesoId;
  final String? titulo;
  final String? subtitulo;
  final String? colorFondo;
  final bool? mColorFondo;
  final String? valorDefecto;
  final int? competenciaId;
  final int? calendarioPeriodoId;
  final String? anchoColumna;
  final bool? ocultarColumna;
  final int? tipoFormulaId;
  final int? silaboEventoId;
  final int? tipoRedondeoId;
  final int? valorRedondeoId;
  final int? rubroEvalResultadoId;
  final String? tipoNotaId;
  final int? sesionAprendizajeId;
  final int? desempenioIcdId;
  final int? campoTematicoId;
  final int? tipoEvaluacionId;
  final int? estadoId;
  final int? tipoEscalaEvaluacionId;
  final int? tipoColorRubroProceso;
  final int? tiporubroid;
  final int? formaEvaluacionId;
  final int? countIndicador;
  final int? rubroFormal;
  final int? msje;
  final double? promedio;
  final double? desviacionEstandar;
  final int? unidadAprendizajeId;
  final int? estrategiaEvaluacionId;
  final String? tareaId;
  final String? resultadoTipoNotaId;
  final String? instrumentoEvalId;
  final String? preguntaEvalId;
  final int? error_guardar;
  RubroEvaluacionProcesoData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.rubroEvalProcesoId,
      this.titulo,
      this.subtitulo,
      this.colorFondo,
      this.mColorFondo,
      this.valorDefecto,
      this.competenciaId,
      this.calendarioPeriodoId,
      this.anchoColumna,
      this.ocultarColumna,
      this.tipoFormulaId,
      this.silaboEventoId,
      this.tipoRedondeoId,
      this.valorRedondeoId,
      this.rubroEvalResultadoId,
      this.tipoNotaId,
      this.sesionAprendizajeId,
      this.desempenioIcdId,
      this.campoTematicoId,
      this.tipoEvaluacionId,
      this.estadoId,
      this.tipoEscalaEvaluacionId,
      this.tipoColorRubroProceso,
      this.tiporubroid,
      this.formaEvaluacionId,
      this.countIndicador,
      this.rubroFormal,
      this.msje,
      this.promedio,
      this.desviacionEstandar,
      this.unidadAprendizajeId,
      this.estrategiaEvaluacionId,
      this.tareaId,
      this.resultadoTipoNotaId,
      this.instrumentoEvalId,
      this.preguntaEvalId,
      this.error_guardar});
  factory RubroEvaluacionProcesoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RubroEvaluacionProcesoData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      rubroEvalProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_eval_proceso_id'])!,
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      subtitulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}subtitulo']),
      colorFondo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}color_fondo']),
      mColorFondo: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}m_color_fondo']),
      valorDefecto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_defecto']),
      competenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}competencia_id']),
      calendarioPeriodoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_periodo_id']),
      anchoColumna: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ancho_columna']),
      ocultarColumna: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ocultar_columna']),
      tipoFormulaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_formula_id']),
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id']),
      tipoRedondeoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_redondeo_id']),
      valorRedondeoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_redondeo_id']),
      rubroEvalResultadoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_eval_resultado_id']),
      tipoNotaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_nota_id']),
      sesionAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}sesion_aprendizaje_id']),
      desempenioIcdId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}desempenio_icd_id']),
      campoTematicoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}campo_tematico_id']),
      tipoEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}tipo_evaluacion_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      tipoEscalaEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}tipo_escala_evaluacion_id']),
      tipoColorRubroProceso: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}tipo_color_rubro_proceso']),
      tiporubroid: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tiporubroid']),
      formaEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}forma_evaluacion_id']),
      countIndicador: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}count_indicador']),
      rubroFormal: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rubro_formal']),
      msje: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}msje']),
      promedio: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}promedio']),
      desviacionEstandar: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}desviacion_estandar']),
      unidadAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}unidad_aprendizaje_id']),
      estrategiaEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}estrategia_evaluacion_id']),
      tareaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tarea_id']),
      resultadoTipoNotaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}resultado_tipo_nota_id']),
      instrumentoEvalId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}instrumento_eval_id']),
      preguntaEvalId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pregunta_eval_id']),
      error_guardar: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}error_guardar']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['rubro_eval_proceso_id'] = Variable<String>(rubroEvalProcesoId);
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || subtitulo != null) {
      map['subtitulo'] = Variable<String?>(subtitulo);
    }
    if (!nullToAbsent || colorFondo != null) {
      map['color_fondo'] = Variable<String?>(colorFondo);
    }
    if (!nullToAbsent || mColorFondo != null) {
      map['m_color_fondo'] = Variable<bool?>(mColorFondo);
    }
    if (!nullToAbsent || valorDefecto != null) {
      map['valor_defecto'] = Variable<String?>(valorDefecto);
    }
    if (!nullToAbsent || competenciaId != null) {
      map['competencia_id'] = Variable<int?>(competenciaId);
    }
    if (!nullToAbsent || calendarioPeriodoId != null) {
      map['calendario_periodo_id'] = Variable<int?>(calendarioPeriodoId);
    }
    if (!nullToAbsent || anchoColumna != null) {
      map['ancho_columna'] = Variable<String?>(anchoColumna);
    }
    if (!nullToAbsent || ocultarColumna != null) {
      map['ocultar_columna'] = Variable<bool?>(ocultarColumna);
    }
    if (!nullToAbsent || tipoFormulaId != null) {
      map['tipo_formula_id'] = Variable<int?>(tipoFormulaId);
    }
    if (!nullToAbsent || silaboEventoId != null) {
      map['silabo_evento_id'] = Variable<int?>(silaboEventoId);
    }
    if (!nullToAbsent || tipoRedondeoId != null) {
      map['tipo_redondeo_id'] = Variable<int?>(tipoRedondeoId);
    }
    if (!nullToAbsent || valorRedondeoId != null) {
      map['valor_redondeo_id'] = Variable<int?>(valorRedondeoId);
    }
    if (!nullToAbsent || rubroEvalResultadoId != null) {
      map['rubro_eval_resultado_id'] = Variable<int?>(rubroEvalResultadoId);
    }
    if (!nullToAbsent || tipoNotaId != null) {
      map['tipo_nota_id'] = Variable<String?>(tipoNotaId);
    }
    if (!nullToAbsent || sesionAprendizajeId != null) {
      map['sesion_aprendizaje_id'] = Variable<int?>(sesionAprendizajeId);
    }
    if (!nullToAbsent || desempenioIcdId != null) {
      map['desempenio_icd_id'] = Variable<int?>(desempenioIcdId);
    }
    if (!nullToAbsent || campoTematicoId != null) {
      map['campo_tematico_id'] = Variable<int?>(campoTematicoId);
    }
    if (!nullToAbsent || tipoEvaluacionId != null) {
      map['tipo_evaluacion_id'] = Variable<int?>(tipoEvaluacionId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || tipoEscalaEvaluacionId != null) {
      map['tipo_escala_evaluacion_id'] = Variable<int?>(tipoEscalaEvaluacionId);
    }
    if (!nullToAbsent || tipoColorRubroProceso != null) {
      map['tipo_color_rubro_proceso'] = Variable<int?>(tipoColorRubroProceso);
    }
    if (!nullToAbsent || tiporubroid != null) {
      map['tiporubroid'] = Variable<int?>(tiporubroid);
    }
    if (!nullToAbsent || formaEvaluacionId != null) {
      map['forma_evaluacion_id'] = Variable<int?>(formaEvaluacionId);
    }
    if (!nullToAbsent || countIndicador != null) {
      map['count_indicador'] = Variable<int?>(countIndicador);
    }
    if (!nullToAbsent || rubroFormal != null) {
      map['rubro_formal'] = Variable<int?>(rubroFormal);
    }
    if (!nullToAbsent || msje != null) {
      map['msje'] = Variable<int?>(msje);
    }
    if (!nullToAbsent || promedio != null) {
      map['promedio'] = Variable<double?>(promedio);
    }
    if (!nullToAbsent || desviacionEstandar != null) {
      map['desviacion_estandar'] = Variable<double?>(desviacionEstandar);
    }
    if (!nullToAbsent || unidadAprendizajeId != null) {
      map['unidad_aprendizaje_id'] = Variable<int?>(unidadAprendizajeId);
    }
    if (!nullToAbsent || estrategiaEvaluacionId != null) {
      map['estrategia_evaluacion_id'] = Variable<int?>(estrategiaEvaluacionId);
    }
    if (!nullToAbsent || tareaId != null) {
      map['tarea_id'] = Variable<String?>(tareaId);
    }
    if (!nullToAbsent || resultadoTipoNotaId != null) {
      map['resultado_tipo_nota_id'] = Variable<String?>(resultadoTipoNotaId);
    }
    if (!nullToAbsent || instrumentoEvalId != null) {
      map['instrumento_eval_id'] = Variable<String?>(instrumentoEvalId);
    }
    if (!nullToAbsent || preguntaEvalId != null) {
      map['pregunta_eval_id'] = Variable<String?>(preguntaEvalId);
    }
    if (!nullToAbsent || error_guardar != null) {
      map['error_guardar'] = Variable<int?>(error_guardar);
    }
    return map;
  }

  RubroEvaluacionProcesoCompanion toCompanion(bool nullToAbsent) {
    return RubroEvaluacionProcesoCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      rubroEvalProcesoId: Value(rubroEvalProcesoId),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      subtitulo: subtitulo == null && nullToAbsent
          ? const Value.absent()
          : Value(subtitulo),
      colorFondo: colorFondo == null && nullToAbsent
          ? const Value.absent()
          : Value(colorFondo),
      mColorFondo: mColorFondo == null && nullToAbsent
          ? const Value.absent()
          : Value(mColorFondo),
      valorDefecto: valorDefecto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDefecto),
      competenciaId: competenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(competenciaId),
      calendarioPeriodoId: calendarioPeriodoId == null && nullToAbsent
          ? const Value.absent()
          : Value(calendarioPeriodoId),
      anchoColumna: anchoColumna == null && nullToAbsent
          ? const Value.absent()
          : Value(anchoColumna),
      ocultarColumna: ocultarColumna == null && nullToAbsent
          ? const Value.absent()
          : Value(ocultarColumna),
      tipoFormulaId: tipoFormulaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoFormulaId),
      silaboEventoId: silaboEventoId == null && nullToAbsent
          ? const Value.absent()
          : Value(silaboEventoId),
      tipoRedondeoId: tipoRedondeoId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoRedondeoId),
      valorRedondeoId: valorRedondeoId == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRedondeoId),
      rubroEvalResultadoId: rubroEvalResultadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroEvalResultadoId),
      tipoNotaId: tipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoNotaId),
      sesionAprendizajeId: sesionAprendizajeId == null && nullToAbsent
          ? const Value.absent()
          : Value(sesionAprendizajeId),
      desempenioIcdId: desempenioIcdId == null && nullToAbsent
          ? const Value.absent()
          : Value(desempenioIcdId),
      campoTematicoId: campoTematicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(campoTematicoId),
      tipoEvaluacionId: tipoEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEvaluacionId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      tipoEscalaEvaluacionId: tipoEscalaEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEscalaEvaluacionId),
      tipoColorRubroProceso: tipoColorRubroProceso == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoColorRubroProceso),
      tiporubroid: tiporubroid == null && nullToAbsent
          ? const Value.absent()
          : Value(tiporubroid),
      formaEvaluacionId: formaEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(formaEvaluacionId),
      countIndicador: countIndicador == null && nullToAbsent
          ? const Value.absent()
          : Value(countIndicador),
      rubroFormal: rubroFormal == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroFormal),
      msje: msje == null && nullToAbsent ? const Value.absent() : Value(msje),
      promedio: promedio == null && nullToAbsent
          ? const Value.absent()
          : Value(promedio),
      desviacionEstandar: desviacionEstandar == null && nullToAbsent
          ? const Value.absent()
          : Value(desviacionEstandar),
      unidadAprendizajeId: unidadAprendizajeId == null && nullToAbsent
          ? const Value.absent()
          : Value(unidadAprendizajeId),
      estrategiaEvaluacionId: estrategiaEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(estrategiaEvaluacionId),
      tareaId: tareaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tareaId),
      resultadoTipoNotaId: resultadoTipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(resultadoTipoNotaId),
      instrumentoEvalId: instrumentoEvalId == null && nullToAbsent
          ? const Value.absent()
          : Value(instrumentoEvalId),
      preguntaEvalId: preguntaEvalId == null && nullToAbsent
          ? const Value.absent()
          : Value(preguntaEvalId),
      error_guardar: error_guardar == null && nullToAbsent
          ? const Value.absent()
          : Value(error_guardar),
    );
  }

  factory RubroEvaluacionProcesoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RubroEvaluacionProcesoData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      rubroEvalProcesoId:
          serializer.fromJson<String>(json['rubroEvalProcesoId']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      subtitulo: serializer.fromJson<String?>(json['subtitulo']),
      colorFondo: serializer.fromJson<String?>(json['colorFondo']),
      mColorFondo: serializer.fromJson<bool?>(json['mColorFondo']),
      valorDefecto: serializer.fromJson<String?>(json['valorDefecto']),
      competenciaId: serializer.fromJson<int?>(json['competenciaId']),
      calendarioPeriodoId:
          serializer.fromJson<int?>(json['calendarioPeriodoId']),
      anchoColumna: serializer.fromJson<String?>(json['anchoColumna']),
      ocultarColumna: serializer.fromJson<bool?>(json['ocultarColumna']),
      tipoFormulaId: serializer.fromJson<int?>(json['tipoFormulaId']),
      silaboEventoId: serializer.fromJson<int?>(json['silaboEventoId']),
      tipoRedondeoId: serializer.fromJson<int?>(json['tipoRedondeoId']),
      valorRedondeoId: serializer.fromJson<int?>(json['valorRedondeoId']),
      rubroEvalResultadoId:
          serializer.fromJson<int?>(json['rubroEvalResultadoId']),
      tipoNotaId: serializer.fromJson<String?>(json['tipoNotaId']),
      sesionAprendizajeId:
          serializer.fromJson<int?>(json['sesionAprendizajeId']),
      desempenioIcdId: serializer.fromJson<int?>(json['desempenioIcdId']),
      campoTematicoId: serializer.fromJson<int?>(json['campoTematicoId']),
      tipoEvaluacionId: serializer.fromJson<int?>(json['tipoEvaluacionId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      tipoEscalaEvaluacionId:
          serializer.fromJson<int?>(json['tipoEscalaEvaluacionId']),
      tipoColorRubroProceso:
          serializer.fromJson<int?>(json['tipoColorRubroProceso']),
      tiporubroid: serializer.fromJson<int?>(json['tiporubroid']),
      formaEvaluacionId: serializer.fromJson<int?>(json['formaEvaluacionId']),
      countIndicador: serializer.fromJson<int?>(json['countIndicador']),
      rubroFormal: serializer.fromJson<int?>(json['rubroFormal']),
      msje: serializer.fromJson<int?>(json['msje']),
      promedio: serializer.fromJson<double?>(json['promedio']),
      desviacionEstandar:
          serializer.fromJson<double?>(json['desviacionEstandar']),
      unidadAprendizajeId:
          serializer.fromJson<int?>(json['unidadAprendizajeId']),
      estrategiaEvaluacionId:
          serializer.fromJson<int?>(json['estrategiaEvaluacionId']),
      tareaId: serializer.fromJson<String?>(json['tareaId']),
      resultadoTipoNotaId:
          serializer.fromJson<String?>(json['resultadoTipoNotaId']),
      instrumentoEvalId:
          serializer.fromJson<String?>(json['instrumentoEvalId']),
      preguntaEvalId: serializer.fromJson<String?>(json['preguntaEvalId']),
      error_guardar: serializer.fromJson<int?>(json['error_guardar']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'rubroEvalProcesoId': serializer.toJson<String>(rubroEvalProcesoId),
      'titulo': serializer.toJson<String?>(titulo),
      'subtitulo': serializer.toJson<String?>(subtitulo),
      'colorFondo': serializer.toJson<String?>(colorFondo),
      'mColorFondo': serializer.toJson<bool?>(mColorFondo),
      'valorDefecto': serializer.toJson<String?>(valorDefecto),
      'competenciaId': serializer.toJson<int?>(competenciaId),
      'calendarioPeriodoId': serializer.toJson<int?>(calendarioPeriodoId),
      'anchoColumna': serializer.toJson<String?>(anchoColumna),
      'ocultarColumna': serializer.toJson<bool?>(ocultarColumna),
      'tipoFormulaId': serializer.toJson<int?>(tipoFormulaId),
      'silaboEventoId': serializer.toJson<int?>(silaboEventoId),
      'tipoRedondeoId': serializer.toJson<int?>(tipoRedondeoId),
      'valorRedondeoId': serializer.toJson<int?>(valorRedondeoId),
      'rubroEvalResultadoId': serializer.toJson<int?>(rubroEvalResultadoId),
      'tipoNotaId': serializer.toJson<String?>(tipoNotaId),
      'sesionAprendizajeId': serializer.toJson<int?>(sesionAprendizajeId),
      'desempenioIcdId': serializer.toJson<int?>(desempenioIcdId),
      'campoTematicoId': serializer.toJson<int?>(campoTematicoId),
      'tipoEvaluacionId': serializer.toJson<int?>(tipoEvaluacionId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'tipoEscalaEvaluacionId': serializer.toJson<int?>(tipoEscalaEvaluacionId),
      'tipoColorRubroProceso': serializer.toJson<int?>(tipoColorRubroProceso),
      'tiporubroid': serializer.toJson<int?>(tiporubroid),
      'formaEvaluacionId': serializer.toJson<int?>(formaEvaluacionId),
      'countIndicador': serializer.toJson<int?>(countIndicador),
      'rubroFormal': serializer.toJson<int?>(rubroFormal),
      'msje': serializer.toJson<int?>(msje),
      'promedio': serializer.toJson<double?>(promedio),
      'desviacionEstandar': serializer.toJson<double?>(desviacionEstandar),
      'unidadAprendizajeId': serializer.toJson<int?>(unidadAprendizajeId),
      'estrategiaEvaluacionId': serializer.toJson<int?>(estrategiaEvaluacionId),
      'tareaId': serializer.toJson<String?>(tareaId),
      'resultadoTipoNotaId': serializer.toJson<String?>(resultadoTipoNotaId),
      'instrumentoEvalId': serializer.toJson<String?>(instrumentoEvalId),
      'preguntaEvalId': serializer.toJson<String?>(preguntaEvalId),
      'error_guardar': serializer.toJson<int?>(error_guardar),
    };
  }

  RubroEvaluacionProcesoData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? rubroEvalProcesoId,
          String? titulo,
          String? subtitulo,
          String? colorFondo,
          bool? mColorFondo,
          String? valorDefecto,
          int? competenciaId,
          int? calendarioPeriodoId,
          String? anchoColumna,
          bool? ocultarColumna,
          int? tipoFormulaId,
          int? silaboEventoId,
          int? tipoRedondeoId,
          int? valorRedondeoId,
          int? rubroEvalResultadoId,
          String? tipoNotaId,
          int? sesionAprendizajeId,
          int? desempenioIcdId,
          int? campoTematicoId,
          int? tipoEvaluacionId,
          int? estadoId,
          int? tipoEscalaEvaluacionId,
          int? tipoColorRubroProceso,
          int? tiporubroid,
          int? formaEvaluacionId,
          int? countIndicador,
          int? rubroFormal,
          int? msje,
          double? promedio,
          double? desviacionEstandar,
          int? unidadAprendizajeId,
          int? estrategiaEvaluacionId,
          String? tareaId,
          String? resultadoTipoNotaId,
          String? instrumentoEvalId,
          String? preguntaEvalId,
          int? error_guardar}) =>
      RubroEvaluacionProcesoData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
        titulo: titulo ?? this.titulo,
        subtitulo: subtitulo ?? this.subtitulo,
        colorFondo: colorFondo ?? this.colorFondo,
        mColorFondo: mColorFondo ?? this.mColorFondo,
        valorDefecto: valorDefecto ?? this.valorDefecto,
        competenciaId: competenciaId ?? this.competenciaId,
        calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
        anchoColumna: anchoColumna ?? this.anchoColumna,
        ocultarColumna: ocultarColumna ?? this.ocultarColumna,
        tipoFormulaId: tipoFormulaId ?? this.tipoFormulaId,
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
        tipoRedondeoId: tipoRedondeoId ?? this.tipoRedondeoId,
        valorRedondeoId: valorRedondeoId ?? this.valorRedondeoId,
        rubroEvalResultadoId: rubroEvalResultadoId ?? this.rubroEvalResultadoId,
        tipoNotaId: tipoNotaId ?? this.tipoNotaId,
        sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
        desempenioIcdId: desempenioIcdId ?? this.desempenioIcdId,
        campoTematicoId: campoTematicoId ?? this.campoTematicoId,
        tipoEvaluacionId: tipoEvaluacionId ?? this.tipoEvaluacionId,
        estadoId: estadoId ?? this.estadoId,
        tipoEscalaEvaluacionId:
            tipoEscalaEvaluacionId ?? this.tipoEscalaEvaluacionId,
        tipoColorRubroProceso:
            tipoColorRubroProceso ?? this.tipoColorRubroProceso,
        tiporubroid: tiporubroid ?? this.tiporubroid,
        formaEvaluacionId: formaEvaluacionId ?? this.formaEvaluacionId,
        countIndicador: countIndicador ?? this.countIndicador,
        rubroFormal: rubroFormal ?? this.rubroFormal,
        msje: msje ?? this.msje,
        promedio: promedio ?? this.promedio,
        desviacionEstandar: desviacionEstandar ?? this.desviacionEstandar,
        unidadAprendizajeId: unidadAprendizajeId ?? this.unidadAprendizajeId,
        estrategiaEvaluacionId:
            estrategiaEvaluacionId ?? this.estrategiaEvaluacionId,
        tareaId: tareaId ?? this.tareaId,
        resultadoTipoNotaId: resultadoTipoNotaId ?? this.resultadoTipoNotaId,
        instrumentoEvalId: instrumentoEvalId ?? this.instrumentoEvalId,
        preguntaEvalId: preguntaEvalId ?? this.preguntaEvalId,
        error_guardar: error_guardar ?? this.error_guardar,
      );
  @override
  String toString() {
    return (StringBuffer('RubroEvaluacionProcesoData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('titulo: $titulo, ')
          ..write('subtitulo: $subtitulo, ')
          ..write('colorFondo: $colorFondo, ')
          ..write('mColorFondo: $mColorFondo, ')
          ..write('valorDefecto: $valorDefecto, ')
          ..write('competenciaId: $competenciaId, ')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('anchoColumna: $anchoColumna, ')
          ..write('ocultarColumna: $ocultarColumna, ')
          ..write('tipoFormulaId: $tipoFormulaId, ')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('tipoRedondeoId: $tipoRedondeoId, ')
          ..write('valorRedondeoId: $valorRedondeoId, ')
          ..write('rubroEvalResultadoId: $rubroEvalResultadoId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('desempenioIcdId: $desempenioIcdId, ')
          ..write('campoTematicoId: $campoTematicoId, ')
          ..write('tipoEvaluacionId: $tipoEvaluacionId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoEscalaEvaluacionId: $tipoEscalaEvaluacionId, ')
          ..write('tipoColorRubroProceso: $tipoColorRubroProceso, ')
          ..write('tiporubroid: $tiporubroid, ')
          ..write('formaEvaluacionId: $formaEvaluacionId, ')
          ..write('countIndicador: $countIndicador, ')
          ..write('rubroFormal: $rubroFormal, ')
          ..write('msje: $msje, ')
          ..write('promedio: $promedio, ')
          ..write('desviacionEstandar: $desviacionEstandar, ')
          ..write('unidadAprendizajeId: $unidadAprendizajeId, ')
          ..write('estrategiaEvaluacionId: $estrategiaEvaluacionId, ')
          ..write('tareaId: $tareaId, ')
          ..write('resultadoTipoNotaId: $resultadoTipoNotaId, ')
          ..write('instrumentoEvalId: $instrumentoEvalId, ')
          ..write('preguntaEvalId: $preguntaEvalId, ')
          ..write('error_guardar: $error_guardar')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(
                              rubroEvalProcesoId.hashCode,
                              $mrjc(
                                  titulo.hashCode,
                                  $mrjc(
                                      subtitulo.hashCode,
                                      $mrjc(
                                          colorFondo.hashCode,
                                          $mrjc(
                                              mColorFondo.hashCode,
                                              $mrjc(
                                                  valorDefecto.hashCode,
                                                  $mrjc(
                                                      competenciaId.hashCode,
                                                      $mrjc(
                                                          calendarioPeriodoId
                                                              .hashCode,
                                                          $mrjc(
                                                              anchoColumna
                                                                  .hashCode,
                                                              $mrjc(
                                                                  ocultarColumna
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      tipoFormulaId
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          silaboEventoId
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              tipoRedondeoId.hashCode,
                                                                              $mrjc(valorRedondeoId.hashCode, $mrjc(rubroEvalResultadoId.hashCode, $mrjc(tipoNotaId.hashCode, $mrjc(sesionAprendizajeId.hashCode, $mrjc(desempenioIcdId.hashCode, $mrjc(campoTematicoId.hashCode, $mrjc(tipoEvaluacionId.hashCode, $mrjc(estadoId.hashCode, $mrjc(tipoEscalaEvaluacionId.hashCode, $mrjc(tipoColorRubroProceso.hashCode, $mrjc(tiporubroid.hashCode, $mrjc(formaEvaluacionId.hashCode, $mrjc(countIndicador.hashCode, $mrjc(rubroFormal.hashCode, $mrjc(msje.hashCode, $mrjc(promedio.hashCode, $mrjc(desviacionEstandar.hashCode, $mrjc(unidadAprendizajeId.hashCode, $mrjc(estrategiaEvaluacionId.hashCode, $mrjc(tareaId.hashCode, $mrjc(resultadoTipoNotaId.hashCode, $mrjc(instrumentoEvalId.hashCode, $mrjc(preguntaEvalId.hashCode, error_guardar.hashCode)))))))))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RubroEvaluacionProcesoData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.rubroEvalProcesoId == this.rubroEvalProcesoId &&
          other.titulo == this.titulo &&
          other.subtitulo == this.subtitulo &&
          other.colorFondo == this.colorFondo &&
          other.mColorFondo == this.mColorFondo &&
          other.valorDefecto == this.valorDefecto &&
          other.competenciaId == this.competenciaId &&
          other.calendarioPeriodoId == this.calendarioPeriodoId &&
          other.anchoColumna == this.anchoColumna &&
          other.ocultarColumna == this.ocultarColumna &&
          other.tipoFormulaId == this.tipoFormulaId &&
          other.silaboEventoId == this.silaboEventoId &&
          other.tipoRedondeoId == this.tipoRedondeoId &&
          other.valorRedondeoId == this.valorRedondeoId &&
          other.rubroEvalResultadoId == this.rubroEvalResultadoId &&
          other.tipoNotaId == this.tipoNotaId &&
          other.sesionAprendizajeId == this.sesionAprendizajeId &&
          other.desempenioIcdId == this.desempenioIcdId &&
          other.campoTematicoId == this.campoTematicoId &&
          other.tipoEvaluacionId == this.tipoEvaluacionId &&
          other.estadoId == this.estadoId &&
          other.tipoEscalaEvaluacionId == this.tipoEscalaEvaluacionId &&
          other.tipoColorRubroProceso == this.tipoColorRubroProceso &&
          other.tiporubroid == this.tiporubroid &&
          other.formaEvaluacionId == this.formaEvaluacionId &&
          other.countIndicador == this.countIndicador &&
          other.rubroFormal == this.rubroFormal &&
          other.msje == this.msje &&
          other.promedio == this.promedio &&
          other.desviacionEstandar == this.desviacionEstandar &&
          other.unidadAprendizajeId == this.unidadAprendizajeId &&
          other.estrategiaEvaluacionId == this.estrategiaEvaluacionId &&
          other.tareaId == this.tareaId &&
          other.resultadoTipoNotaId == this.resultadoTipoNotaId &&
          other.instrumentoEvalId == this.instrumentoEvalId &&
          other.preguntaEvalId == this.preguntaEvalId &&
          other.error_guardar == this.error_guardar);
}

class RubroEvaluacionProcesoCompanion
    extends UpdateCompanion<RubroEvaluacionProcesoData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> rubroEvalProcesoId;
  final Value<String?> titulo;
  final Value<String?> subtitulo;
  final Value<String?> colorFondo;
  final Value<bool?> mColorFondo;
  final Value<String?> valorDefecto;
  final Value<int?> competenciaId;
  final Value<int?> calendarioPeriodoId;
  final Value<String?> anchoColumna;
  final Value<bool?> ocultarColumna;
  final Value<int?> tipoFormulaId;
  final Value<int?> silaboEventoId;
  final Value<int?> tipoRedondeoId;
  final Value<int?> valorRedondeoId;
  final Value<int?> rubroEvalResultadoId;
  final Value<String?> tipoNotaId;
  final Value<int?> sesionAprendizajeId;
  final Value<int?> desempenioIcdId;
  final Value<int?> campoTematicoId;
  final Value<int?> tipoEvaluacionId;
  final Value<int?> estadoId;
  final Value<int?> tipoEscalaEvaluacionId;
  final Value<int?> tipoColorRubroProceso;
  final Value<int?> tiporubroid;
  final Value<int?> formaEvaluacionId;
  final Value<int?> countIndicador;
  final Value<int?> rubroFormal;
  final Value<int?> msje;
  final Value<double?> promedio;
  final Value<double?> desviacionEstandar;
  final Value<int?> unidadAprendizajeId;
  final Value<int?> estrategiaEvaluacionId;
  final Value<String?> tareaId;
  final Value<String?> resultadoTipoNotaId;
  final Value<String?> instrumentoEvalId;
  final Value<String?> preguntaEvalId;
  final Value<int?> error_guardar;
  const RubroEvaluacionProcesoCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.rubroEvalProcesoId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.subtitulo = const Value.absent(),
    this.colorFondo = const Value.absent(),
    this.mColorFondo = const Value.absent(),
    this.valorDefecto = const Value.absent(),
    this.competenciaId = const Value.absent(),
    this.calendarioPeriodoId = const Value.absent(),
    this.anchoColumna = const Value.absent(),
    this.ocultarColumna = const Value.absent(),
    this.tipoFormulaId = const Value.absent(),
    this.silaboEventoId = const Value.absent(),
    this.tipoRedondeoId = const Value.absent(),
    this.valorRedondeoId = const Value.absent(),
    this.rubroEvalResultadoId = const Value.absent(),
    this.tipoNotaId = const Value.absent(),
    this.sesionAprendizajeId = const Value.absent(),
    this.desempenioIcdId = const Value.absent(),
    this.campoTematicoId = const Value.absent(),
    this.tipoEvaluacionId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoEscalaEvaluacionId = const Value.absent(),
    this.tipoColorRubroProceso = const Value.absent(),
    this.tiporubroid = const Value.absent(),
    this.formaEvaluacionId = const Value.absent(),
    this.countIndicador = const Value.absent(),
    this.rubroFormal = const Value.absent(),
    this.msje = const Value.absent(),
    this.promedio = const Value.absent(),
    this.desviacionEstandar = const Value.absent(),
    this.unidadAprendizajeId = const Value.absent(),
    this.estrategiaEvaluacionId = const Value.absent(),
    this.tareaId = const Value.absent(),
    this.resultadoTipoNotaId = const Value.absent(),
    this.instrumentoEvalId = const Value.absent(),
    this.preguntaEvalId = const Value.absent(),
    this.error_guardar = const Value.absent(),
  });
  RubroEvaluacionProcesoCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String rubroEvalProcesoId,
    this.titulo = const Value.absent(),
    this.subtitulo = const Value.absent(),
    this.colorFondo = const Value.absent(),
    this.mColorFondo = const Value.absent(),
    this.valorDefecto = const Value.absent(),
    this.competenciaId = const Value.absent(),
    this.calendarioPeriodoId = const Value.absent(),
    this.anchoColumna = const Value.absent(),
    this.ocultarColumna = const Value.absent(),
    this.tipoFormulaId = const Value.absent(),
    this.silaboEventoId = const Value.absent(),
    this.tipoRedondeoId = const Value.absent(),
    this.valorRedondeoId = const Value.absent(),
    this.rubroEvalResultadoId = const Value.absent(),
    this.tipoNotaId = const Value.absent(),
    this.sesionAprendizajeId = const Value.absent(),
    this.desempenioIcdId = const Value.absent(),
    this.campoTematicoId = const Value.absent(),
    this.tipoEvaluacionId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoEscalaEvaluacionId = const Value.absent(),
    this.tipoColorRubroProceso = const Value.absent(),
    this.tiporubroid = const Value.absent(),
    this.formaEvaluacionId = const Value.absent(),
    this.countIndicador = const Value.absent(),
    this.rubroFormal = const Value.absent(),
    this.msje = const Value.absent(),
    this.promedio = const Value.absent(),
    this.desviacionEstandar = const Value.absent(),
    this.unidadAprendizajeId = const Value.absent(),
    this.estrategiaEvaluacionId = const Value.absent(),
    this.tareaId = const Value.absent(),
    this.resultadoTipoNotaId = const Value.absent(),
    this.instrumentoEvalId = const Value.absent(),
    this.preguntaEvalId = const Value.absent(),
    this.error_guardar = const Value.absent(),
  }) : rubroEvalProcesoId = Value(rubroEvalProcesoId);
  static Insertable<RubroEvaluacionProcesoData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? rubroEvalProcesoId,
    Expression<String?>? titulo,
    Expression<String?>? subtitulo,
    Expression<String?>? colorFondo,
    Expression<bool?>? mColorFondo,
    Expression<String?>? valorDefecto,
    Expression<int?>? competenciaId,
    Expression<int?>? calendarioPeriodoId,
    Expression<String?>? anchoColumna,
    Expression<bool?>? ocultarColumna,
    Expression<int?>? tipoFormulaId,
    Expression<int?>? silaboEventoId,
    Expression<int?>? tipoRedondeoId,
    Expression<int?>? valorRedondeoId,
    Expression<int?>? rubroEvalResultadoId,
    Expression<String?>? tipoNotaId,
    Expression<int?>? sesionAprendizajeId,
    Expression<int?>? desempenioIcdId,
    Expression<int?>? campoTematicoId,
    Expression<int?>? tipoEvaluacionId,
    Expression<int?>? estadoId,
    Expression<int?>? tipoEscalaEvaluacionId,
    Expression<int?>? tipoColorRubroProceso,
    Expression<int?>? tiporubroid,
    Expression<int?>? formaEvaluacionId,
    Expression<int?>? countIndicador,
    Expression<int?>? rubroFormal,
    Expression<int?>? msje,
    Expression<double?>? promedio,
    Expression<double?>? desviacionEstandar,
    Expression<int?>? unidadAprendizajeId,
    Expression<int?>? estrategiaEvaluacionId,
    Expression<String?>? tareaId,
    Expression<String?>? resultadoTipoNotaId,
    Expression<String?>? instrumentoEvalId,
    Expression<String?>? preguntaEvalId,
    Expression<int?>? error_guardar,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (rubroEvalProcesoId != null)
        'rubro_eval_proceso_id': rubroEvalProcesoId,
      if (titulo != null) 'titulo': titulo,
      if (subtitulo != null) 'subtitulo': subtitulo,
      if (colorFondo != null) 'color_fondo': colorFondo,
      if (mColorFondo != null) 'm_color_fondo': mColorFondo,
      if (valorDefecto != null) 'valor_defecto': valorDefecto,
      if (competenciaId != null) 'competencia_id': competenciaId,
      if (calendarioPeriodoId != null)
        'calendario_periodo_id': calendarioPeriodoId,
      if (anchoColumna != null) 'ancho_columna': anchoColumna,
      if (ocultarColumna != null) 'ocultar_columna': ocultarColumna,
      if (tipoFormulaId != null) 'tipo_formula_id': tipoFormulaId,
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
      if (tipoRedondeoId != null) 'tipo_redondeo_id': tipoRedondeoId,
      if (valorRedondeoId != null) 'valor_redondeo_id': valorRedondeoId,
      if (rubroEvalResultadoId != null)
        'rubro_eval_resultado_id': rubroEvalResultadoId,
      if (tipoNotaId != null) 'tipo_nota_id': tipoNotaId,
      if (sesionAprendizajeId != null)
        'sesion_aprendizaje_id': sesionAprendizajeId,
      if (desempenioIcdId != null) 'desempenio_icd_id': desempenioIcdId,
      if (campoTematicoId != null) 'campo_tematico_id': campoTematicoId,
      if (tipoEvaluacionId != null) 'tipo_evaluacion_id': tipoEvaluacionId,
      if (estadoId != null) 'estado_id': estadoId,
      if (tipoEscalaEvaluacionId != null)
        'tipo_escala_evaluacion_id': tipoEscalaEvaluacionId,
      if (tipoColorRubroProceso != null)
        'tipo_color_rubro_proceso': tipoColorRubroProceso,
      if (tiporubroid != null) 'tiporubroid': tiporubroid,
      if (formaEvaluacionId != null) 'forma_evaluacion_id': formaEvaluacionId,
      if (countIndicador != null) 'count_indicador': countIndicador,
      if (rubroFormal != null) 'rubro_formal': rubroFormal,
      if (msje != null) 'msje': msje,
      if (promedio != null) 'promedio': promedio,
      if (desviacionEstandar != null) 'desviacion_estandar': desviacionEstandar,
      if (unidadAprendizajeId != null)
        'unidad_aprendizaje_id': unidadAprendizajeId,
      if (estrategiaEvaluacionId != null)
        'estrategia_evaluacion_id': estrategiaEvaluacionId,
      if (tareaId != null) 'tarea_id': tareaId,
      if (resultadoTipoNotaId != null)
        'resultado_tipo_nota_id': resultadoTipoNotaId,
      if (instrumentoEvalId != null) 'instrumento_eval_id': instrumentoEvalId,
      if (preguntaEvalId != null) 'pregunta_eval_id': preguntaEvalId,
      if (error_guardar != null) 'error_guardar': error_guardar,
    });
  }

  RubroEvaluacionProcesoCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? rubroEvalProcesoId,
      Value<String?>? titulo,
      Value<String?>? subtitulo,
      Value<String?>? colorFondo,
      Value<bool?>? mColorFondo,
      Value<String?>? valorDefecto,
      Value<int?>? competenciaId,
      Value<int?>? calendarioPeriodoId,
      Value<String?>? anchoColumna,
      Value<bool?>? ocultarColumna,
      Value<int?>? tipoFormulaId,
      Value<int?>? silaboEventoId,
      Value<int?>? tipoRedondeoId,
      Value<int?>? valorRedondeoId,
      Value<int?>? rubroEvalResultadoId,
      Value<String?>? tipoNotaId,
      Value<int?>? sesionAprendizajeId,
      Value<int?>? desempenioIcdId,
      Value<int?>? campoTematicoId,
      Value<int?>? tipoEvaluacionId,
      Value<int?>? estadoId,
      Value<int?>? tipoEscalaEvaluacionId,
      Value<int?>? tipoColorRubroProceso,
      Value<int?>? tiporubroid,
      Value<int?>? formaEvaluacionId,
      Value<int?>? countIndicador,
      Value<int?>? rubroFormal,
      Value<int?>? msje,
      Value<double?>? promedio,
      Value<double?>? desviacionEstandar,
      Value<int?>? unidadAprendizajeId,
      Value<int?>? estrategiaEvaluacionId,
      Value<String?>? tareaId,
      Value<String?>? resultadoTipoNotaId,
      Value<String?>? instrumentoEvalId,
      Value<String?>? preguntaEvalId,
      Value<int?>? error_guardar}) {
    return RubroEvaluacionProcesoCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
      titulo: titulo ?? this.titulo,
      subtitulo: subtitulo ?? this.subtitulo,
      colorFondo: colorFondo ?? this.colorFondo,
      mColorFondo: mColorFondo ?? this.mColorFondo,
      valorDefecto: valorDefecto ?? this.valorDefecto,
      competenciaId: competenciaId ?? this.competenciaId,
      calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
      anchoColumna: anchoColumna ?? this.anchoColumna,
      ocultarColumna: ocultarColumna ?? this.ocultarColumna,
      tipoFormulaId: tipoFormulaId ?? this.tipoFormulaId,
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      tipoRedondeoId: tipoRedondeoId ?? this.tipoRedondeoId,
      valorRedondeoId: valorRedondeoId ?? this.valorRedondeoId,
      rubroEvalResultadoId: rubroEvalResultadoId ?? this.rubroEvalResultadoId,
      tipoNotaId: tipoNotaId ?? this.tipoNotaId,
      sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
      desempenioIcdId: desempenioIcdId ?? this.desempenioIcdId,
      campoTematicoId: campoTematicoId ?? this.campoTematicoId,
      tipoEvaluacionId: tipoEvaluacionId ?? this.tipoEvaluacionId,
      estadoId: estadoId ?? this.estadoId,
      tipoEscalaEvaluacionId:
          tipoEscalaEvaluacionId ?? this.tipoEscalaEvaluacionId,
      tipoColorRubroProceso:
          tipoColorRubroProceso ?? this.tipoColorRubroProceso,
      tiporubroid: tiporubroid ?? this.tiporubroid,
      formaEvaluacionId: formaEvaluacionId ?? this.formaEvaluacionId,
      countIndicador: countIndicador ?? this.countIndicador,
      rubroFormal: rubroFormal ?? this.rubroFormal,
      msje: msje ?? this.msje,
      promedio: promedio ?? this.promedio,
      desviacionEstandar: desviacionEstandar ?? this.desviacionEstandar,
      unidadAprendizajeId: unidadAprendizajeId ?? this.unidadAprendizajeId,
      estrategiaEvaluacionId:
          estrategiaEvaluacionId ?? this.estrategiaEvaluacionId,
      tareaId: tareaId ?? this.tareaId,
      resultadoTipoNotaId: resultadoTipoNotaId ?? this.resultadoTipoNotaId,
      instrumentoEvalId: instrumentoEvalId ?? this.instrumentoEvalId,
      preguntaEvalId: preguntaEvalId ?? this.preguntaEvalId,
      error_guardar: error_guardar ?? this.error_guardar,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (rubroEvalProcesoId.present) {
      map['rubro_eval_proceso_id'] = Variable<String>(rubroEvalProcesoId.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (subtitulo.present) {
      map['subtitulo'] = Variable<String?>(subtitulo.value);
    }
    if (colorFondo.present) {
      map['color_fondo'] = Variable<String?>(colorFondo.value);
    }
    if (mColorFondo.present) {
      map['m_color_fondo'] = Variable<bool?>(mColorFondo.value);
    }
    if (valorDefecto.present) {
      map['valor_defecto'] = Variable<String?>(valorDefecto.value);
    }
    if (competenciaId.present) {
      map['competencia_id'] = Variable<int?>(competenciaId.value);
    }
    if (calendarioPeriodoId.present) {
      map['calendario_periodo_id'] = Variable<int?>(calendarioPeriodoId.value);
    }
    if (anchoColumna.present) {
      map['ancho_columna'] = Variable<String?>(anchoColumna.value);
    }
    if (ocultarColumna.present) {
      map['ocultar_columna'] = Variable<bool?>(ocultarColumna.value);
    }
    if (tipoFormulaId.present) {
      map['tipo_formula_id'] = Variable<int?>(tipoFormulaId.value);
    }
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int?>(silaboEventoId.value);
    }
    if (tipoRedondeoId.present) {
      map['tipo_redondeo_id'] = Variable<int?>(tipoRedondeoId.value);
    }
    if (valorRedondeoId.present) {
      map['valor_redondeo_id'] = Variable<int?>(valorRedondeoId.value);
    }
    if (rubroEvalResultadoId.present) {
      map['rubro_eval_resultado_id'] =
          Variable<int?>(rubroEvalResultadoId.value);
    }
    if (tipoNotaId.present) {
      map['tipo_nota_id'] = Variable<String?>(tipoNotaId.value);
    }
    if (sesionAprendizajeId.present) {
      map['sesion_aprendizaje_id'] = Variable<int?>(sesionAprendizajeId.value);
    }
    if (desempenioIcdId.present) {
      map['desempenio_icd_id'] = Variable<int?>(desempenioIcdId.value);
    }
    if (campoTematicoId.present) {
      map['campo_tematico_id'] = Variable<int?>(campoTematicoId.value);
    }
    if (tipoEvaluacionId.present) {
      map['tipo_evaluacion_id'] = Variable<int?>(tipoEvaluacionId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (tipoEscalaEvaluacionId.present) {
      map['tipo_escala_evaluacion_id'] =
          Variable<int?>(tipoEscalaEvaluacionId.value);
    }
    if (tipoColorRubroProceso.present) {
      map['tipo_color_rubro_proceso'] =
          Variable<int?>(tipoColorRubroProceso.value);
    }
    if (tiporubroid.present) {
      map['tiporubroid'] = Variable<int?>(tiporubroid.value);
    }
    if (formaEvaluacionId.present) {
      map['forma_evaluacion_id'] = Variable<int?>(formaEvaluacionId.value);
    }
    if (countIndicador.present) {
      map['count_indicador'] = Variable<int?>(countIndicador.value);
    }
    if (rubroFormal.present) {
      map['rubro_formal'] = Variable<int?>(rubroFormal.value);
    }
    if (msje.present) {
      map['msje'] = Variable<int?>(msje.value);
    }
    if (promedio.present) {
      map['promedio'] = Variable<double?>(promedio.value);
    }
    if (desviacionEstandar.present) {
      map['desviacion_estandar'] = Variable<double?>(desviacionEstandar.value);
    }
    if (unidadAprendizajeId.present) {
      map['unidad_aprendizaje_id'] = Variable<int?>(unidadAprendizajeId.value);
    }
    if (estrategiaEvaluacionId.present) {
      map['estrategia_evaluacion_id'] =
          Variable<int?>(estrategiaEvaluacionId.value);
    }
    if (tareaId.present) {
      map['tarea_id'] = Variable<String?>(tareaId.value);
    }
    if (resultadoTipoNotaId.present) {
      map['resultado_tipo_nota_id'] =
          Variable<String?>(resultadoTipoNotaId.value);
    }
    if (instrumentoEvalId.present) {
      map['instrumento_eval_id'] = Variable<String?>(instrumentoEvalId.value);
    }
    if (preguntaEvalId.present) {
      map['pregunta_eval_id'] = Variable<String?>(preguntaEvalId.value);
    }
    if (error_guardar.present) {
      map['error_guardar'] = Variable<int?>(error_guardar.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RubroEvaluacionProcesoCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('titulo: $titulo, ')
          ..write('subtitulo: $subtitulo, ')
          ..write('colorFondo: $colorFondo, ')
          ..write('mColorFondo: $mColorFondo, ')
          ..write('valorDefecto: $valorDefecto, ')
          ..write('competenciaId: $competenciaId, ')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('anchoColumna: $anchoColumna, ')
          ..write('ocultarColumna: $ocultarColumna, ')
          ..write('tipoFormulaId: $tipoFormulaId, ')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('tipoRedondeoId: $tipoRedondeoId, ')
          ..write('valorRedondeoId: $valorRedondeoId, ')
          ..write('rubroEvalResultadoId: $rubroEvalResultadoId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('desempenioIcdId: $desempenioIcdId, ')
          ..write('campoTematicoId: $campoTematicoId, ')
          ..write('tipoEvaluacionId: $tipoEvaluacionId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoEscalaEvaluacionId: $tipoEscalaEvaluacionId, ')
          ..write('tipoColorRubroProceso: $tipoColorRubroProceso, ')
          ..write('tiporubroid: $tiporubroid, ')
          ..write('formaEvaluacionId: $formaEvaluacionId, ')
          ..write('countIndicador: $countIndicador, ')
          ..write('rubroFormal: $rubroFormal, ')
          ..write('msje: $msje, ')
          ..write('promedio: $promedio, ')
          ..write('desviacionEstandar: $desviacionEstandar, ')
          ..write('unidadAprendizajeId: $unidadAprendizajeId, ')
          ..write('estrategiaEvaluacionId: $estrategiaEvaluacionId, ')
          ..write('tareaId: $tareaId, ')
          ..write('resultadoTipoNotaId: $resultadoTipoNotaId, ')
          ..write('instrumentoEvalId: $instrumentoEvalId, ')
          ..write('preguntaEvalId: $preguntaEvalId, ')
          ..write('error_guardar: $error_guardar')
          ..write(')'))
        .toString();
  }
}

class $RubroEvaluacionProcesoTable extends RubroEvaluacionProceso
    with TableInfo<$RubroEvaluacionProcesoTable, RubroEvaluacionProcesoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RubroEvaluacionProcesoTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rubroEvalProcesoIdMeta =
      const VerificationMeta('rubroEvalProcesoId');
  late final GeneratedColumn<String?> rubroEvalProcesoId =
      GeneratedColumn<String?>('rubro_eval_proceso_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _subtituloMeta = const VerificationMeta('subtitulo');
  late final GeneratedColumn<String?> subtitulo = GeneratedColumn<String?>(
      'subtitulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _colorFondoMeta = const VerificationMeta('colorFondo');
  late final GeneratedColumn<String?> colorFondo = GeneratedColumn<String?>(
      'color_fondo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _mColorFondoMeta =
      const VerificationMeta('mColorFondo');
  late final GeneratedColumn<bool?> mColorFondo = GeneratedColumn<bool?>(
      'm_color_fondo', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (m_color_fondo IN (0, 1))');
  final VerificationMeta _valorDefectoMeta =
      const VerificationMeta('valorDefecto');
  late final GeneratedColumn<String?> valorDefecto = GeneratedColumn<String?>(
      'valor_defecto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _competenciaIdMeta =
      const VerificationMeta('competenciaId');
  late final GeneratedColumn<int?> competenciaId = GeneratedColumn<int?>(
      'competencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _calendarioPeriodoIdMeta =
      const VerificationMeta('calendarioPeriodoId');
  late final GeneratedColumn<int?> calendarioPeriodoId = GeneratedColumn<int?>(
      'calendario_periodo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _anchoColumnaMeta =
      const VerificationMeta('anchoColumna');
  late final GeneratedColumn<String?> anchoColumna = GeneratedColumn<String?>(
      'ancho_columna', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _ocultarColumnaMeta =
      const VerificationMeta('ocultarColumna');
  late final GeneratedColumn<bool?> ocultarColumna = GeneratedColumn<bool?>(
      'ocultar_columna', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (ocultar_columna IN (0, 1))');
  final VerificationMeta _tipoFormulaIdMeta =
      const VerificationMeta('tipoFormulaId');
  late final GeneratedColumn<int?> tipoFormulaId = GeneratedColumn<int?>(
      'tipo_formula_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoRedondeoIdMeta =
      const VerificationMeta('tipoRedondeoId');
  late final GeneratedColumn<int?> tipoRedondeoId = GeneratedColumn<int?>(
      'tipo_redondeo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _valorRedondeoIdMeta =
      const VerificationMeta('valorRedondeoId');
  late final GeneratedColumn<int?> valorRedondeoId = GeneratedColumn<int?>(
      'valor_redondeo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rubroEvalResultadoIdMeta =
      const VerificationMeta('rubroEvalResultadoId');
  late final GeneratedColumn<int?> rubroEvalResultadoId = GeneratedColumn<int?>(
      'rubro_eval_resultado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoNotaIdMeta = const VerificationMeta('tipoNotaId');
  late final GeneratedColumn<String?> tipoNotaId = GeneratedColumn<String?>(
      'tipo_nota_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _sesionAprendizajeIdMeta =
      const VerificationMeta('sesionAprendizajeId');
  late final GeneratedColumn<int?> sesionAprendizajeId = GeneratedColumn<int?>(
      'sesion_aprendizaje_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _desempenioIcdIdMeta =
      const VerificationMeta('desempenioIcdId');
  late final GeneratedColumn<int?> desempenioIcdId = GeneratedColumn<int?>(
      'desempenio_icd_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _campoTematicoIdMeta =
      const VerificationMeta('campoTematicoId');
  late final GeneratedColumn<int?> campoTematicoId = GeneratedColumn<int?>(
      'campo_tematico_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoEvaluacionIdMeta =
      const VerificationMeta('tipoEvaluacionId');
  late final GeneratedColumn<int?> tipoEvaluacionId = GeneratedColumn<int?>(
      'tipo_evaluacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoEscalaEvaluacionIdMeta =
      const VerificationMeta('tipoEscalaEvaluacionId');
  late final GeneratedColumn<int?> tipoEscalaEvaluacionId =
      GeneratedColumn<int?>('tipo_escala_evaluacion_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoColorRubroProcesoMeta =
      const VerificationMeta('tipoColorRubroProceso');
  late final GeneratedColumn<int?> tipoColorRubroProceso =
      GeneratedColumn<int?>('tipo_color_rubro_proceso', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tiporubroidMeta =
      const VerificationMeta('tiporubroid');
  late final GeneratedColumn<int?> tiporubroid = GeneratedColumn<int?>(
      'tiporubroid', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _formaEvaluacionIdMeta =
      const VerificationMeta('formaEvaluacionId');
  late final GeneratedColumn<int?> formaEvaluacionId = GeneratedColumn<int?>(
      'forma_evaluacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _countIndicadorMeta =
      const VerificationMeta('countIndicador');
  late final GeneratedColumn<int?> countIndicador = GeneratedColumn<int?>(
      'count_indicador', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rubroFormalMeta =
      const VerificationMeta('rubroFormal');
  late final GeneratedColumn<int?> rubroFormal = GeneratedColumn<int?>(
      'rubro_formal', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _msjeMeta = const VerificationMeta('msje');
  late final GeneratedColumn<int?> msje = GeneratedColumn<int?>(
      'msje', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _promedioMeta = const VerificationMeta('promedio');
  late final GeneratedColumn<double?> promedio = GeneratedColumn<double?>(
      'promedio', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _desviacionEstandarMeta =
      const VerificationMeta('desviacionEstandar');
  late final GeneratedColumn<double?> desviacionEstandar =
      GeneratedColumn<double?>('desviacion_estandar', aliasedName, true,
          typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _unidadAprendizajeIdMeta =
      const VerificationMeta('unidadAprendizajeId');
  late final GeneratedColumn<int?> unidadAprendizajeId = GeneratedColumn<int?>(
      'unidad_aprendizaje_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estrategiaEvaluacionIdMeta =
      const VerificationMeta('estrategiaEvaluacionId');
  late final GeneratedColumn<int?> estrategiaEvaluacionId =
      GeneratedColumn<int?>('estrategia_evaluacion_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tareaIdMeta = const VerificationMeta('tareaId');
  late final GeneratedColumn<String?> tareaId = GeneratedColumn<String?>(
      'tarea_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _resultadoTipoNotaIdMeta =
      const VerificationMeta('resultadoTipoNotaId');
  late final GeneratedColumn<String?> resultadoTipoNotaId =
      GeneratedColumn<String?>('resultado_tipo_nota_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _instrumentoEvalIdMeta =
      const VerificationMeta('instrumentoEvalId');
  late final GeneratedColumn<String?> instrumentoEvalId =
      GeneratedColumn<String?>('instrumento_eval_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _preguntaEvalIdMeta =
      const VerificationMeta('preguntaEvalId');
  late final GeneratedColumn<String?> preguntaEvalId = GeneratedColumn<String?>(
      'pregunta_eval_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _error_guardarMeta =
      const VerificationMeta('error_guardar');
  late final GeneratedColumn<int?> error_guardar = GeneratedColumn<int?>(
      'error_guardar', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        rubroEvalProcesoId,
        titulo,
        subtitulo,
        colorFondo,
        mColorFondo,
        valorDefecto,
        competenciaId,
        calendarioPeriodoId,
        anchoColumna,
        ocultarColumna,
        tipoFormulaId,
        silaboEventoId,
        tipoRedondeoId,
        valorRedondeoId,
        rubroEvalResultadoId,
        tipoNotaId,
        sesionAprendizajeId,
        desempenioIcdId,
        campoTematicoId,
        tipoEvaluacionId,
        estadoId,
        tipoEscalaEvaluacionId,
        tipoColorRubroProceso,
        tiporubroid,
        formaEvaluacionId,
        countIndicador,
        rubroFormal,
        msje,
        promedio,
        desviacionEstandar,
        unidadAprendizajeId,
        estrategiaEvaluacionId,
        tareaId,
        resultadoTipoNotaId,
        instrumentoEvalId,
        preguntaEvalId,
        error_guardar
      ];
  @override
  String get aliasedName => _alias ?? 'rubro_evaluacion_proceso';
  @override
  String get actualTableName => 'rubro_evaluacion_proceso';
  @override
  VerificationContext validateIntegrity(
      Insertable<RubroEvaluacionProcesoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('rubro_eval_proceso_id')) {
      context.handle(
          _rubroEvalProcesoIdMeta,
          rubroEvalProcesoId.isAcceptableOrUnknown(
              data['rubro_eval_proceso_id']!, _rubroEvalProcesoIdMeta));
    } else if (isInserting) {
      context.missing(_rubroEvalProcesoIdMeta);
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('subtitulo')) {
      context.handle(_subtituloMeta,
          subtitulo.isAcceptableOrUnknown(data['subtitulo']!, _subtituloMeta));
    }
    if (data.containsKey('color_fondo')) {
      context.handle(
          _colorFondoMeta,
          colorFondo.isAcceptableOrUnknown(
              data['color_fondo']!, _colorFondoMeta));
    }
    if (data.containsKey('m_color_fondo')) {
      context.handle(
          _mColorFondoMeta,
          mColorFondo.isAcceptableOrUnknown(
              data['m_color_fondo']!, _mColorFondoMeta));
    }
    if (data.containsKey('valor_defecto')) {
      context.handle(
          _valorDefectoMeta,
          valorDefecto.isAcceptableOrUnknown(
              data['valor_defecto']!, _valorDefectoMeta));
    }
    if (data.containsKey('competencia_id')) {
      context.handle(
          _competenciaIdMeta,
          competenciaId.isAcceptableOrUnknown(
              data['competencia_id']!, _competenciaIdMeta));
    }
    if (data.containsKey('calendario_periodo_id')) {
      context.handle(
          _calendarioPeriodoIdMeta,
          calendarioPeriodoId.isAcceptableOrUnknown(
              data['calendario_periodo_id']!, _calendarioPeriodoIdMeta));
    }
    if (data.containsKey('ancho_columna')) {
      context.handle(
          _anchoColumnaMeta,
          anchoColumna.isAcceptableOrUnknown(
              data['ancho_columna']!, _anchoColumnaMeta));
    }
    if (data.containsKey('ocultar_columna')) {
      context.handle(
          _ocultarColumnaMeta,
          ocultarColumna.isAcceptableOrUnknown(
              data['ocultar_columna']!, _ocultarColumnaMeta));
    }
    if (data.containsKey('tipo_formula_id')) {
      context.handle(
          _tipoFormulaIdMeta,
          tipoFormulaId.isAcceptableOrUnknown(
              data['tipo_formula_id']!, _tipoFormulaIdMeta));
    }
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    }
    if (data.containsKey('tipo_redondeo_id')) {
      context.handle(
          _tipoRedondeoIdMeta,
          tipoRedondeoId.isAcceptableOrUnknown(
              data['tipo_redondeo_id']!, _tipoRedondeoIdMeta));
    }
    if (data.containsKey('valor_redondeo_id')) {
      context.handle(
          _valorRedondeoIdMeta,
          valorRedondeoId.isAcceptableOrUnknown(
              data['valor_redondeo_id']!, _valorRedondeoIdMeta));
    }
    if (data.containsKey('rubro_eval_resultado_id')) {
      context.handle(
          _rubroEvalResultadoIdMeta,
          rubroEvalResultadoId.isAcceptableOrUnknown(
              data['rubro_eval_resultado_id']!, _rubroEvalResultadoIdMeta));
    }
    if (data.containsKey('tipo_nota_id')) {
      context.handle(
          _tipoNotaIdMeta,
          tipoNotaId.isAcceptableOrUnknown(
              data['tipo_nota_id']!, _tipoNotaIdMeta));
    }
    if (data.containsKey('sesion_aprendizaje_id')) {
      context.handle(
          _sesionAprendizajeIdMeta,
          sesionAprendizajeId.isAcceptableOrUnknown(
              data['sesion_aprendizaje_id']!, _sesionAprendizajeIdMeta));
    }
    if (data.containsKey('desempenio_icd_id')) {
      context.handle(
          _desempenioIcdIdMeta,
          desempenioIcdId.isAcceptableOrUnknown(
              data['desempenio_icd_id']!, _desempenioIcdIdMeta));
    }
    if (data.containsKey('campo_tematico_id')) {
      context.handle(
          _campoTematicoIdMeta,
          campoTematicoId.isAcceptableOrUnknown(
              data['campo_tematico_id']!, _campoTematicoIdMeta));
    }
    if (data.containsKey('tipo_evaluacion_id')) {
      context.handle(
          _tipoEvaluacionIdMeta,
          tipoEvaluacionId.isAcceptableOrUnknown(
              data['tipo_evaluacion_id']!, _tipoEvaluacionIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('tipo_escala_evaluacion_id')) {
      context.handle(
          _tipoEscalaEvaluacionIdMeta,
          tipoEscalaEvaluacionId.isAcceptableOrUnknown(
              data['tipo_escala_evaluacion_id']!, _tipoEscalaEvaluacionIdMeta));
    }
    if (data.containsKey('tipo_color_rubro_proceso')) {
      context.handle(
          _tipoColorRubroProcesoMeta,
          tipoColorRubroProceso.isAcceptableOrUnknown(
              data['tipo_color_rubro_proceso']!, _tipoColorRubroProcesoMeta));
    }
    if (data.containsKey('tiporubroid')) {
      context.handle(
          _tiporubroidMeta,
          tiporubroid.isAcceptableOrUnknown(
              data['tiporubroid']!, _tiporubroidMeta));
    }
    if (data.containsKey('forma_evaluacion_id')) {
      context.handle(
          _formaEvaluacionIdMeta,
          formaEvaluacionId.isAcceptableOrUnknown(
              data['forma_evaluacion_id']!, _formaEvaluacionIdMeta));
    }
    if (data.containsKey('count_indicador')) {
      context.handle(
          _countIndicadorMeta,
          countIndicador.isAcceptableOrUnknown(
              data['count_indicador']!, _countIndicadorMeta));
    }
    if (data.containsKey('rubro_formal')) {
      context.handle(
          _rubroFormalMeta,
          rubroFormal.isAcceptableOrUnknown(
              data['rubro_formal']!, _rubroFormalMeta));
    }
    if (data.containsKey('msje')) {
      context.handle(
          _msjeMeta, msje.isAcceptableOrUnknown(data['msje']!, _msjeMeta));
    }
    if (data.containsKey('promedio')) {
      context.handle(_promedioMeta,
          promedio.isAcceptableOrUnknown(data['promedio']!, _promedioMeta));
    }
    if (data.containsKey('desviacion_estandar')) {
      context.handle(
          _desviacionEstandarMeta,
          desviacionEstandar.isAcceptableOrUnknown(
              data['desviacion_estandar']!, _desviacionEstandarMeta));
    }
    if (data.containsKey('unidad_aprendizaje_id')) {
      context.handle(
          _unidadAprendizajeIdMeta,
          unidadAprendizajeId.isAcceptableOrUnknown(
              data['unidad_aprendizaje_id']!, _unidadAprendizajeIdMeta));
    }
    if (data.containsKey('estrategia_evaluacion_id')) {
      context.handle(
          _estrategiaEvaluacionIdMeta,
          estrategiaEvaluacionId.isAcceptableOrUnknown(
              data['estrategia_evaluacion_id']!, _estrategiaEvaluacionIdMeta));
    }
    if (data.containsKey('tarea_id')) {
      context.handle(_tareaIdMeta,
          tareaId.isAcceptableOrUnknown(data['tarea_id']!, _tareaIdMeta));
    }
    if (data.containsKey('resultado_tipo_nota_id')) {
      context.handle(
          _resultadoTipoNotaIdMeta,
          resultadoTipoNotaId.isAcceptableOrUnknown(
              data['resultado_tipo_nota_id']!, _resultadoTipoNotaIdMeta));
    }
    if (data.containsKey('instrumento_eval_id')) {
      context.handle(
          _instrumentoEvalIdMeta,
          instrumentoEvalId.isAcceptableOrUnknown(
              data['instrumento_eval_id']!, _instrumentoEvalIdMeta));
    }
    if (data.containsKey('pregunta_eval_id')) {
      context.handle(
          _preguntaEvalIdMeta,
          preguntaEvalId.isAcceptableOrUnknown(
              data['pregunta_eval_id']!, _preguntaEvalIdMeta));
    }
    if (data.containsKey('error_guardar')) {
      context.handle(
          _error_guardarMeta,
          error_guardar.isAcceptableOrUnknown(
              data['error_guardar']!, _error_guardarMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {rubroEvalProcesoId};
  @override
  RubroEvaluacionProcesoData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return RubroEvaluacionProcesoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RubroEvaluacionProcesoTable createAlias(String alias) {
    return $RubroEvaluacionProcesoTable(_db, alias);
  }
}

class ArchivoRubroData extends DataClass
    implements Insertable<ArchivoRubroData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String archivoRubroId;
  final String? url;
  final int? tipoArchivoId;
  final String? evaluacionProcesoId;
  final String? localpath;
  final int? delete;
  ArchivoRubroData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.archivoRubroId,
      this.url,
      this.tipoArchivoId,
      this.evaluacionProcesoId,
      this.localpath,
      this.delete});
  factory ArchivoRubroData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ArchivoRubroData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      archivoRubroId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}archivo_rubro_id'])!,
      url: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}url']),
      tipoArchivoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_archivo_id']),
      evaluacionProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}evaluacion_proceso_id']),
      localpath: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}localpath']),
      delete: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delete']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['archivo_rubro_id'] = Variable<String>(archivoRubroId);
    if (!nullToAbsent || url != null) {
      map['url'] = Variable<String?>(url);
    }
    if (!nullToAbsent || tipoArchivoId != null) {
      map['tipo_archivo_id'] = Variable<int?>(tipoArchivoId);
    }
    if (!nullToAbsent || evaluacionProcesoId != null) {
      map['evaluacion_proceso_id'] = Variable<String?>(evaluacionProcesoId);
    }
    if (!nullToAbsent || localpath != null) {
      map['localpath'] = Variable<String?>(localpath);
    }
    if (!nullToAbsent || delete != null) {
      map['delete'] = Variable<int?>(delete);
    }
    return map;
  }

  ArchivoRubroCompanion toCompanion(bool nullToAbsent) {
    return ArchivoRubroCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      archivoRubroId: Value(archivoRubroId),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      tipoArchivoId: tipoArchivoId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoArchivoId),
      evaluacionProcesoId: evaluacionProcesoId == null && nullToAbsent
          ? const Value.absent()
          : Value(evaluacionProcesoId),
      localpath: localpath == null && nullToAbsent
          ? const Value.absent()
          : Value(localpath),
      delete:
          delete == null && nullToAbsent ? const Value.absent() : Value(delete),
    );
  }

  factory ArchivoRubroData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ArchivoRubroData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      archivoRubroId: serializer.fromJson<String>(json['archivoRubroId']),
      url: serializer.fromJson<String?>(json['url']),
      tipoArchivoId: serializer.fromJson<int?>(json['tipoArchivoId']),
      evaluacionProcesoId:
          serializer.fromJson<String?>(json['evaluacionProcesoId']),
      localpath: serializer.fromJson<String?>(json['localpath']),
      delete: serializer.fromJson<int?>(json['delete']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'archivoRubroId': serializer.toJson<String>(archivoRubroId),
      'url': serializer.toJson<String?>(url),
      'tipoArchivoId': serializer.toJson<int?>(tipoArchivoId),
      'evaluacionProcesoId': serializer.toJson<String?>(evaluacionProcesoId),
      'localpath': serializer.toJson<String?>(localpath),
      'delete': serializer.toJson<int?>(delete),
    };
  }

  ArchivoRubroData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? archivoRubroId,
          String? url,
          int? tipoArchivoId,
          String? evaluacionProcesoId,
          String? localpath,
          int? delete}) =>
      ArchivoRubroData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        archivoRubroId: archivoRubroId ?? this.archivoRubroId,
        url: url ?? this.url,
        tipoArchivoId: tipoArchivoId ?? this.tipoArchivoId,
        evaluacionProcesoId: evaluacionProcesoId ?? this.evaluacionProcesoId,
        localpath: localpath ?? this.localpath,
        delete: delete ?? this.delete,
      );
  @override
  String toString() {
    return (StringBuffer('ArchivoRubroData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('archivoRubroId: $archivoRubroId, ')
          ..write('url: $url, ')
          ..write('tipoArchivoId: $tipoArchivoId, ')
          ..write('evaluacionProcesoId: $evaluacionProcesoId, ')
          ..write('localpath: $localpath, ')
          ..write('delete: $delete')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(
                              archivoRubroId.hashCode,
                              $mrjc(
                                  url.hashCode,
                                  $mrjc(
                                      tipoArchivoId.hashCode,
                                      $mrjc(
                                          evaluacionProcesoId.hashCode,
                                          $mrjc(localpath.hashCode,
                                              delete.hashCode))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ArchivoRubroData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.archivoRubroId == this.archivoRubroId &&
          other.url == this.url &&
          other.tipoArchivoId == this.tipoArchivoId &&
          other.evaluacionProcesoId == this.evaluacionProcesoId &&
          other.localpath == this.localpath &&
          other.delete == this.delete);
}

class ArchivoRubroCompanion extends UpdateCompanion<ArchivoRubroData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> archivoRubroId;
  final Value<String?> url;
  final Value<int?> tipoArchivoId;
  final Value<String?> evaluacionProcesoId;
  final Value<String?> localpath;
  final Value<int?> delete;
  const ArchivoRubroCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.archivoRubroId = const Value.absent(),
    this.url = const Value.absent(),
    this.tipoArchivoId = const Value.absent(),
    this.evaluacionProcesoId = const Value.absent(),
    this.localpath = const Value.absent(),
    this.delete = const Value.absent(),
  });
  ArchivoRubroCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String archivoRubroId,
    this.url = const Value.absent(),
    this.tipoArchivoId = const Value.absent(),
    this.evaluacionProcesoId = const Value.absent(),
    this.localpath = const Value.absent(),
    this.delete = const Value.absent(),
  }) : archivoRubroId = Value(archivoRubroId);
  static Insertable<ArchivoRubroData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? archivoRubroId,
    Expression<String?>? url,
    Expression<int?>? tipoArchivoId,
    Expression<String?>? evaluacionProcesoId,
    Expression<String?>? localpath,
    Expression<int?>? delete,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (archivoRubroId != null) 'archivo_rubro_id': archivoRubroId,
      if (url != null) 'url': url,
      if (tipoArchivoId != null) 'tipo_archivo_id': tipoArchivoId,
      if (evaluacionProcesoId != null)
        'evaluacion_proceso_id': evaluacionProcesoId,
      if (localpath != null) 'localpath': localpath,
      if (delete != null) 'delete': delete,
    });
  }

  ArchivoRubroCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? archivoRubroId,
      Value<String?>? url,
      Value<int?>? tipoArchivoId,
      Value<String?>? evaluacionProcesoId,
      Value<String?>? localpath,
      Value<int?>? delete}) {
    return ArchivoRubroCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      archivoRubroId: archivoRubroId ?? this.archivoRubroId,
      url: url ?? this.url,
      tipoArchivoId: tipoArchivoId ?? this.tipoArchivoId,
      evaluacionProcesoId: evaluacionProcesoId ?? this.evaluacionProcesoId,
      localpath: localpath ?? this.localpath,
      delete: delete ?? this.delete,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (archivoRubroId.present) {
      map['archivo_rubro_id'] = Variable<String>(archivoRubroId.value);
    }
    if (url.present) {
      map['url'] = Variable<String?>(url.value);
    }
    if (tipoArchivoId.present) {
      map['tipo_archivo_id'] = Variable<int?>(tipoArchivoId.value);
    }
    if (evaluacionProcesoId.present) {
      map['evaluacion_proceso_id'] =
          Variable<String?>(evaluacionProcesoId.value);
    }
    if (localpath.present) {
      map['localpath'] = Variable<String?>(localpath.value);
    }
    if (delete.present) {
      map['delete'] = Variable<int?>(delete.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ArchivoRubroCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('archivoRubroId: $archivoRubroId, ')
          ..write('url: $url, ')
          ..write('tipoArchivoId: $tipoArchivoId, ')
          ..write('evaluacionProcesoId: $evaluacionProcesoId, ')
          ..write('localpath: $localpath, ')
          ..write('delete: $delete')
          ..write(')'))
        .toString();
  }
}

class $ArchivoRubroTable extends ArchivoRubro
    with TableInfo<$ArchivoRubroTable, ArchivoRubroData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ArchivoRubroTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _archivoRubroIdMeta =
      const VerificationMeta('archivoRubroId');
  late final GeneratedColumn<String?> archivoRubroId = GeneratedColumn<String?>(
      'archivo_rubro_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _urlMeta = const VerificationMeta('url');
  late final GeneratedColumn<String?> url = GeneratedColumn<String?>(
      'url', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoArchivoIdMeta =
      const VerificationMeta('tipoArchivoId');
  late final GeneratedColumn<int?> tipoArchivoId = GeneratedColumn<int?>(
      'tipo_archivo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _evaluacionProcesoIdMeta =
      const VerificationMeta('evaluacionProcesoId');
  late final GeneratedColumn<String?> evaluacionProcesoId =
      GeneratedColumn<String?>('evaluacion_proceso_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _localpathMeta = const VerificationMeta('localpath');
  late final GeneratedColumn<String?> localpath = GeneratedColumn<String?>(
      'localpath', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _deleteMeta = const VerificationMeta('delete');
  late final GeneratedColumn<int?> delete = GeneratedColumn<int?>(
      'delete', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        archivoRubroId,
        url,
        tipoArchivoId,
        evaluacionProcesoId,
        localpath,
        delete
      ];
  @override
  String get aliasedName => _alias ?? 'archivo_rubro';
  @override
  String get actualTableName => 'archivo_rubro';
  @override
  VerificationContext validateIntegrity(Insertable<ArchivoRubroData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('archivo_rubro_id')) {
      context.handle(
          _archivoRubroIdMeta,
          archivoRubroId.isAcceptableOrUnknown(
              data['archivo_rubro_id']!, _archivoRubroIdMeta));
    } else if (isInserting) {
      context.missing(_archivoRubroIdMeta);
    }
    if (data.containsKey('url')) {
      context.handle(
          _urlMeta, url.isAcceptableOrUnknown(data['url']!, _urlMeta));
    }
    if (data.containsKey('tipo_archivo_id')) {
      context.handle(
          _tipoArchivoIdMeta,
          tipoArchivoId.isAcceptableOrUnknown(
              data['tipo_archivo_id']!, _tipoArchivoIdMeta));
    }
    if (data.containsKey('evaluacion_proceso_id')) {
      context.handle(
          _evaluacionProcesoIdMeta,
          evaluacionProcesoId.isAcceptableOrUnknown(
              data['evaluacion_proceso_id']!, _evaluacionProcesoIdMeta));
    }
    if (data.containsKey('localpath')) {
      context.handle(_localpathMeta,
          localpath.isAcceptableOrUnknown(data['localpath']!, _localpathMeta));
    }
    if (data.containsKey('delete')) {
      context.handle(_deleteMeta,
          delete.isAcceptableOrUnknown(data['delete']!, _deleteMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {archivoRubroId};
  @override
  ArchivoRubroData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ArchivoRubroData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ArchivoRubroTable createAlias(String alias) {
    return $ArchivoRubroTable(_db, alias);
  }
}

class EquipoEvaluacionData extends DataClass
    implements Insertable<EquipoEvaluacionData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String equipoEvaluacionProcesoId;
  final String? rubroEvalProcesoId;
  final int? sesionAprendizajeId;
  final String? equipoId;
  final double? nota;
  final String? escala;
  final String? valorTipoNotaId;
  EquipoEvaluacionData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.equipoEvaluacionProcesoId,
      this.rubroEvalProcesoId,
      this.sesionAprendizajeId,
      this.equipoId,
      this.nota,
      this.escala,
      this.valorTipoNotaId});
  factory EquipoEvaluacionData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EquipoEvaluacionData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      equipoEvaluacionProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}equipo_evaluacion_proceso_id'])!,
      rubroEvalProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_eval_proceso_id']),
      sesionAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}sesion_aprendizaje_id']),
      equipoId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipo_id']),
      nota: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nota']),
      escala: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escala']),
      valorTipoNotaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}valor_tipo_nota_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['equipo_evaluacion_proceso_id'] =
        Variable<String>(equipoEvaluacionProcesoId);
    if (!nullToAbsent || rubroEvalProcesoId != null) {
      map['rubro_eval_proceso_id'] = Variable<String?>(rubroEvalProcesoId);
    }
    if (!nullToAbsent || sesionAprendizajeId != null) {
      map['sesion_aprendizaje_id'] = Variable<int?>(sesionAprendizajeId);
    }
    if (!nullToAbsent || equipoId != null) {
      map['equipo_id'] = Variable<String?>(equipoId);
    }
    if (!nullToAbsent || nota != null) {
      map['nota'] = Variable<double?>(nota);
    }
    if (!nullToAbsent || escala != null) {
      map['escala'] = Variable<String?>(escala);
    }
    if (!nullToAbsent || valorTipoNotaId != null) {
      map['valor_tipo_nota_id'] = Variable<String?>(valorTipoNotaId);
    }
    return map;
  }

  EquipoEvaluacionCompanion toCompanion(bool nullToAbsent) {
    return EquipoEvaluacionCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      equipoEvaluacionProcesoId: Value(equipoEvaluacionProcesoId),
      rubroEvalProcesoId: rubroEvalProcesoId == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroEvalProcesoId),
      sesionAprendizajeId: sesionAprendizajeId == null && nullToAbsent
          ? const Value.absent()
          : Value(sesionAprendizajeId),
      equipoId: equipoId == null && nullToAbsent
          ? const Value.absent()
          : Value(equipoId),
      nota: nota == null && nullToAbsent ? const Value.absent() : Value(nota),
      escala:
          escala == null && nullToAbsent ? const Value.absent() : Value(escala),
      valorTipoNotaId: valorTipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTipoNotaId),
    );
  }

  factory EquipoEvaluacionData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EquipoEvaluacionData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      equipoEvaluacionProcesoId:
          serializer.fromJson<String>(json['equipoEvaluacionProcesoId']),
      rubroEvalProcesoId:
          serializer.fromJson<String?>(json['rubroEvalProcesoId']),
      sesionAprendizajeId:
          serializer.fromJson<int?>(json['sesionAprendizajeId']),
      equipoId: serializer.fromJson<String?>(json['equipoId']),
      nota: serializer.fromJson<double?>(json['nota']),
      escala: serializer.fromJson<String?>(json['escala']),
      valorTipoNotaId: serializer.fromJson<String?>(json['valorTipoNotaId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'equipoEvaluacionProcesoId':
          serializer.toJson<String>(equipoEvaluacionProcesoId),
      'rubroEvalProcesoId': serializer.toJson<String?>(rubroEvalProcesoId),
      'sesionAprendizajeId': serializer.toJson<int?>(sesionAprendizajeId),
      'equipoId': serializer.toJson<String?>(equipoId),
      'nota': serializer.toJson<double?>(nota),
      'escala': serializer.toJson<String?>(escala),
      'valorTipoNotaId': serializer.toJson<String?>(valorTipoNotaId),
    };
  }

  EquipoEvaluacionData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? equipoEvaluacionProcesoId,
          String? rubroEvalProcesoId,
          int? sesionAprendizajeId,
          String? equipoId,
          double? nota,
          String? escala,
          String? valorTipoNotaId}) =>
      EquipoEvaluacionData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        equipoEvaluacionProcesoId:
            equipoEvaluacionProcesoId ?? this.equipoEvaluacionProcesoId,
        rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
        sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
        equipoId: equipoId ?? this.equipoId,
        nota: nota ?? this.nota,
        escala: escala ?? this.escala,
        valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
      );
  @override
  String toString() {
    return (StringBuffer('EquipoEvaluacionData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('equipoEvaluacionProcesoId: $equipoEvaluacionProcesoId, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('equipoId: $equipoId, ')
          ..write('nota: $nota, ')
          ..write('escala: $escala, ')
          ..write('valorTipoNotaId: $valorTipoNotaId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(
                              equipoEvaluacionProcesoId.hashCode,
                              $mrjc(
                                  rubroEvalProcesoId.hashCode,
                                  $mrjc(
                                      sesionAprendizajeId.hashCode,
                                      $mrjc(
                                          equipoId.hashCode,
                                          $mrjc(
                                              nota.hashCode,
                                              $mrjc(
                                                  escala.hashCode,
                                                  valorTipoNotaId
                                                      .hashCode)))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EquipoEvaluacionData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.equipoEvaluacionProcesoId == this.equipoEvaluacionProcesoId &&
          other.rubroEvalProcesoId == this.rubroEvalProcesoId &&
          other.sesionAprendizajeId == this.sesionAprendizajeId &&
          other.equipoId == this.equipoId &&
          other.nota == this.nota &&
          other.escala == this.escala &&
          other.valorTipoNotaId == this.valorTipoNotaId);
}

class EquipoEvaluacionCompanion extends UpdateCompanion<EquipoEvaluacionData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> equipoEvaluacionProcesoId;
  final Value<String?> rubroEvalProcesoId;
  final Value<int?> sesionAprendizajeId;
  final Value<String?> equipoId;
  final Value<double?> nota;
  final Value<String?> escala;
  final Value<String?> valorTipoNotaId;
  const EquipoEvaluacionCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.equipoEvaluacionProcesoId = const Value.absent(),
    this.rubroEvalProcesoId = const Value.absent(),
    this.sesionAprendizajeId = const Value.absent(),
    this.equipoId = const Value.absent(),
    this.nota = const Value.absent(),
    this.escala = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
  });
  EquipoEvaluacionCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String equipoEvaluacionProcesoId,
    this.rubroEvalProcesoId = const Value.absent(),
    this.sesionAprendizajeId = const Value.absent(),
    this.equipoId = const Value.absent(),
    this.nota = const Value.absent(),
    this.escala = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
  }) : equipoEvaluacionProcesoId = Value(equipoEvaluacionProcesoId);
  static Insertable<EquipoEvaluacionData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? equipoEvaluacionProcesoId,
    Expression<String?>? rubroEvalProcesoId,
    Expression<int?>? sesionAprendizajeId,
    Expression<String?>? equipoId,
    Expression<double?>? nota,
    Expression<String?>? escala,
    Expression<String?>? valorTipoNotaId,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (equipoEvaluacionProcesoId != null)
        'equipo_evaluacion_proceso_id': equipoEvaluacionProcesoId,
      if (rubroEvalProcesoId != null)
        'rubro_eval_proceso_id': rubroEvalProcesoId,
      if (sesionAprendizajeId != null)
        'sesion_aprendizaje_id': sesionAprendizajeId,
      if (equipoId != null) 'equipo_id': equipoId,
      if (nota != null) 'nota': nota,
      if (escala != null) 'escala': escala,
      if (valorTipoNotaId != null) 'valor_tipo_nota_id': valorTipoNotaId,
    });
  }

  EquipoEvaluacionCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? equipoEvaluacionProcesoId,
      Value<String?>? rubroEvalProcesoId,
      Value<int?>? sesionAprendizajeId,
      Value<String?>? equipoId,
      Value<double?>? nota,
      Value<String?>? escala,
      Value<String?>? valorTipoNotaId}) {
    return EquipoEvaluacionCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      equipoEvaluacionProcesoId:
          equipoEvaluacionProcesoId ?? this.equipoEvaluacionProcesoId,
      rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
      sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
      equipoId: equipoId ?? this.equipoId,
      nota: nota ?? this.nota,
      escala: escala ?? this.escala,
      valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (equipoEvaluacionProcesoId.present) {
      map['equipo_evaluacion_proceso_id'] =
          Variable<String>(equipoEvaluacionProcesoId.value);
    }
    if (rubroEvalProcesoId.present) {
      map['rubro_eval_proceso_id'] =
          Variable<String?>(rubroEvalProcesoId.value);
    }
    if (sesionAprendizajeId.present) {
      map['sesion_aprendizaje_id'] = Variable<int?>(sesionAprendizajeId.value);
    }
    if (equipoId.present) {
      map['equipo_id'] = Variable<String?>(equipoId.value);
    }
    if (nota.present) {
      map['nota'] = Variable<double?>(nota.value);
    }
    if (escala.present) {
      map['escala'] = Variable<String?>(escala.value);
    }
    if (valorTipoNotaId.present) {
      map['valor_tipo_nota_id'] = Variable<String?>(valorTipoNotaId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EquipoEvaluacionCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('equipoEvaluacionProcesoId: $equipoEvaluacionProcesoId, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('equipoId: $equipoId, ')
          ..write('nota: $nota, ')
          ..write('escala: $escala, ')
          ..write('valorTipoNotaId: $valorTipoNotaId')
          ..write(')'))
        .toString();
  }
}

class $EquipoEvaluacionTable extends EquipoEvaluacion
    with TableInfo<$EquipoEvaluacionTable, EquipoEvaluacionData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $EquipoEvaluacionTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _equipoEvaluacionProcesoIdMeta =
      const VerificationMeta('equipoEvaluacionProcesoId');
  late final GeneratedColumn<String?> equipoEvaluacionProcesoId =
      GeneratedColumn<String?>(
          'equipo_evaluacion_proceso_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _rubroEvalProcesoIdMeta =
      const VerificationMeta('rubroEvalProcesoId');
  late final GeneratedColumn<String?> rubroEvalProcesoId =
      GeneratedColumn<String?>('rubro_eval_proceso_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _sesionAprendizajeIdMeta =
      const VerificationMeta('sesionAprendizajeId');
  late final GeneratedColumn<int?> sesionAprendizajeId = GeneratedColumn<int?>(
      'sesion_aprendizaje_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _equipoIdMeta = const VerificationMeta('equipoId');
  late final GeneratedColumn<String?> equipoId = GeneratedColumn<String?>(
      'equipo_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _notaMeta = const VerificationMeta('nota');
  late final GeneratedColumn<double?> nota = GeneratedColumn<double?>(
      'nota', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _escalaMeta = const VerificationMeta('escala');
  late final GeneratedColumn<String?> escala = GeneratedColumn<String?>(
      'escala', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _valorTipoNotaIdMeta =
      const VerificationMeta('valorTipoNotaId');
  late final GeneratedColumn<String?> valorTipoNotaId =
      GeneratedColumn<String?>('valor_tipo_nota_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        equipoEvaluacionProcesoId,
        rubroEvalProcesoId,
        sesionAprendizajeId,
        equipoId,
        nota,
        escala,
        valorTipoNotaId
      ];
  @override
  String get aliasedName => _alias ?? 'equipo_evaluacion';
  @override
  String get actualTableName => 'equipo_evaluacion';
  @override
  VerificationContext validateIntegrity(
      Insertable<EquipoEvaluacionData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('equipo_evaluacion_proceso_id')) {
      context.handle(
          _equipoEvaluacionProcesoIdMeta,
          equipoEvaluacionProcesoId.isAcceptableOrUnknown(
              data['equipo_evaluacion_proceso_id']!,
              _equipoEvaluacionProcesoIdMeta));
    } else if (isInserting) {
      context.missing(_equipoEvaluacionProcesoIdMeta);
    }
    if (data.containsKey('rubro_eval_proceso_id')) {
      context.handle(
          _rubroEvalProcesoIdMeta,
          rubroEvalProcesoId.isAcceptableOrUnknown(
              data['rubro_eval_proceso_id']!, _rubroEvalProcesoIdMeta));
    }
    if (data.containsKey('sesion_aprendizaje_id')) {
      context.handle(
          _sesionAprendizajeIdMeta,
          sesionAprendizajeId.isAcceptableOrUnknown(
              data['sesion_aprendizaje_id']!, _sesionAprendizajeIdMeta));
    }
    if (data.containsKey('equipo_id')) {
      context.handle(_equipoIdMeta,
          equipoId.isAcceptableOrUnknown(data['equipo_id']!, _equipoIdMeta));
    }
    if (data.containsKey('nota')) {
      context.handle(
          _notaMeta, nota.isAcceptableOrUnknown(data['nota']!, _notaMeta));
    }
    if (data.containsKey('escala')) {
      context.handle(_escalaMeta,
          escala.isAcceptableOrUnknown(data['escala']!, _escalaMeta));
    }
    if (data.containsKey('valor_tipo_nota_id')) {
      context.handle(
          _valorTipoNotaIdMeta,
          valorTipoNotaId.isAcceptableOrUnknown(
              data['valor_tipo_nota_id']!, _valorTipoNotaIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {equipoEvaluacionProcesoId};
  @override
  EquipoEvaluacionData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EquipoEvaluacionData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EquipoEvaluacionTable createAlias(String alias) {
    return $EquipoEvaluacionTable(_db, alias);
  }
}

class EvaluacionProcesoData extends DataClass
    implements Insertable<EvaluacionProcesoData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String evaluacionProcesoId;
  final int? evaluacionResultadoId;
  final double? nota;
  final String? escala;
  final String? rubroEvalProcesoId;
  final int? sesionAprendizajeId;
  final String? valorTipoNotaId;
  final String? equipoId;
  final int? alumnoId;
  final String? nombres;
  final String? apellidoPaterno;
  final String? apellidoMaterno;
  final String? foto;
  final int? calendarioPeriodoId;
  final bool? formulaSinc;
  final int? msje;
  final int? publicado;
  final int? visto;
  EvaluacionProcesoData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.evaluacionProcesoId,
      this.evaluacionResultadoId,
      this.nota,
      this.escala,
      this.rubroEvalProcesoId,
      this.sesionAprendizajeId,
      this.valorTipoNotaId,
      this.equipoId,
      this.alumnoId,
      this.nombres,
      this.apellidoPaterno,
      this.apellidoMaterno,
      this.foto,
      this.calendarioPeriodoId,
      this.formulaSinc,
      this.msje,
      this.publicado,
      this.visto});
  factory EvaluacionProcesoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EvaluacionProcesoData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      evaluacionProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}evaluacion_proceso_id'])!,
      evaluacionResultadoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}evaluacion_resultado_id']),
      nota: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nota']),
      escala: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escala']),
      rubroEvalProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_eval_proceso_id']),
      sesionAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}sesion_aprendizaje_id']),
      valorTipoNotaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}valor_tipo_nota_id']),
      equipoId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipo_id']),
      alumnoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alumno_id']),
      nombres: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombres']),
      apellidoPaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_paterno']),
      apellidoMaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_materno']),
      foto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto']),
      calendarioPeriodoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_periodo_id']),
      formulaSinc: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}formula_sinc']),
      msje: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}msje']),
      publicado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}publicado']),
      visto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}visto']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['evaluacion_proceso_id'] = Variable<String>(evaluacionProcesoId);
    if (!nullToAbsent || evaluacionResultadoId != null) {
      map['evaluacion_resultado_id'] = Variable<int?>(evaluacionResultadoId);
    }
    if (!nullToAbsent || nota != null) {
      map['nota'] = Variable<double?>(nota);
    }
    if (!nullToAbsent || escala != null) {
      map['escala'] = Variable<String?>(escala);
    }
    if (!nullToAbsent || rubroEvalProcesoId != null) {
      map['rubro_eval_proceso_id'] = Variable<String?>(rubroEvalProcesoId);
    }
    if (!nullToAbsent || sesionAprendizajeId != null) {
      map['sesion_aprendizaje_id'] = Variable<int?>(sesionAprendizajeId);
    }
    if (!nullToAbsent || valorTipoNotaId != null) {
      map['valor_tipo_nota_id'] = Variable<String?>(valorTipoNotaId);
    }
    if (!nullToAbsent || equipoId != null) {
      map['equipo_id'] = Variable<String?>(equipoId);
    }
    if (!nullToAbsent || alumnoId != null) {
      map['alumno_id'] = Variable<int?>(alumnoId);
    }
    if (!nullToAbsent || nombres != null) {
      map['nombres'] = Variable<String?>(nombres);
    }
    if (!nullToAbsent || apellidoPaterno != null) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno);
    }
    if (!nullToAbsent || apellidoMaterno != null) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<String?>(foto);
    }
    if (!nullToAbsent || calendarioPeriodoId != null) {
      map['calendario_periodo_id'] = Variable<int?>(calendarioPeriodoId);
    }
    if (!nullToAbsent || formulaSinc != null) {
      map['formula_sinc'] = Variable<bool?>(formulaSinc);
    }
    if (!nullToAbsent || msje != null) {
      map['msje'] = Variable<int?>(msje);
    }
    if (!nullToAbsent || publicado != null) {
      map['publicado'] = Variable<int?>(publicado);
    }
    if (!nullToAbsent || visto != null) {
      map['visto'] = Variable<int?>(visto);
    }
    return map;
  }

  EvaluacionProcesoCompanion toCompanion(bool nullToAbsent) {
    return EvaluacionProcesoCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      evaluacionProcesoId: Value(evaluacionProcesoId),
      evaluacionResultadoId: evaluacionResultadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(evaluacionResultadoId),
      nota: nota == null && nullToAbsent ? const Value.absent() : Value(nota),
      escala:
          escala == null && nullToAbsent ? const Value.absent() : Value(escala),
      rubroEvalProcesoId: rubroEvalProcesoId == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroEvalProcesoId),
      sesionAprendizajeId: sesionAprendizajeId == null && nullToAbsent
          ? const Value.absent()
          : Value(sesionAprendizajeId),
      valorTipoNotaId: valorTipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTipoNotaId),
      equipoId: equipoId == null && nullToAbsent
          ? const Value.absent()
          : Value(equipoId),
      alumnoId: alumnoId == null && nullToAbsent
          ? const Value.absent()
          : Value(alumnoId),
      nombres: nombres == null && nullToAbsent
          ? const Value.absent()
          : Value(nombres),
      apellidoPaterno: apellidoPaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoPaterno),
      apellidoMaterno: apellidoMaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoMaterno),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      calendarioPeriodoId: calendarioPeriodoId == null && nullToAbsent
          ? const Value.absent()
          : Value(calendarioPeriodoId),
      formulaSinc: formulaSinc == null && nullToAbsent
          ? const Value.absent()
          : Value(formulaSinc),
      msje: msje == null && nullToAbsent ? const Value.absent() : Value(msje),
      publicado: publicado == null && nullToAbsent
          ? const Value.absent()
          : Value(publicado),
      visto:
          visto == null && nullToAbsent ? const Value.absent() : Value(visto),
    );
  }

  factory EvaluacionProcesoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EvaluacionProcesoData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      evaluacionProcesoId:
          serializer.fromJson<String>(json['evaluacionProcesoId']),
      evaluacionResultadoId:
          serializer.fromJson<int?>(json['evaluacionResultadoId']),
      nota: serializer.fromJson<double?>(json['nota']),
      escala: serializer.fromJson<String?>(json['escala']),
      rubroEvalProcesoId:
          serializer.fromJson<String?>(json['rubroEvalProcesoId']),
      sesionAprendizajeId:
          serializer.fromJson<int?>(json['sesionAprendizajeId']),
      valorTipoNotaId: serializer.fromJson<String?>(json['valorTipoNotaId']),
      equipoId: serializer.fromJson<String?>(json['equipoId']),
      alumnoId: serializer.fromJson<int?>(json['alumnoId']),
      nombres: serializer.fromJson<String?>(json['nombres']),
      apellidoPaterno: serializer.fromJson<String?>(json['apellidoPaterno']),
      apellidoMaterno: serializer.fromJson<String?>(json['apellidoMaterno']),
      foto: serializer.fromJson<String?>(json['foto']),
      calendarioPeriodoId:
          serializer.fromJson<int?>(json['calendarioPeriodoId']),
      formulaSinc: serializer.fromJson<bool?>(json['formulaSinc']),
      msje: serializer.fromJson<int?>(json['msje']),
      publicado: serializer.fromJson<int?>(json['publicado']),
      visto: serializer.fromJson<int?>(json['visto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'evaluacionProcesoId': serializer.toJson<String>(evaluacionProcesoId),
      'evaluacionResultadoId': serializer.toJson<int?>(evaluacionResultadoId),
      'nota': serializer.toJson<double?>(nota),
      'escala': serializer.toJson<String?>(escala),
      'rubroEvalProcesoId': serializer.toJson<String?>(rubroEvalProcesoId),
      'sesionAprendizajeId': serializer.toJson<int?>(sesionAprendizajeId),
      'valorTipoNotaId': serializer.toJson<String?>(valorTipoNotaId),
      'equipoId': serializer.toJson<String?>(equipoId),
      'alumnoId': serializer.toJson<int?>(alumnoId),
      'nombres': serializer.toJson<String?>(nombres),
      'apellidoPaterno': serializer.toJson<String?>(apellidoPaterno),
      'apellidoMaterno': serializer.toJson<String?>(apellidoMaterno),
      'foto': serializer.toJson<String?>(foto),
      'calendarioPeriodoId': serializer.toJson<int?>(calendarioPeriodoId),
      'formulaSinc': serializer.toJson<bool?>(formulaSinc),
      'msje': serializer.toJson<int?>(msje),
      'publicado': serializer.toJson<int?>(publicado),
      'visto': serializer.toJson<int?>(visto),
    };
  }

  EvaluacionProcesoData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? evaluacionProcesoId,
          int? evaluacionResultadoId,
          double? nota,
          String? escala,
          String? rubroEvalProcesoId,
          int? sesionAprendizajeId,
          String? valorTipoNotaId,
          String? equipoId,
          int? alumnoId,
          String? nombres,
          String? apellidoPaterno,
          String? apellidoMaterno,
          String? foto,
          int? calendarioPeriodoId,
          bool? formulaSinc,
          int? msje,
          int? publicado,
          int? visto}) =>
      EvaluacionProcesoData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        evaluacionProcesoId: evaluacionProcesoId ?? this.evaluacionProcesoId,
        evaluacionResultadoId:
            evaluacionResultadoId ?? this.evaluacionResultadoId,
        nota: nota ?? this.nota,
        escala: escala ?? this.escala,
        rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
        sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
        valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
        equipoId: equipoId ?? this.equipoId,
        alumnoId: alumnoId ?? this.alumnoId,
        nombres: nombres ?? this.nombres,
        apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
        apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
        foto: foto ?? this.foto,
        calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
        formulaSinc: formulaSinc ?? this.formulaSinc,
        msje: msje ?? this.msje,
        publicado: publicado ?? this.publicado,
        visto: visto ?? this.visto,
      );
  @override
  String toString() {
    return (StringBuffer('EvaluacionProcesoData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('evaluacionProcesoId: $evaluacionProcesoId, ')
          ..write('evaluacionResultadoId: $evaluacionResultadoId, ')
          ..write('nota: $nota, ')
          ..write('escala: $escala, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('equipoId: $equipoId, ')
          ..write('alumnoId: $alumnoId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('foto: $foto, ')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('formulaSinc: $formulaSinc, ')
          ..write('msje: $msje, ')
          ..write('publicado: $publicado, ')
          ..write('visto: $visto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(
                              evaluacionProcesoId.hashCode,
                              $mrjc(
                                  evaluacionResultadoId.hashCode,
                                  $mrjc(
                                      nota.hashCode,
                                      $mrjc(
                                          escala.hashCode,
                                          $mrjc(
                                              rubroEvalProcesoId.hashCode,
                                              $mrjc(
                                                  sesionAprendizajeId.hashCode,
                                                  $mrjc(
                                                      valorTipoNotaId.hashCode,
                                                      $mrjc(
                                                          equipoId.hashCode,
                                                          $mrjc(
                                                              alumnoId.hashCode,
                                                              $mrjc(
                                                                  nombres
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      apellidoPaterno
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          apellidoMaterno
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              foto.hashCode,
                                                                              $mrjc(calendarioPeriodoId.hashCode, $mrjc(formulaSinc.hashCode, $mrjc(msje.hashCode, $mrjc(publicado.hashCode, visto.hashCode))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EvaluacionProcesoData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.evaluacionProcesoId == this.evaluacionProcesoId &&
          other.evaluacionResultadoId == this.evaluacionResultadoId &&
          other.nota == this.nota &&
          other.escala == this.escala &&
          other.rubroEvalProcesoId == this.rubroEvalProcesoId &&
          other.sesionAprendizajeId == this.sesionAprendizajeId &&
          other.valorTipoNotaId == this.valorTipoNotaId &&
          other.equipoId == this.equipoId &&
          other.alumnoId == this.alumnoId &&
          other.nombres == this.nombres &&
          other.apellidoPaterno == this.apellidoPaterno &&
          other.apellidoMaterno == this.apellidoMaterno &&
          other.foto == this.foto &&
          other.calendarioPeriodoId == this.calendarioPeriodoId &&
          other.formulaSinc == this.formulaSinc &&
          other.msje == this.msje &&
          other.publicado == this.publicado &&
          other.visto == this.visto);
}

class EvaluacionProcesoCompanion
    extends UpdateCompanion<EvaluacionProcesoData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> evaluacionProcesoId;
  final Value<int?> evaluacionResultadoId;
  final Value<double?> nota;
  final Value<String?> escala;
  final Value<String?> rubroEvalProcesoId;
  final Value<int?> sesionAprendizajeId;
  final Value<String?> valorTipoNotaId;
  final Value<String?> equipoId;
  final Value<int?> alumnoId;
  final Value<String?> nombres;
  final Value<String?> apellidoPaterno;
  final Value<String?> apellidoMaterno;
  final Value<String?> foto;
  final Value<int?> calendarioPeriodoId;
  final Value<bool?> formulaSinc;
  final Value<int?> msje;
  final Value<int?> publicado;
  final Value<int?> visto;
  const EvaluacionProcesoCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.evaluacionProcesoId = const Value.absent(),
    this.evaluacionResultadoId = const Value.absent(),
    this.nota = const Value.absent(),
    this.escala = const Value.absent(),
    this.rubroEvalProcesoId = const Value.absent(),
    this.sesionAprendizajeId = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
    this.equipoId = const Value.absent(),
    this.alumnoId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.foto = const Value.absent(),
    this.calendarioPeriodoId = const Value.absent(),
    this.formulaSinc = const Value.absent(),
    this.msje = const Value.absent(),
    this.publicado = const Value.absent(),
    this.visto = const Value.absent(),
  });
  EvaluacionProcesoCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String evaluacionProcesoId,
    this.evaluacionResultadoId = const Value.absent(),
    this.nota = const Value.absent(),
    this.escala = const Value.absent(),
    this.rubroEvalProcesoId = const Value.absent(),
    this.sesionAprendizajeId = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
    this.equipoId = const Value.absent(),
    this.alumnoId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.foto = const Value.absent(),
    this.calendarioPeriodoId = const Value.absent(),
    this.formulaSinc = const Value.absent(),
    this.msje = const Value.absent(),
    this.publicado = const Value.absent(),
    this.visto = const Value.absent(),
  }) : evaluacionProcesoId = Value(evaluacionProcesoId);
  static Insertable<EvaluacionProcesoData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? evaluacionProcesoId,
    Expression<int?>? evaluacionResultadoId,
    Expression<double?>? nota,
    Expression<String?>? escala,
    Expression<String?>? rubroEvalProcesoId,
    Expression<int?>? sesionAprendizajeId,
    Expression<String?>? valorTipoNotaId,
    Expression<String?>? equipoId,
    Expression<int?>? alumnoId,
    Expression<String?>? nombres,
    Expression<String?>? apellidoPaterno,
    Expression<String?>? apellidoMaterno,
    Expression<String?>? foto,
    Expression<int?>? calendarioPeriodoId,
    Expression<bool?>? formulaSinc,
    Expression<int?>? msje,
    Expression<int?>? publicado,
    Expression<int?>? visto,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (evaluacionProcesoId != null)
        'evaluacion_proceso_id': evaluacionProcesoId,
      if (evaluacionResultadoId != null)
        'evaluacion_resultado_id': evaluacionResultadoId,
      if (nota != null) 'nota': nota,
      if (escala != null) 'escala': escala,
      if (rubroEvalProcesoId != null)
        'rubro_eval_proceso_id': rubroEvalProcesoId,
      if (sesionAprendizajeId != null)
        'sesion_aprendizaje_id': sesionAprendizajeId,
      if (valorTipoNotaId != null) 'valor_tipo_nota_id': valorTipoNotaId,
      if (equipoId != null) 'equipo_id': equipoId,
      if (alumnoId != null) 'alumno_id': alumnoId,
      if (nombres != null) 'nombres': nombres,
      if (apellidoPaterno != null) 'apellido_paterno': apellidoPaterno,
      if (apellidoMaterno != null) 'apellido_materno': apellidoMaterno,
      if (foto != null) 'foto': foto,
      if (calendarioPeriodoId != null)
        'calendario_periodo_id': calendarioPeriodoId,
      if (formulaSinc != null) 'formula_sinc': formulaSinc,
      if (msje != null) 'msje': msje,
      if (publicado != null) 'publicado': publicado,
      if (visto != null) 'visto': visto,
    });
  }

  EvaluacionProcesoCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? evaluacionProcesoId,
      Value<int?>? evaluacionResultadoId,
      Value<double?>? nota,
      Value<String?>? escala,
      Value<String?>? rubroEvalProcesoId,
      Value<int?>? sesionAprendizajeId,
      Value<String?>? valorTipoNotaId,
      Value<String?>? equipoId,
      Value<int?>? alumnoId,
      Value<String?>? nombres,
      Value<String?>? apellidoPaterno,
      Value<String?>? apellidoMaterno,
      Value<String?>? foto,
      Value<int?>? calendarioPeriodoId,
      Value<bool?>? formulaSinc,
      Value<int?>? msje,
      Value<int?>? publicado,
      Value<int?>? visto}) {
    return EvaluacionProcesoCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      evaluacionProcesoId: evaluacionProcesoId ?? this.evaluacionProcesoId,
      evaluacionResultadoId:
          evaluacionResultadoId ?? this.evaluacionResultadoId,
      nota: nota ?? this.nota,
      escala: escala ?? this.escala,
      rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
      sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
      valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
      equipoId: equipoId ?? this.equipoId,
      alumnoId: alumnoId ?? this.alumnoId,
      nombres: nombres ?? this.nombres,
      apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
      apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
      foto: foto ?? this.foto,
      calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
      formulaSinc: formulaSinc ?? this.formulaSinc,
      msje: msje ?? this.msje,
      publicado: publicado ?? this.publicado,
      visto: visto ?? this.visto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (evaluacionProcesoId.present) {
      map['evaluacion_proceso_id'] =
          Variable<String>(evaluacionProcesoId.value);
    }
    if (evaluacionResultadoId.present) {
      map['evaluacion_resultado_id'] =
          Variable<int?>(evaluacionResultadoId.value);
    }
    if (nota.present) {
      map['nota'] = Variable<double?>(nota.value);
    }
    if (escala.present) {
      map['escala'] = Variable<String?>(escala.value);
    }
    if (rubroEvalProcesoId.present) {
      map['rubro_eval_proceso_id'] =
          Variable<String?>(rubroEvalProcesoId.value);
    }
    if (sesionAprendizajeId.present) {
      map['sesion_aprendizaje_id'] = Variable<int?>(sesionAprendizajeId.value);
    }
    if (valorTipoNotaId.present) {
      map['valor_tipo_nota_id'] = Variable<String?>(valorTipoNotaId.value);
    }
    if (equipoId.present) {
      map['equipo_id'] = Variable<String?>(equipoId.value);
    }
    if (alumnoId.present) {
      map['alumno_id'] = Variable<int?>(alumnoId.value);
    }
    if (nombres.present) {
      map['nombres'] = Variable<String?>(nombres.value);
    }
    if (apellidoPaterno.present) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno.value);
    }
    if (apellidoMaterno.present) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno.value);
    }
    if (foto.present) {
      map['foto'] = Variable<String?>(foto.value);
    }
    if (calendarioPeriodoId.present) {
      map['calendario_periodo_id'] = Variable<int?>(calendarioPeriodoId.value);
    }
    if (formulaSinc.present) {
      map['formula_sinc'] = Variable<bool?>(formulaSinc.value);
    }
    if (msje.present) {
      map['msje'] = Variable<int?>(msje.value);
    }
    if (publicado.present) {
      map['publicado'] = Variable<int?>(publicado.value);
    }
    if (visto.present) {
      map['visto'] = Variable<int?>(visto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EvaluacionProcesoCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('evaluacionProcesoId: $evaluacionProcesoId, ')
          ..write('evaluacionResultadoId: $evaluacionResultadoId, ')
          ..write('nota: $nota, ')
          ..write('escala: $escala, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('equipoId: $equipoId, ')
          ..write('alumnoId: $alumnoId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('foto: $foto, ')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('formulaSinc: $formulaSinc, ')
          ..write('msje: $msje, ')
          ..write('publicado: $publicado, ')
          ..write('visto: $visto')
          ..write(')'))
        .toString();
  }
}

class $EvaluacionProcesoTable extends EvaluacionProceso
    with TableInfo<$EvaluacionProcesoTable, EvaluacionProcesoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $EvaluacionProcesoTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _evaluacionProcesoIdMeta =
      const VerificationMeta('evaluacionProcesoId');
  late final GeneratedColumn<String?> evaluacionProcesoId =
      GeneratedColumn<String?>('evaluacion_proceso_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _evaluacionResultadoIdMeta =
      const VerificationMeta('evaluacionResultadoId');
  late final GeneratedColumn<int?> evaluacionResultadoId =
      GeneratedColumn<int?>('evaluacion_resultado_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _notaMeta = const VerificationMeta('nota');
  late final GeneratedColumn<double?> nota = GeneratedColumn<double?>(
      'nota', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _escalaMeta = const VerificationMeta('escala');
  late final GeneratedColumn<String?> escala = GeneratedColumn<String?>(
      'escala', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _rubroEvalProcesoIdMeta =
      const VerificationMeta('rubroEvalProcesoId');
  late final GeneratedColumn<String?> rubroEvalProcesoId =
      GeneratedColumn<String?>('rubro_eval_proceso_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _sesionAprendizajeIdMeta =
      const VerificationMeta('sesionAprendizajeId');
  late final GeneratedColumn<int?> sesionAprendizajeId = GeneratedColumn<int?>(
      'sesion_aprendizaje_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _valorTipoNotaIdMeta =
      const VerificationMeta('valorTipoNotaId');
  late final GeneratedColumn<String?> valorTipoNotaId =
      GeneratedColumn<String?>('valor_tipo_nota_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _equipoIdMeta = const VerificationMeta('equipoId');
  late final GeneratedColumn<String?> equipoId = GeneratedColumn<String?>(
      'equipo_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _alumnoIdMeta = const VerificationMeta('alumnoId');
  late final GeneratedColumn<int?> alumnoId = GeneratedColumn<int?>(
      'alumno_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombresMeta = const VerificationMeta('nombres');
  late final GeneratedColumn<String?> nombres = GeneratedColumn<String?>(
      'nombres', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoPaternoMeta =
      const VerificationMeta('apellidoPaterno');
  late final GeneratedColumn<String?> apellidoPaterno =
      GeneratedColumn<String?>('apellido_paterno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoMaternoMeta =
      const VerificationMeta('apellidoMaterno');
  late final GeneratedColumn<String?> apellidoMaterno =
      GeneratedColumn<String?>('apellido_materno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fotoMeta = const VerificationMeta('foto');
  late final GeneratedColumn<String?> foto = GeneratedColumn<String?>(
      'foto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _calendarioPeriodoIdMeta =
      const VerificationMeta('calendarioPeriodoId');
  late final GeneratedColumn<int?> calendarioPeriodoId = GeneratedColumn<int?>(
      'calendario_periodo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _formulaSincMeta =
      const VerificationMeta('formulaSinc');
  late final GeneratedColumn<bool?> formulaSinc = GeneratedColumn<bool?>(
      'formula_sinc', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (formula_sinc IN (0, 1))');
  final VerificationMeta _msjeMeta = const VerificationMeta('msje');
  late final GeneratedColumn<int?> msje = GeneratedColumn<int?>(
      'msje', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _publicadoMeta = const VerificationMeta('publicado');
  late final GeneratedColumn<int?> publicado = GeneratedColumn<int?>(
      'publicado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _vistoMeta = const VerificationMeta('visto');
  late final GeneratedColumn<int?> visto = GeneratedColumn<int?>(
      'visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        evaluacionProcesoId,
        evaluacionResultadoId,
        nota,
        escala,
        rubroEvalProcesoId,
        sesionAprendizajeId,
        valorTipoNotaId,
        equipoId,
        alumnoId,
        nombres,
        apellidoPaterno,
        apellidoMaterno,
        foto,
        calendarioPeriodoId,
        formulaSinc,
        msje,
        publicado,
        visto
      ];
  @override
  String get aliasedName => _alias ?? 'evaluacion_proceso';
  @override
  String get actualTableName => 'evaluacion_proceso';
  @override
  VerificationContext validateIntegrity(
      Insertable<EvaluacionProcesoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('evaluacion_proceso_id')) {
      context.handle(
          _evaluacionProcesoIdMeta,
          evaluacionProcesoId.isAcceptableOrUnknown(
              data['evaluacion_proceso_id']!, _evaluacionProcesoIdMeta));
    } else if (isInserting) {
      context.missing(_evaluacionProcesoIdMeta);
    }
    if (data.containsKey('evaluacion_resultado_id')) {
      context.handle(
          _evaluacionResultadoIdMeta,
          evaluacionResultadoId.isAcceptableOrUnknown(
              data['evaluacion_resultado_id']!, _evaluacionResultadoIdMeta));
    }
    if (data.containsKey('nota')) {
      context.handle(
          _notaMeta, nota.isAcceptableOrUnknown(data['nota']!, _notaMeta));
    }
    if (data.containsKey('escala')) {
      context.handle(_escalaMeta,
          escala.isAcceptableOrUnknown(data['escala']!, _escalaMeta));
    }
    if (data.containsKey('rubro_eval_proceso_id')) {
      context.handle(
          _rubroEvalProcesoIdMeta,
          rubroEvalProcesoId.isAcceptableOrUnknown(
              data['rubro_eval_proceso_id']!, _rubroEvalProcesoIdMeta));
    }
    if (data.containsKey('sesion_aprendizaje_id')) {
      context.handle(
          _sesionAprendizajeIdMeta,
          sesionAprendizajeId.isAcceptableOrUnknown(
              data['sesion_aprendizaje_id']!, _sesionAprendizajeIdMeta));
    }
    if (data.containsKey('valor_tipo_nota_id')) {
      context.handle(
          _valorTipoNotaIdMeta,
          valorTipoNotaId.isAcceptableOrUnknown(
              data['valor_tipo_nota_id']!, _valorTipoNotaIdMeta));
    }
    if (data.containsKey('equipo_id')) {
      context.handle(_equipoIdMeta,
          equipoId.isAcceptableOrUnknown(data['equipo_id']!, _equipoIdMeta));
    }
    if (data.containsKey('alumno_id')) {
      context.handle(_alumnoIdMeta,
          alumnoId.isAcceptableOrUnknown(data['alumno_id']!, _alumnoIdMeta));
    }
    if (data.containsKey('nombres')) {
      context.handle(_nombresMeta,
          nombres.isAcceptableOrUnknown(data['nombres']!, _nombresMeta));
    }
    if (data.containsKey('apellido_paterno')) {
      context.handle(
          _apellidoPaternoMeta,
          apellidoPaterno.isAcceptableOrUnknown(
              data['apellido_paterno']!, _apellidoPaternoMeta));
    }
    if (data.containsKey('apellido_materno')) {
      context.handle(
          _apellidoMaternoMeta,
          apellidoMaterno.isAcceptableOrUnknown(
              data['apellido_materno']!, _apellidoMaternoMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('calendario_periodo_id')) {
      context.handle(
          _calendarioPeriodoIdMeta,
          calendarioPeriodoId.isAcceptableOrUnknown(
              data['calendario_periodo_id']!, _calendarioPeriodoIdMeta));
    }
    if (data.containsKey('formula_sinc')) {
      context.handle(
          _formulaSincMeta,
          formulaSinc.isAcceptableOrUnknown(
              data['formula_sinc']!, _formulaSincMeta));
    }
    if (data.containsKey('msje')) {
      context.handle(
          _msjeMeta, msje.isAcceptableOrUnknown(data['msje']!, _msjeMeta));
    }
    if (data.containsKey('publicado')) {
      context.handle(_publicadoMeta,
          publicado.isAcceptableOrUnknown(data['publicado']!, _publicadoMeta));
    }
    if (data.containsKey('visto')) {
      context.handle(
          _vistoMeta, visto.isAcceptableOrUnknown(data['visto']!, _vistoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {evaluacionProcesoId};
  @override
  EvaluacionProcesoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EvaluacionProcesoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EvaluacionProcesoTable createAlias(String alias) {
    return $EvaluacionProcesoTable(_db, alias);
  }
}

class RubroCampotematicoData extends DataClass
    implements Insertable<RubroCampotematicoData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String rubroEvalProcesoId;
  final int campoTematicoId;
  RubroCampotematicoData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.rubroEvalProcesoId,
      required this.campoTematicoId});
  factory RubroCampotematicoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RubroCampotematicoData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      rubroEvalProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_eval_proceso_id'])!,
      campoTematicoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}campo_tematico_id'])!,
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['rubro_eval_proceso_id'] = Variable<String>(rubroEvalProcesoId);
    map['campo_tematico_id'] = Variable<int>(campoTematicoId);
    return map;
  }

  RubroCampotematicoCompanion toCompanion(bool nullToAbsent) {
    return RubroCampotematicoCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      rubroEvalProcesoId: Value(rubroEvalProcesoId),
      campoTematicoId: Value(campoTematicoId),
    );
  }

  factory RubroCampotematicoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RubroCampotematicoData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      rubroEvalProcesoId:
          serializer.fromJson<String>(json['rubroEvalProcesoId']),
      campoTematicoId: serializer.fromJson<int>(json['campoTematicoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'rubroEvalProcesoId': serializer.toJson<String>(rubroEvalProcesoId),
      'campoTematicoId': serializer.toJson<int>(campoTematicoId),
    };
  }

  RubroCampotematicoData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? rubroEvalProcesoId,
          int? campoTematicoId}) =>
      RubroCampotematicoData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
        campoTematicoId: campoTematicoId ?? this.campoTematicoId,
      );
  @override
  String toString() {
    return (StringBuffer('RubroCampotematicoData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('campoTematicoId: $campoTematicoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(rubroEvalProcesoId.hashCode,
                              campoTematicoId.hashCode))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RubroCampotematicoData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.rubroEvalProcesoId == this.rubroEvalProcesoId &&
          other.campoTematicoId == this.campoTematicoId);
}

class RubroCampotematicoCompanion
    extends UpdateCompanion<RubroCampotematicoData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> rubroEvalProcesoId;
  final Value<int> campoTematicoId;
  const RubroCampotematicoCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.rubroEvalProcesoId = const Value.absent(),
    this.campoTematicoId = const Value.absent(),
  });
  RubroCampotematicoCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String rubroEvalProcesoId,
    required int campoTematicoId,
  })  : rubroEvalProcesoId = Value(rubroEvalProcesoId),
        campoTematicoId = Value(campoTematicoId);
  static Insertable<RubroCampotematicoData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? rubroEvalProcesoId,
    Expression<int>? campoTematicoId,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (rubroEvalProcesoId != null)
        'rubro_eval_proceso_id': rubroEvalProcesoId,
      if (campoTematicoId != null) 'campo_tematico_id': campoTematicoId,
    });
  }

  RubroCampotematicoCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? rubroEvalProcesoId,
      Value<int>? campoTematicoId}) {
    return RubroCampotematicoCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
      campoTematicoId: campoTematicoId ?? this.campoTematicoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (rubroEvalProcesoId.present) {
      map['rubro_eval_proceso_id'] = Variable<String>(rubroEvalProcesoId.value);
    }
    if (campoTematicoId.present) {
      map['campo_tematico_id'] = Variable<int>(campoTematicoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RubroCampotematicoCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('campoTematicoId: $campoTematicoId')
          ..write(')'))
        .toString();
  }
}

class $RubroCampotematicoTable extends RubroCampotematico
    with TableInfo<$RubroCampotematicoTable, RubroCampotematicoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RubroCampotematicoTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rubroEvalProcesoIdMeta =
      const VerificationMeta('rubroEvalProcesoId');
  late final GeneratedColumn<String?> rubroEvalProcesoId =
      GeneratedColumn<String?>('rubro_eval_proceso_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _campoTematicoIdMeta =
      const VerificationMeta('campoTematicoId');
  late final GeneratedColumn<int?> campoTematicoId = GeneratedColumn<int?>(
      'campo_tematico_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        rubroEvalProcesoId,
        campoTematicoId
      ];
  @override
  String get aliasedName => _alias ?? 'rubro_campotematico';
  @override
  String get actualTableName => 'rubro_campotematico';
  @override
  VerificationContext validateIntegrity(
      Insertable<RubroCampotematicoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('rubro_eval_proceso_id')) {
      context.handle(
          _rubroEvalProcesoIdMeta,
          rubroEvalProcesoId.isAcceptableOrUnknown(
              data['rubro_eval_proceso_id']!, _rubroEvalProcesoIdMeta));
    } else if (isInserting) {
      context.missing(_rubroEvalProcesoIdMeta);
    }
    if (data.containsKey('campo_tematico_id')) {
      context.handle(
          _campoTematicoIdMeta,
          campoTematicoId.isAcceptableOrUnknown(
              data['campo_tematico_id']!, _campoTematicoIdMeta));
    } else if (isInserting) {
      context.missing(_campoTematicoIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {rubroEvalProcesoId, campoTematicoId};
  @override
  RubroCampotematicoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return RubroCampotematicoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RubroCampotematicoTable createAlias(String alias) {
    return $RubroCampotematicoTable(_db, alias);
  }
}

class RubroComentarioData extends DataClass
    implements Insertable<RubroComentarioData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String evaluacionProcesoComentarioId;
  final String? evaluacionProcesoId;
  final String? comentarioId;
  final String? descripcion;
  final int? delete;
  RubroComentarioData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.evaluacionProcesoComentarioId,
      this.evaluacionProcesoId,
      this.comentarioId,
      this.descripcion,
      this.delete});
  factory RubroComentarioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RubroComentarioData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      evaluacionProcesoComentarioId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}evaluacion_proceso_comentario_id'])!,
      evaluacionProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}evaluacion_proceso_id']),
      comentarioId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}comentario_id']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      delete: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delete']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['evaluacion_proceso_comentario_id'] =
        Variable<String>(evaluacionProcesoComentarioId);
    if (!nullToAbsent || evaluacionProcesoId != null) {
      map['evaluacion_proceso_id'] = Variable<String?>(evaluacionProcesoId);
    }
    if (!nullToAbsent || comentarioId != null) {
      map['comentario_id'] = Variable<String?>(comentarioId);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || delete != null) {
      map['delete'] = Variable<int?>(delete);
    }
    return map;
  }

  RubroComentarioCompanion toCompanion(bool nullToAbsent) {
    return RubroComentarioCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      evaluacionProcesoComentarioId: Value(evaluacionProcesoComentarioId),
      evaluacionProcesoId: evaluacionProcesoId == null && nullToAbsent
          ? const Value.absent()
          : Value(evaluacionProcesoId),
      comentarioId: comentarioId == null && nullToAbsent
          ? const Value.absent()
          : Value(comentarioId),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      delete:
          delete == null && nullToAbsent ? const Value.absent() : Value(delete),
    );
  }

  factory RubroComentarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RubroComentarioData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      evaluacionProcesoComentarioId:
          serializer.fromJson<String>(json['evaluacionProcesoComentarioId']),
      evaluacionProcesoId:
          serializer.fromJson<String?>(json['evaluacionProcesoId']),
      comentarioId: serializer.fromJson<String?>(json['comentarioId']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      delete: serializer.fromJson<int?>(json['delete']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'evaluacionProcesoComentarioId':
          serializer.toJson<String>(evaluacionProcesoComentarioId),
      'evaluacionProcesoId': serializer.toJson<String?>(evaluacionProcesoId),
      'comentarioId': serializer.toJson<String?>(comentarioId),
      'descripcion': serializer.toJson<String?>(descripcion),
      'delete': serializer.toJson<int?>(delete),
    };
  }

  RubroComentarioData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? evaluacionProcesoComentarioId,
          String? evaluacionProcesoId,
          String? comentarioId,
          String? descripcion,
          int? delete}) =>
      RubroComentarioData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        evaluacionProcesoComentarioId:
            evaluacionProcesoComentarioId ?? this.evaluacionProcesoComentarioId,
        evaluacionProcesoId: evaluacionProcesoId ?? this.evaluacionProcesoId,
        comentarioId: comentarioId ?? this.comentarioId,
        descripcion: descripcion ?? this.descripcion,
        delete: delete ?? this.delete,
      );
  @override
  String toString() {
    return (StringBuffer('RubroComentarioData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write(
              'evaluacionProcesoComentarioId: $evaluacionProcesoComentarioId, ')
          ..write('evaluacionProcesoId: $evaluacionProcesoId, ')
          ..write('comentarioId: $comentarioId, ')
          ..write('descripcion: $descripcion, ')
          ..write('delete: $delete')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(
                              evaluacionProcesoComentarioId.hashCode,
                              $mrjc(
                                  evaluacionProcesoId.hashCode,
                                  $mrjc(
                                      comentarioId.hashCode,
                                      $mrjc(descripcion.hashCode,
                                          delete.hashCode)))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RubroComentarioData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.evaluacionProcesoComentarioId ==
              this.evaluacionProcesoComentarioId &&
          other.evaluacionProcesoId == this.evaluacionProcesoId &&
          other.comentarioId == this.comentarioId &&
          other.descripcion == this.descripcion &&
          other.delete == this.delete);
}

class RubroComentarioCompanion extends UpdateCompanion<RubroComentarioData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> evaluacionProcesoComentarioId;
  final Value<String?> evaluacionProcesoId;
  final Value<String?> comentarioId;
  final Value<String?> descripcion;
  final Value<int?> delete;
  const RubroComentarioCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.evaluacionProcesoComentarioId = const Value.absent(),
    this.evaluacionProcesoId = const Value.absent(),
    this.comentarioId = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.delete = const Value.absent(),
  });
  RubroComentarioCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String evaluacionProcesoComentarioId,
    this.evaluacionProcesoId = const Value.absent(),
    this.comentarioId = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.delete = const Value.absent(),
  }) : evaluacionProcesoComentarioId = Value(evaluacionProcesoComentarioId);
  static Insertable<RubroComentarioData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? evaluacionProcesoComentarioId,
    Expression<String?>? evaluacionProcesoId,
    Expression<String?>? comentarioId,
    Expression<String?>? descripcion,
    Expression<int?>? delete,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (evaluacionProcesoComentarioId != null)
        'evaluacion_proceso_comentario_id': evaluacionProcesoComentarioId,
      if (evaluacionProcesoId != null)
        'evaluacion_proceso_id': evaluacionProcesoId,
      if (comentarioId != null) 'comentario_id': comentarioId,
      if (descripcion != null) 'descripcion': descripcion,
      if (delete != null) 'delete': delete,
    });
  }

  RubroComentarioCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? evaluacionProcesoComentarioId,
      Value<String?>? evaluacionProcesoId,
      Value<String?>? comentarioId,
      Value<String?>? descripcion,
      Value<int?>? delete}) {
    return RubroComentarioCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      evaluacionProcesoComentarioId:
          evaluacionProcesoComentarioId ?? this.evaluacionProcesoComentarioId,
      evaluacionProcesoId: evaluacionProcesoId ?? this.evaluacionProcesoId,
      comentarioId: comentarioId ?? this.comentarioId,
      descripcion: descripcion ?? this.descripcion,
      delete: delete ?? this.delete,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (evaluacionProcesoComentarioId.present) {
      map['evaluacion_proceso_comentario_id'] =
          Variable<String>(evaluacionProcesoComentarioId.value);
    }
    if (evaluacionProcesoId.present) {
      map['evaluacion_proceso_id'] =
          Variable<String?>(evaluacionProcesoId.value);
    }
    if (comentarioId.present) {
      map['comentario_id'] = Variable<String?>(comentarioId.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (delete.present) {
      map['delete'] = Variable<int?>(delete.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RubroComentarioCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write(
              'evaluacionProcesoComentarioId: $evaluacionProcesoComentarioId, ')
          ..write('evaluacionProcesoId: $evaluacionProcesoId, ')
          ..write('comentarioId: $comentarioId, ')
          ..write('descripcion: $descripcion, ')
          ..write('delete: $delete')
          ..write(')'))
        .toString();
  }
}

class $RubroComentarioTable extends RubroComentario
    with TableInfo<$RubroComentarioTable, RubroComentarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RubroComentarioTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _evaluacionProcesoComentarioIdMeta =
      const VerificationMeta('evaluacionProcesoComentarioId');
  late final GeneratedColumn<String?> evaluacionProcesoComentarioId =
      GeneratedColumn<String?>(
          'evaluacion_proceso_comentario_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _evaluacionProcesoIdMeta =
      const VerificationMeta('evaluacionProcesoId');
  late final GeneratedColumn<String?> evaluacionProcesoId =
      GeneratedColumn<String?>('evaluacion_proceso_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _comentarioIdMeta =
      const VerificationMeta('comentarioId');
  late final GeneratedColumn<String?> comentarioId = GeneratedColumn<String?>(
      'comentario_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _deleteMeta = const VerificationMeta('delete');
  late final GeneratedColumn<int?> delete = GeneratedColumn<int?>(
      'delete', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        evaluacionProcesoComentarioId,
        evaluacionProcesoId,
        comentarioId,
        descripcion,
        delete
      ];
  @override
  String get aliasedName => _alias ?? 'rubro_comentario';
  @override
  String get actualTableName => 'rubro_comentario';
  @override
  VerificationContext validateIntegrity(
      Insertable<RubroComentarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('evaluacion_proceso_comentario_id')) {
      context.handle(
          _evaluacionProcesoComentarioIdMeta,
          evaluacionProcesoComentarioId.isAcceptableOrUnknown(
              data['evaluacion_proceso_comentario_id']!,
              _evaluacionProcesoComentarioIdMeta));
    } else if (isInserting) {
      context.missing(_evaluacionProcesoComentarioIdMeta);
    }
    if (data.containsKey('evaluacion_proceso_id')) {
      context.handle(
          _evaluacionProcesoIdMeta,
          evaluacionProcesoId.isAcceptableOrUnknown(
              data['evaluacion_proceso_id']!, _evaluacionProcesoIdMeta));
    }
    if (data.containsKey('comentario_id')) {
      context.handle(
          _comentarioIdMeta,
          comentarioId.isAcceptableOrUnknown(
              data['comentario_id']!, _comentarioIdMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('delete')) {
      context.handle(_deleteMeta,
          delete.isAcceptableOrUnknown(data['delete']!, _deleteMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {evaluacionProcesoComentarioId};
  @override
  RubroComentarioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return RubroComentarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RubroComentarioTable createAlias(String alias) {
    return $RubroComentarioTable(_db, alias);
  }
}

class RubroEvalRNPFormulaData extends DataClass
    implements Insertable<RubroEvalRNPFormulaData> {
  final int? syncFlag;
  final DateTime? timestampFlag;
  final int? usuarioCreacionId;
  final DateTime? fechaCreacion;
  final int? usuarioAccionId;
  final DateTime? fechaAccion;
  final String rubroFormulaId;
  final String? rubroEvaluacionPrimId;
  final String? rubroEvaluacionSecId;
  final double? peso;
  RubroEvalRNPFormulaData(
      {this.syncFlag,
      this.timestampFlag,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      required this.rubroFormulaId,
      this.rubroEvaluacionPrimId,
      this.rubroEvaluacionSecId,
      this.peso});
  factory RubroEvalRNPFormulaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RubroEvalRNPFormulaData(
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      timestampFlag: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}timestamp_flag']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      rubroFormulaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rubro_formula_id'])!,
      rubroEvaluacionPrimId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_evaluacion_prim_id']),
      rubroEvaluacionSecId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_evaluacion_sec_id']),
      peso: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}peso']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || timestampFlag != null) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion);
    }
    map['rubro_formula_id'] = Variable<String>(rubroFormulaId);
    if (!nullToAbsent || rubroEvaluacionPrimId != null) {
      map['rubro_evaluacion_prim_id'] =
          Variable<String?>(rubroEvaluacionPrimId);
    }
    if (!nullToAbsent || rubroEvaluacionSecId != null) {
      map['rubro_evaluacion_sec_id'] = Variable<String?>(rubroEvaluacionSecId);
    }
    if (!nullToAbsent || peso != null) {
      map['peso'] = Variable<double?>(peso);
    }
    return map;
  }

  RubroEvalRNPFormulaCompanion toCompanion(bool nullToAbsent) {
    return RubroEvalRNPFormulaCompanion(
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      timestampFlag: timestampFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(timestampFlag),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      rubroFormulaId: Value(rubroFormulaId),
      rubroEvaluacionPrimId: rubroEvaluacionPrimId == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroEvaluacionPrimId),
      rubroEvaluacionSecId: rubroEvaluacionSecId == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroEvaluacionSecId),
      peso: peso == null && nullToAbsent ? const Value.absent() : Value(peso),
    );
  }

  factory RubroEvalRNPFormulaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RubroEvalRNPFormulaData(
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      timestampFlag: serializer.fromJson<DateTime?>(json['timestampFlag']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<DateTime?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<DateTime?>(json['fechaAccion']),
      rubroFormulaId: serializer.fromJson<String>(json['rubroFormulaId']),
      rubroEvaluacionPrimId:
          serializer.fromJson<String?>(json['rubroEvaluacionPrimId']),
      rubroEvaluacionSecId:
          serializer.fromJson<String?>(json['rubroEvaluacionSecId']),
      peso: serializer.fromJson<double?>(json['peso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'timestampFlag': serializer.toJson<DateTime?>(timestampFlag),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<DateTime?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<DateTime?>(fechaAccion),
      'rubroFormulaId': serializer.toJson<String>(rubroFormulaId),
      'rubroEvaluacionPrimId':
          serializer.toJson<String?>(rubroEvaluacionPrimId),
      'rubroEvaluacionSecId': serializer.toJson<String?>(rubroEvaluacionSecId),
      'peso': serializer.toJson<double?>(peso),
    };
  }

  RubroEvalRNPFormulaData copyWith(
          {int? syncFlag,
          DateTime? timestampFlag,
          int? usuarioCreacionId,
          DateTime? fechaCreacion,
          int? usuarioAccionId,
          DateTime? fechaAccion,
          String? rubroFormulaId,
          String? rubroEvaluacionPrimId,
          String? rubroEvaluacionSecId,
          double? peso}) =>
      RubroEvalRNPFormulaData(
        syncFlag: syncFlag ?? this.syncFlag,
        timestampFlag: timestampFlag ?? this.timestampFlag,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        rubroFormulaId: rubroFormulaId ?? this.rubroFormulaId,
        rubroEvaluacionPrimId:
            rubroEvaluacionPrimId ?? this.rubroEvaluacionPrimId,
        rubroEvaluacionSecId: rubroEvaluacionSecId ?? this.rubroEvaluacionSecId,
        peso: peso ?? this.peso,
      );
  @override
  String toString() {
    return (StringBuffer('RubroEvalRNPFormulaData(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('rubroFormulaId: $rubroFormulaId, ')
          ..write('rubroEvaluacionPrimId: $rubroEvaluacionPrimId, ')
          ..write('rubroEvaluacionSecId: $rubroEvaluacionSecId, ')
          ..write('peso: $peso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      syncFlag.hashCode,
      $mrjc(
          timestampFlag.hashCode,
          $mrjc(
              usuarioCreacionId.hashCode,
              $mrjc(
                  fechaCreacion.hashCode,
                  $mrjc(
                      usuarioAccionId.hashCode,
                      $mrjc(
                          fechaAccion.hashCode,
                          $mrjc(
                              rubroFormulaId.hashCode,
                              $mrjc(
                                  rubroEvaluacionPrimId.hashCode,
                                  $mrjc(rubroEvaluacionSecId.hashCode,
                                      peso.hashCode))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RubroEvalRNPFormulaData &&
          other.syncFlag == this.syncFlag &&
          other.timestampFlag == this.timestampFlag &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.rubroFormulaId == this.rubroFormulaId &&
          other.rubroEvaluacionPrimId == this.rubroEvaluacionPrimId &&
          other.rubroEvaluacionSecId == this.rubroEvaluacionSecId &&
          other.peso == this.peso);
}

class RubroEvalRNPFormulaCompanion
    extends UpdateCompanion<RubroEvalRNPFormulaData> {
  final Value<int?> syncFlag;
  final Value<DateTime?> timestampFlag;
  final Value<int?> usuarioCreacionId;
  final Value<DateTime?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<DateTime?> fechaAccion;
  final Value<String> rubroFormulaId;
  final Value<String?> rubroEvaluacionPrimId;
  final Value<String?> rubroEvaluacionSecId;
  final Value<double?> peso;
  const RubroEvalRNPFormulaCompanion({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.rubroFormulaId = const Value.absent(),
    this.rubroEvaluacionPrimId = const Value.absent(),
    this.rubroEvaluacionSecId = const Value.absent(),
    this.peso = const Value.absent(),
  });
  RubroEvalRNPFormulaCompanion.insert({
    this.syncFlag = const Value.absent(),
    this.timestampFlag = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    required String rubroFormulaId,
    this.rubroEvaluacionPrimId = const Value.absent(),
    this.rubroEvaluacionSecId = const Value.absent(),
    this.peso = const Value.absent(),
  }) : rubroFormulaId = Value(rubroFormulaId);
  static Insertable<RubroEvalRNPFormulaData> custom({
    Expression<int?>? syncFlag,
    Expression<DateTime?>? timestampFlag,
    Expression<int?>? usuarioCreacionId,
    Expression<DateTime?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<DateTime?>? fechaAccion,
    Expression<String>? rubroFormulaId,
    Expression<String?>? rubroEvaluacionPrimId,
    Expression<String?>? rubroEvaluacionSecId,
    Expression<double?>? peso,
  }) {
    return RawValuesInsertable({
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (timestampFlag != null) 'timestamp_flag': timestampFlag,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (rubroFormulaId != null) 'rubro_formula_id': rubroFormulaId,
      if (rubroEvaluacionPrimId != null)
        'rubro_evaluacion_prim_id': rubroEvaluacionPrimId,
      if (rubroEvaluacionSecId != null)
        'rubro_evaluacion_sec_id': rubroEvaluacionSecId,
      if (peso != null) 'peso': peso,
    });
  }

  RubroEvalRNPFormulaCompanion copyWith(
      {Value<int?>? syncFlag,
      Value<DateTime?>? timestampFlag,
      Value<int?>? usuarioCreacionId,
      Value<DateTime?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<DateTime?>? fechaAccion,
      Value<String>? rubroFormulaId,
      Value<String?>? rubroEvaluacionPrimId,
      Value<String?>? rubroEvaluacionSecId,
      Value<double?>? peso}) {
    return RubroEvalRNPFormulaCompanion(
      syncFlag: syncFlag ?? this.syncFlag,
      timestampFlag: timestampFlag ?? this.timestampFlag,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      rubroFormulaId: rubroFormulaId ?? this.rubroFormulaId,
      rubroEvaluacionPrimId:
          rubroEvaluacionPrimId ?? this.rubroEvaluacionPrimId,
      rubroEvaluacionSecId: rubroEvaluacionSecId ?? this.rubroEvaluacionSecId,
      peso: peso ?? this.peso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (timestampFlag.present) {
      map['timestamp_flag'] = Variable<DateTime?>(timestampFlag.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<DateTime?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<DateTime?>(fechaAccion.value);
    }
    if (rubroFormulaId.present) {
      map['rubro_formula_id'] = Variable<String>(rubroFormulaId.value);
    }
    if (rubroEvaluacionPrimId.present) {
      map['rubro_evaluacion_prim_id'] =
          Variable<String?>(rubroEvaluacionPrimId.value);
    }
    if (rubroEvaluacionSecId.present) {
      map['rubro_evaluacion_sec_id'] =
          Variable<String?>(rubroEvaluacionSecId.value);
    }
    if (peso.present) {
      map['peso'] = Variable<double?>(peso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RubroEvalRNPFormulaCompanion(')
          ..write('syncFlag: $syncFlag, ')
          ..write('timestampFlag: $timestampFlag, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('rubroFormulaId: $rubroFormulaId, ')
          ..write('rubroEvaluacionPrimId: $rubroEvaluacionPrimId, ')
          ..write('rubroEvaluacionSecId: $rubroEvaluacionSecId, ')
          ..write('peso: $peso')
          ..write(')'))
        .toString();
  }
}

class $RubroEvalRNPFormulaTable extends RubroEvalRNPFormula
    with TableInfo<$RubroEvalRNPFormulaTable, RubroEvalRNPFormulaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RubroEvalRNPFormulaTable(this._db, [this._alias]);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _timestampFlagMeta =
      const VerificationMeta('timestampFlag');
  late final GeneratedColumn<DateTime?> timestampFlag =
      GeneratedColumn<DateTime?>('timestamp_flag', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<DateTime?> fechaCreacion =
      GeneratedColumn<DateTime?>('fecha_creacion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<DateTime?> fechaAccion =
      GeneratedColumn<DateTime?>('fecha_accion', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rubroFormulaIdMeta =
      const VerificationMeta('rubroFormulaId');
  late final GeneratedColumn<String?> rubroFormulaId = GeneratedColumn<String?>(
      'rubro_formula_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _rubroEvaluacionPrimIdMeta =
      const VerificationMeta('rubroEvaluacionPrimId');
  late final GeneratedColumn<String?> rubroEvaluacionPrimId =
      GeneratedColumn<String?>('rubro_evaluacion_prim_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _rubroEvaluacionSecIdMeta =
      const VerificationMeta('rubroEvaluacionSecId');
  late final GeneratedColumn<String?> rubroEvaluacionSecId =
      GeneratedColumn<String?>('rubro_evaluacion_sec_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _pesoMeta = const VerificationMeta('peso');
  late final GeneratedColumn<double?> peso = GeneratedColumn<double?>(
      'peso', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        syncFlag,
        timestampFlag,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        rubroFormulaId,
        rubroEvaluacionPrimId,
        rubroEvaluacionSecId,
        peso
      ];
  @override
  String get aliasedName => _alias ?? 'rubro_eval_r_n_p_formula';
  @override
  String get actualTableName => 'rubro_eval_r_n_p_formula';
  @override
  VerificationContext validateIntegrity(
      Insertable<RubroEvalRNPFormulaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('timestamp_flag')) {
      context.handle(
          _timestampFlagMeta,
          timestampFlag.isAcceptableOrUnknown(
              data['timestamp_flag']!, _timestampFlagMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('rubro_formula_id')) {
      context.handle(
          _rubroFormulaIdMeta,
          rubroFormulaId.isAcceptableOrUnknown(
              data['rubro_formula_id']!, _rubroFormulaIdMeta));
    } else if (isInserting) {
      context.missing(_rubroFormulaIdMeta);
    }
    if (data.containsKey('rubro_evaluacion_prim_id')) {
      context.handle(
          _rubroEvaluacionPrimIdMeta,
          rubroEvaluacionPrimId.isAcceptableOrUnknown(
              data['rubro_evaluacion_prim_id']!, _rubroEvaluacionPrimIdMeta));
    }
    if (data.containsKey('rubro_evaluacion_sec_id')) {
      context.handle(
          _rubroEvaluacionSecIdMeta,
          rubroEvaluacionSecId.isAcceptableOrUnknown(
              data['rubro_evaluacion_sec_id']!, _rubroEvaluacionSecIdMeta));
    }
    if (data.containsKey('peso')) {
      context.handle(
          _pesoMeta, peso.isAcceptableOrUnknown(data['peso']!, _pesoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {rubroFormulaId};
  @override
  RubroEvalRNPFormulaData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return RubroEvalRNPFormulaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RubroEvalRNPFormulaTable createAlias(String alias) {
    return $RubroEvalRNPFormulaTable(_db, alias);
  }
}

class ContactoDocenteData extends DataClass
    implements Insertable<ContactoDocenteData> {
  final int personaId;
  final String? nombres;
  final String? apellidoPaterno;
  final String? apellidoMaterno;
  final String? ocupacion;
  final int? estadoId;
  final String? telefono;
  final String? celular;
  final String? fechaNac;
  final String? correo;
  final String? genero;
  final String? estadoCivil;
  final String? numDoc;
  final String? foto;
  final String? nombreTipo;
  final int tipo;
  final int? hijoRelacionId;
  final String? relacion;
  final int cargaCursoId;
  final int? cursoId;
  final String? cursoNombre;
  final int? periodoId;
  final String? periodoNombre;
  final int? grupoId;
  final String? grupoNombre;
  final int? aulaId;
  final String? aulaNombre;
  final int? contratoEstadoId;
  final bool? contratoVigente;
  final int? relacionId;
  ContactoDocenteData(
      {required this.personaId,
      this.nombres,
      this.apellidoPaterno,
      this.apellidoMaterno,
      this.ocupacion,
      this.estadoId,
      this.telefono,
      this.celular,
      this.fechaNac,
      this.correo,
      this.genero,
      this.estadoCivil,
      this.numDoc,
      this.foto,
      this.nombreTipo,
      required this.tipo,
      this.hijoRelacionId,
      this.relacion,
      required this.cargaCursoId,
      this.cursoId,
      this.cursoNombre,
      this.periodoId,
      this.periodoNombre,
      this.grupoId,
      this.grupoNombre,
      this.aulaId,
      this.aulaNombre,
      this.contratoEstadoId,
      this.contratoVigente,
      this.relacionId});
  factory ContactoDocenteData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ContactoDocenteData(
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id'])!,
      nombres: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombres']),
      apellidoPaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_paterno']),
      apellidoMaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_materno']),
      ocupacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ocupacion']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      telefono: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}telefono']),
      celular: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}celular']),
      fechaNac: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_nac']),
      correo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}correo']),
      genero: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}genero']),
      estadoCivil: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_civil']),
      numDoc: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}num_doc']),
      foto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto']),
      nombreTipo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre_tipo']),
      tipo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo'])!,
      hijoRelacionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hijo_relacion_id']),
      relacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relacion']),
      cargaCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}carga_curso_id'])!,
      cursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curso_id']),
      cursoNombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curso_nombre']),
      periodoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}periodo_id']),
      periodoNombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}periodo_nombre']),
      grupoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}grupo_id']),
      grupoNombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}grupo_nombre']),
      aulaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aula_id']),
      aulaNombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aula_nombre']),
      contratoEstadoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}contrato_estado_id']),
      contratoVigente: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}contrato_vigente']),
      relacionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relacion_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['persona_id'] = Variable<int>(personaId);
    if (!nullToAbsent || nombres != null) {
      map['nombres'] = Variable<String?>(nombres);
    }
    if (!nullToAbsent || apellidoPaterno != null) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno);
    }
    if (!nullToAbsent || apellidoMaterno != null) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno);
    }
    if (!nullToAbsent || ocupacion != null) {
      map['ocupacion'] = Variable<String?>(ocupacion);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || telefono != null) {
      map['telefono'] = Variable<String?>(telefono);
    }
    if (!nullToAbsent || celular != null) {
      map['celular'] = Variable<String?>(celular);
    }
    if (!nullToAbsent || fechaNac != null) {
      map['fecha_nac'] = Variable<String?>(fechaNac);
    }
    if (!nullToAbsent || correo != null) {
      map['correo'] = Variable<String?>(correo);
    }
    if (!nullToAbsent || genero != null) {
      map['genero'] = Variable<String?>(genero);
    }
    if (!nullToAbsent || estadoCivil != null) {
      map['estado_civil'] = Variable<String?>(estadoCivil);
    }
    if (!nullToAbsent || numDoc != null) {
      map['num_doc'] = Variable<String?>(numDoc);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<String?>(foto);
    }
    if (!nullToAbsent || nombreTipo != null) {
      map['nombre_tipo'] = Variable<String?>(nombreTipo);
    }
    map['tipo'] = Variable<int>(tipo);
    if (!nullToAbsent || hijoRelacionId != null) {
      map['hijo_relacion_id'] = Variable<int?>(hijoRelacionId);
    }
    if (!nullToAbsent || relacion != null) {
      map['relacion'] = Variable<String?>(relacion);
    }
    map['carga_curso_id'] = Variable<int>(cargaCursoId);
    if (!nullToAbsent || cursoId != null) {
      map['curso_id'] = Variable<int?>(cursoId);
    }
    if (!nullToAbsent || cursoNombre != null) {
      map['curso_nombre'] = Variable<String?>(cursoNombre);
    }
    if (!nullToAbsent || periodoId != null) {
      map['periodo_id'] = Variable<int?>(periodoId);
    }
    if (!nullToAbsent || periodoNombre != null) {
      map['periodo_nombre'] = Variable<String?>(periodoNombre);
    }
    if (!nullToAbsent || grupoId != null) {
      map['grupo_id'] = Variable<int?>(grupoId);
    }
    if (!nullToAbsent || grupoNombre != null) {
      map['grupo_nombre'] = Variable<String?>(grupoNombre);
    }
    if (!nullToAbsent || aulaId != null) {
      map['aula_id'] = Variable<int?>(aulaId);
    }
    if (!nullToAbsent || aulaNombre != null) {
      map['aula_nombre'] = Variable<String?>(aulaNombre);
    }
    if (!nullToAbsent || contratoEstadoId != null) {
      map['contrato_estado_id'] = Variable<int?>(contratoEstadoId);
    }
    if (!nullToAbsent || contratoVigente != null) {
      map['contrato_vigente'] = Variable<bool?>(contratoVigente);
    }
    if (!nullToAbsent || relacionId != null) {
      map['relacion_id'] = Variable<int?>(relacionId);
    }
    return map;
  }

  ContactoDocenteCompanion toCompanion(bool nullToAbsent) {
    return ContactoDocenteCompanion(
      personaId: Value(personaId),
      nombres: nombres == null && nullToAbsent
          ? const Value.absent()
          : Value(nombres),
      apellidoPaterno: apellidoPaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoPaterno),
      apellidoMaterno: apellidoMaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoMaterno),
      ocupacion: ocupacion == null && nullToAbsent
          ? const Value.absent()
          : Value(ocupacion),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      telefono: telefono == null && nullToAbsent
          ? const Value.absent()
          : Value(telefono),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      fechaNac: fechaNac == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaNac),
      correo:
          correo == null && nullToAbsent ? const Value.absent() : Value(correo),
      genero:
          genero == null && nullToAbsent ? const Value.absent() : Value(genero),
      estadoCivil: estadoCivil == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoCivil),
      numDoc:
          numDoc == null && nullToAbsent ? const Value.absent() : Value(numDoc),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      nombreTipo: nombreTipo == null && nullToAbsent
          ? const Value.absent()
          : Value(nombreTipo),
      tipo: Value(tipo),
      hijoRelacionId: hijoRelacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(hijoRelacionId),
      relacion: relacion == null && nullToAbsent
          ? const Value.absent()
          : Value(relacion),
      cargaCursoId: Value(cargaCursoId),
      cursoId: cursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(cursoId),
      cursoNombre: cursoNombre == null && nullToAbsent
          ? const Value.absent()
          : Value(cursoNombre),
      periodoId: periodoId == null && nullToAbsent
          ? const Value.absent()
          : Value(periodoId),
      periodoNombre: periodoNombre == null && nullToAbsent
          ? const Value.absent()
          : Value(periodoNombre),
      grupoId: grupoId == null && nullToAbsent
          ? const Value.absent()
          : Value(grupoId),
      grupoNombre: grupoNombre == null && nullToAbsent
          ? const Value.absent()
          : Value(grupoNombre),
      aulaId:
          aulaId == null && nullToAbsent ? const Value.absent() : Value(aulaId),
      aulaNombre: aulaNombre == null && nullToAbsent
          ? const Value.absent()
          : Value(aulaNombre),
      contratoEstadoId: contratoEstadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(contratoEstadoId),
      contratoVigente: contratoVigente == null && nullToAbsent
          ? const Value.absent()
          : Value(contratoVigente),
      relacionId: relacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(relacionId),
    );
  }

  factory ContactoDocenteData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ContactoDocenteData(
      personaId: serializer.fromJson<int>(json['personaId']),
      nombres: serializer.fromJson<String?>(json['nombres']),
      apellidoPaterno: serializer.fromJson<String?>(json['apellidoPaterno']),
      apellidoMaterno: serializer.fromJson<String?>(json['apellidoMaterno']),
      ocupacion: serializer.fromJson<String?>(json['ocupacion']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      telefono: serializer.fromJson<String?>(json['telefono']),
      celular: serializer.fromJson<String?>(json['celular']),
      fechaNac: serializer.fromJson<String?>(json['fechaNac']),
      correo: serializer.fromJson<String?>(json['correo']),
      genero: serializer.fromJson<String?>(json['genero']),
      estadoCivil: serializer.fromJson<String?>(json['estadoCivil']),
      numDoc: serializer.fromJson<String?>(json['numDoc']),
      foto: serializer.fromJson<String?>(json['foto']),
      nombreTipo: serializer.fromJson<String?>(json['nombreTipo']),
      tipo: serializer.fromJson<int>(json['tipo']),
      hijoRelacionId: serializer.fromJson<int?>(json['hijoRelacionId']),
      relacion: serializer.fromJson<String?>(json['relacion']),
      cargaCursoId: serializer.fromJson<int>(json['cargaCursoId']),
      cursoId: serializer.fromJson<int?>(json['cursoId']),
      cursoNombre: serializer.fromJson<String?>(json['cursoNombre']),
      periodoId: serializer.fromJson<int?>(json['periodoId']),
      periodoNombre: serializer.fromJson<String?>(json['periodoNombre']),
      grupoId: serializer.fromJson<int?>(json['grupoId']),
      grupoNombre: serializer.fromJson<String?>(json['grupoNombre']),
      aulaId: serializer.fromJson<int?>(json['aulaId']),
      aulaNombre: serializer.fromJson<String?>(json['aulaNombre']),
      contratoEstadoId: serializer.fromJson<int?>(json['contratoEstadoId']),
      contratoVigente: serializer.fromJson<bool?>(json['contratoVigente']),
      relacionId: serializer.fromJson<int?>(json['relacionId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'personaId': serializer.toJson<int>(personaId),
      'nombres': serializer.toJson<String?>(nombres),
      'apellidoPaterno': serializer.toJson<String?>(apellidoPaterno),
      'apellidoMaterno': serializer.toJson<String?>(apellidoMaterno),
      'ocupacion': serializer.toJson<String?>(ocupacion),
      'estadoId': serializer.toJson<int?>(estadoId),
      'telefono': serializer.toJson<String?>(telefono),
      'celular': serializer.toJson<String?>(celular),
      'fechaNac': serializer.toJson<String?>(fechaNac),
      'correo': serializer.toJson<String?>(correo),
      'genero': serializer.toJson<String?>(genero),
      'estadoCivil': serializer.toJson<String?>(estadoCivil),
      'numDoc': serializer.toJson<String?>(numDoc),
      'foto': serializer.toJson<String?>(foto),
      'nombreTipo': serializer.toJson<String?>(nombreTipo),
      'tipo': serializer.toJson<int>(tipo),
      'hijoRelacionId': serializer.toJson<int?>(hijoRelacionId),
      'relacion': serializer.toJson<String?>(relacion),
      'cargaCursoId': serializer.toJson<int>(cargaCursoId),
      'cursoId': serializer.toJson<int?>(cursoId),
      'cursoNombre': serializer.toJson<String?>(cursoNombre),
      'periodoId': serializer.toJson<int?>(periodoId),
      'periodoNombre': serializer.toJson<String?>(periodoNombre),
      'grupoId': serializer.toJson<int?>(grupoId),
      'grupoNombre': serializer.toJson<String?>(grupoNombre),
      'aulaId': serializer.toJson<int?>(aulaId),
      'aulaNombre': serializer.toJson<String?>(aulaNombre),
      'contratoEstadoId': serializer.toJson<int?>(contratoEstadoId),
      'contratoVigente': serializer.toJson<bool?>(contratoVigente),
      'relacionId': serializer.toJson<int?>(relacionId),
    };
  }

  ContactoDocenteData copyWith(
          {int? personaId,
          String? nombres,
          String? apellidoPaterno,
          String? apellidoMaterno,
          String? ocupacion,
          int? estadoId,
          String? telefono,
          String? celular,
          String? fechaNac,
          String? correo,
          String? genero,
          String? estadoCivil,
          String? numDoc,
          String? foto,
          String? nombreTipo,
          int? tipo,
          int? hijoRelacionId,
          String? relacion,
          int? cargaCursoId,
          int? cursoId,
          String? cursoNombre,
          int? periodoId,
          String? periodoNombre,
          int? grupoId,
          String? grupoNombre,
          int? aulaId,
          String? aulaNombre,
          int? contratoEstadoId,
          bool? contratoVigente,
          int? relacionId}) =>
      ContactoDocenteData(
        personaId: personaId ?? this.personaId,
        nombres: nombres ?? this.nombres,
        apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
        apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
        ocupacion: ocupacion ?? this.ocupacion,
        estadoId: estadoId ?? this.estadoId,
        telefono: telefono ?? this.telefono,
        celular: celular ?? this.celular,
        fechaNac: fechaNac ?? this.fechaNac,
        correo: correo ?? this.correo,
        genero: genero ?? this.genero,
        estadoCivil: estadoCivil ?? this.estadoCivil,
        numDoc: numDoc ?? this.numDoc,
        foto: foto ?? this.foto,
        nombreTipo: nombreTipo ?? this.nombreTipo,
        tipo: tipo ?? this.tipo,
        hijoRelacionId: hijoRelacionId ?? this.hijoRelacionId,
        relacion: relacion ?? this.relacion,
        cargaCursoId: cargaCursoId ?? this.cargaCursoId,
        cursoId: cursoId ?? this.cursoId,
        cursoNombre: cursoNombre ?? this.cursoNombre,
        periodoId: periodoId ?? this.periodoId,
        periodoNombre: periodoNombre ?? this.periodoNombre,
        grupoId: grupoId ?? this.grupoId,
        grupoNombre: grupoNombre ?? this.grupoNombre,
        aulaId: aulaId ?? this.aulaId,
        aulaNombre: aulaNombre ?? this.aulaNombre,
        contratoEstadoId: contratoEstadoId ?? this.contratoEstadoId,
        contratoVigente: contratoVigente ?? this.contratoVigente,
        relacionId: relacionId ?? this.relacionId,
      );
  @override
  String toString() {
    return (StringBuffer('ContactoDocenteData(')
          ..write('personaId: $personaId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('ocupacion: $ocupacion, ')
          ..write('estadoId: $estadoId, ')
          ..write('telefono: $telefono, ')
          ..write('celular: $celular, ')
          ..write('fechaNac: $fechaNac, ')
          ..write('correo: $correo, ')
          ..write('genero: $genero, ')
          ..write('estadoCivil: $estadoCivil, ')
          ..write('numDoc: $numDoc, ')
          ..write('foto: $foto, ')
          ..write('nombreTipo: $nombreTipo, ')
          ..write('tipo: $tipo, ')
          ..write('hijoRelacionId: $hijoRelacionId, ')
          ..write('relacion: $relacion, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('cursoId: $cursoId, ')
          ..write('cursoNombre: $cursoNombre, ')
          ..write('periodoId: $periodoId, ')
          ..write('periodoNombre: $periodoNombre, ')
          ..write('grupoId: $grupoId, ')
          ..write('grupoNombre: $grupoNombre, ')
          ..write('aulaId: $aulaId, ')
          ..write('aulaNombre: $aulaNombre, ')
          ..write('contratoEstadoId: $contratoEstadoId, ')
          ..write('contratoVigente: $contratoVigente, ')
          ..write('relacionId: $relacionId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      personaId.hashCode,
      $mrjc(
          nombres.hashCode,
          $mrjc(
              apellidoPaterno.hashCode,
              $mrjc(
                  apellidoMaterno.hashCode,
                  $mrjc(
                      ocupacion.hashCode,
                      $mrjc(
                          estadoId.hashCode,
                          $mrjc(
                              telefono.hashCode,
                              $mrjc(
                                  celular.hashCode,
                                  $mrjc(
                                      fechaNac.hashCode,
                                      $mrjc(
                                          correo.hashCode,
                                          $mrjc(
                                              genero.hashCode,
                                              $mrjc(
                                                  estadoCivil.hashCode,
                                                  $mrjc(
                                                      numDoc.hashCode,
                                                      $mrjc(
                                                          foto.hashCode,
                                                          $mrjc(
                                                              nombreTipo
                                                                  .hashCode,
                                                              $mrjc(
                                                                  tipo.hashCode,
                                                                  $mrjc(
                                                                      hijoRelacionId
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          relacion
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              cargaCursoId.hashCode,
                                                                              $mrjc(cursoId.hashCode, $mrjc(cursoNombre.hashCode, $mrjc(periodoId.hashCode, $mrjc(periodoNombre.hashCode, $mrjc(grupoId.hashCode, $mrjc(grupoNombre.hashCode, $mrjc(aulaId.hashCode, $mrjc(aulaNombre.hashCode, $mrjc(contratoEstadoId.hashCode, $mrjc(contratoVigente.hashCode, relacionId.hashCode))))))))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ContactoDocenteData &&
          other.personaId == this.personaId &&
          other.nombres == this.nombres &&
          other.apellidoPaterno == this.apellidoPaterno &&
          other.apellidoMaterno == this.apellidoMaterno &&
          other.ocupacion == this.ocupacion &&
          other.estadoId == this.estadoId &&
          other.telefono == this.telefono &&
          other.celular == this.celular &&
          other.fechaNac == this.fechaNac &&
          other.correo == this.correo &&
          other.genero == this.genero &&
          other.estadoCivil == this.estadoCivil &&
          other.numDoc == this.numDoc &&
          other.foto == this.foto &&
          other.nombreTipo == this.nombreTipo &&
          other.tipo == this.tipo &&
          other.hijoRelacionId == this.hijoRelacionId &&
          other.relacion == this.relacion &&
          other.cargaCursoId == this.cargaCursoId &&
          other.cursoId == this.cursoId &&
          other.cursoNombre == this.cursoNombre &&
          other.periodoId == this.periodoId &&
          other.periodoNombre == this.periodoNombre &&
          other.grupoId == this.grupoId &&
          other.grupoNombre == this.grupoNombre &&
          other.aulaId == this.aulaId &&
          other.aulaNombre == this.aulaNombre &&
          other.contratoEstadoId == this.contratoEstadoId &&
          other.contratoVigente == this.contratoVigente &&
          other.relacionId == this.relacionId);
}

class ContactoDocenteCompanion extends UpdateCompanion<ContactoDocenteData> {
  final Value<int> personaId;
  final Value<String?> nombres;
  final Value<String?> apellidoPaterno;
  final Value<String?> apellidoMaterno;
  final Value<String?> ocupacion;
  final Value<int?> estadoId;
  final Value<String?> telefono;
  final Value<String?> celular;
  final Value<String?> fechaNac;
  final Value<String?> correo;
  final Value<String?> genero;
  final Value<String?> estadoCivil;
  final Value<String?> numDoc;
  final Value<String?> foto;
  final Value<String?> nombreTipo;
  final Value<int> tipo;
  final Value<int?> hijoRelacionId;
  final Value<String?> relacion;
  final Value<int> cargaCursoId;
  final Value<int?> cursoId;
  final Value<String?> cursoNombre;
  final Value<int?> periodoId;
  final Value<String?> periodoNombre;
  final Value<int?> grupoId;
  final Value<String?> grupoNombre;
  final Value<int?> aulaId;
  final Value<String?> aulaNombre;
  final Value<int?> contratoEstadoId;
  final Value<bool?> contratoVigente;
  final Value<int?> relacionId;
  const ContactoDocenteCompanion({
    this.personaId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.ocupacion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.telefono = const Value.absent(),
    this.celular = const Value.absent(),
    this.fechaNac = const Value.absent(),
    this.correo = const Value.absent(),
    this.genero = const Value.absent(),
    this.estadoCivil = const Value.absent(),
    this.numDoc = const Value.absent(),
    this.foto = const Value.absent(),
    this.nombreTipo = const Value.absent(),
    this.tipo = const Value.absent(),
    this.hijoRelacionId = const Value.absent(),
    this.relacion = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.cursoId = const Value.absent(),
    this.cursoNombre = const Value.absent(),
    this.periodoId = const Value.absent(),
    this.periodoNombre = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.grupoNombre = const Value.absent(),
    this.aulaId = const Value.absent(),
    this.aulaNombre = const Value.absent(),
    this.contratoEstadoId = const Value.absent(),
    this.contratoVigente = const Value.absent(),
    this.relacionId = const Value.absent(),
  });
  ContactoDocenteCompanion.insert({
    required int personaId,
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.ocupacion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.telefono = const Value.absent(),
    this.celular = const Value.absent(),
    this.fechaNac = const Value.absent(),
    this.correo = const Value.absent(),
    this.genero = const Value.absent(),
    this.estadoCivil = const Value.absent(),
    this.numDoc = const Value.absent(),
    this.foto = const Value.absent(),
    this.nombreTipo = const Value.absent(),
    required int tipo,
    this.hijoRelacionId = const Value.absent(),
    this.relacion = const Value.absent(),
    required int cargaCursoId,
    this.cursoId = const Value.absent(),
    this.cursoNombre = const Value.absent(),
    this.periodoId = const Value.absent(),
    this.periodoNombre = const Value.absent(),
    this.grupoId = const Value.absent(),
    this.grupoNombre = const Value.absent(),
    this.aulaId = const Value.absent(),
    this.aulaNombre = const Value.absent(),
    this.contratoEstadoId = const Value.absent(),
    this.contratoVigente = const Value.absent(),
    this.relacionId = const Value.absent(),
  })  : personaId = Value(personaId),
        tipo = Value(tipo),
        cargaCursoId = Value(cargaCursoId);
  static Insertable<ContactoDocenteData> custom({
    Expression<int>? personaId,
    Expression<String?>? nombres,
    Expression<String?>? apellidoPaterno,
    Expression<String?>? apellidoMaterno,
    Expression<String?>? ocupacion,
    Expression<int?>? estadoId,
    Expression<String?>? telefono,
    Expression<String?>? celular,
    Expression<String?>? fechaNac,
    Expression<String?>? correo,
    Expression<String?>? genero,
    Expression<String?>? estadoCivil,
    Expression<String?>? numDoc,
    Expression<String?>? foto,
    Expression<String?>? nombreTipo,
    Expression<int>? tipo,
    Expression<int?>? hijoRelacionId,
    Expression<String?>? relacion,
    Expression<int>? cargaCursoId,
    Expression<int?>? cursoId,
    Expression<String?>? cursoNombre,
    Expression<int?>? periodoId,
    Expression<String?>? periodoNombre,
    Expression<int?>? grupoId,
    Expression<String?>? grupoNombre,
    Expression<int?>? aulaId,
    Expression<String?>? aulaNombre,
    Expression<int?>? contratoEstadoId,
    Expression<bool?>? contratoVigente,
    Expression<int?>? relacionId,
  }) {
    return RawValuesInsertable({
      if (personaId != null) 'persona_id': personaId,
      if (nombres != null) 'nombres': nombres,
      if (apellidoPaterno != null) 'apellido_paterno': apellidoPaterno,
      if (apellidoMaterno != null) 'apellido_materno': apellidoMaterno,
      if (ocupacion != null) 'ocupacion': ocupacion,
      if (estadoId != null) 'estado_id': estadoId,
      if (telefono != null) 'telefono': telefono,
      if (celular != null) 'celular': celular,
      if (fechaNac != null) 'fecha_nac': fechaNac,
      if (correo != null) 'correo': correo,
      if (genero != null) 'genero': genero,
      if (estadoCivil != null) 'estado_civil': estadoCivil,
      if (numDoc != null) 'num_doc': numDoc,
      if (foto != null) 'foto': foto,
      if (nombreTipo != null) 'nombre_tipo': nombreTipo,
      if (tipo != null) 'tipo': tipo,
      if (hijoRelacionId != null) 'hijo_relacion_id': hijoRelacionId,
      if (relacion != null) 'relacion': relacion,
      if (cargaCursoId != null) 'carga_curso_id': cargaCursoId,
      if (cursoId != null) 'curso_id': cursoId,
      if (cursoNombre != null) 'curso_nombre': cursoNombre,
      if (periodoId != null) 'periodo_id': periodoId,
      if (periodoNombre != null) 'periodo_nombre': periodoNombre,
      if (grupoId != null) 'grupo_id': grupoId,
      if (grupoNombre != null) 'grupo_nombre': grupoNombre,
      if (aulaId != null) 'aula_id': aulaId,
      if (aulaNombre != null) 'aula_nombre': aulaNombre,
      if (contratoEstadoId != null) 'contrato_estado_id': contratoEstadoId,
      if (contratoVigente != null) 'contrato_vigente': contratoVigente,
      if (relacionId != null) 'relacion_id': relacionId,
    });
  }

  ContactoDocenteCompanion copyWith(
      {Value<int>? personaId,
      Value<String?>? nombres,
      Value<String?>? apellidoPaterno,
      Value<String?>? apellidoMaterno,
      Value<String?>? ocupacion,
      Value<int?>? estadoId,
      Value<String?>? telefono,
      Value<String?>? celular,
      Value<String?>? fechaNac,
      Value<String?>? correo,
      Value<String?>? genero,
      Value<String?>? estadoCivil,
      Value<String?>? numDoc,
      Value<String?>? foto,
      Value<String?>? nombreTipo,
      Value<int>? tipo,
      Value<int?>? hijoRelacionId,
      Value<String?>? relacion,
      Value<int>? cargaCursoId,
      Value<int?>? cursoId,
      Value<String?>? cursoNombre,
      Value<int?>? periodoId,
      Value<String?>? periodoNombre,
      Value<int?>? grupoId,
      Value<String?>? grupoNombre,
      Value<int?>? aulaId,
      Value<String?>? aulaNombre,
      Value<int?>? contratoEstadoId,
      Value<bool?>? contratoVigente,
      Value<int?>? relacionId}) {
    return ContactoDocenteCompanion(
      personaId: personaId ?? this.personaId,
      nombres: nombres ?? this.nombres,
      apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
      apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
      ocupacion: ocupacion ?? this.ocupacion,
      estadoId: estadoId ?? this.estadoId,
      telefono: telefono ?? this.telefono,
      celular: celular ?? this.celular,
      fechaNac: fechaNac ?? this.fechaNac,
      correo: correo ?? this.correo,
      genero: genero ?? this.genero,
      estadoCivil: estadoCivil ?? this.estadoCivil,
      numDoc: numDoc ?? this.numDoc,
      foto: foto ?? this.foto,
      nombreTipo: nombreTipo ?? this.nombreTipo,
      tipo: tipo ?? this.tipo,
      hijoRelacionId: hijoRelacionId ?? this.hijoRelacionId,
      relacion: relacion ?? this.relacion,
      cargaCursoId: cargaCursoId ?? this.cargaCursoId,
      cursoId: cursoId ?? this.cursoId,
      cursoNombre: cursoNombre ?? this.cursoNombre,
      periodoId: periodoId ?? this.periodoId,
      periodoNombre: periodoNombre ?? this.periodoNombre,
      grupoId: grupoId ?? this.grupoId,
      grupoNombre: grupoNombre ?? this.grupoNombre,
      aulaId: aulaId ?? this.aulaId,
      aulaNombre: aulaNombre ?? this.aulaNombre,
      contratoEstadoId: contratoEstadoId ?? this.contratoEstadoId,
      contratoVigente: contratoVigente ?? this.contratoVigente,
      relacionId: relacionId ?? this.relacionId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (personaId.present) {
      map['persona_id'] = Variable<int>(personaId.value);
    }
    if (nombres.present) {
      map['nombres'] = Variable<String?>(nombres.value);
    }
    if (apellidoPaterno.present) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno.value);
    }
    if (apellidoMaterno.present) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno.value);
    }
    if (ocupacion.present) {
      map['ocupacion'] = Variable<String?>(ocupacion.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (telefono.present) {
      map['telefono'] = Variable<String?>(telefono.value);
    }
    if (celular.present) {
      map['celular'] = Variable<String?>(celular.value);
    }
    if (fechaNac.present) {
      map['fecha_nac'] = Variable<String?>(fechaNac.value);
    }
    if (correo.present) {
      map['correo'] = Variable<String?>(correo.value);
    }
    if (genero.present) {
      map['genero'] = Variable<String?>(genero.value);
    }
    if (estadoCivil.present) {
      map['estado_civil'] = Variable<String?>(estadoCivil.value);
    }
    if (numDoc.present) {
      map['num_doc'] = Variable<String?>(numDoc.value);
    }
    if (foto.present) {
      map['foto'] = Variable<String?>(foto.value);
    }
    if (nombreTipo.present) {
      map['nombre_tipo'] = Variable<String?>(nombreTipo.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<int>(tipo.value);
    }
    if (hijoRelacionId.present) {
      map['hijo_relacion_id'] = Variable<int?>(hijoRelacionId.value);
    }
    if (relacion.present) {
      map['relacion'] = Variable<String?>(relacion.value);
    }
    if (cargaCursoId.present) {
      map['carga_curso_id'] = Variable<int>(cargaCursoId.value);
    }
    if (cursoId.present) {
      map['curso_id'] = Variable<int?>(cursoId.value);
    }
    if (cursoNombre.present) {
      map['curso_nombre'] = Variable<String?>(cursoNombre.value);
    }
    if (periodoId.present) {
      map['periodo_id'] = Variable<int?>(periodoId.value);
    }
    if (periodoNombre.present) {
      map['periodo_nombre'] = Variable<String?>(periodoNombre.value);
    }
    if (grupoId.present) {
      map['grupo_id'] = Variable<int?>(grupoId.value);
    }
    if (grupoNombre.present) {
      map['grupo_nombre'] = Variable<String?>(grupoNombre.value);
    }
    if (aulaId.present) {
      map['aula_id'] = Variable<int?>(aulaId.value);
    }
    if (aulaNombre.present) {
      map['aula_nombre'] = Variable<String?>(aulaNombre.value);
    }
    if (contratoEstadoId.present) {
      map['contrato_estado_id'] = Variable<int?>(contratoEstadoId.value);
    }
    if (contratoVigente.present) {
      map['contrato_vigente'] = Variable<bool?>(contratoVigente.value);
    }
    if (relacionId.present) {
      map['relacion_id'] = Variable<int?>(relacionId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContactoDocenteCompanion(')
          ..write('personaId: $personaId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('ocupacion: $ocupacion, ')
          ..write('estadoId: $estadoId, ')
          ..write('telefono: $telefono, ')
          ..write('celular: $celular, ')
          ..write('fechaNac: $fechaNac, ')
          ..write('correo: $correo, ')
          ..write('genero: $genero, ')
          ..write('estadoCivil: $estadoCivil, ')
          ..write('numDoc: $numDoc, ')
          ..write('foto: $foto, ')
          ..write('nombreTipo: $nombreTipo, ')
          ..write('tipo: $tipo, ')
          ..write('hijoRelacionId: $hijoRelacionId, ')
          ..write('relacion: $relacion, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('cursoId: $cursoId, ')
          ..write('cursoNombre: $cursoNombre, ')
          ..write('periodoId: $periodoId, ')
          ..write('periodoNombre: $periodoNombre, ')
          ..write('grupoId: $grupoId, ')
          ..write('grupoNombre: $grupoNombre, ')
          ..write('aulaId: $aulaId, ')
          ..write('aulaNombre: $aulaNombre, ')
          ..write('contratoEstadoId: $contratoEstadoId, ')
          ..write('contratoVigente: $contratoVigente, ')
          ..write('relacionId: $relacionId')
          ..write(')'))
        .toString();
  }
}

class $ContactoDocenteTable extends ContactoDocente
    with TableInfo<$ContactoDocenteTable, ContactoDocenteData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ContactoDocenteTable(this._db, [this._alias]);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _nombresMeta = const VerificationMeta('nombres');
  late final GeneratedColumn<String?> nombres = GeneratedColumn<String?>(
      'nombres', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoPaternoMeta =
      const VerificationMeta('apellidoPaterno');
  late final GeneratedColumn<String?> apellidoPaterno =
      GeneratedColumn<String?>('apellido_paterno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoMaternoMeta =
      const VerificationMeta('apellidoMaterno');
  late final GeneratedColumn<String?> apellidoMaterno =
      GeneratedColumn<String?>('apellido_materno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _ocupacionMeta = const VerificationMeta('ocupacion');
  late final GeneratedColumn<String?> ocupacion = GeneratedColumn<String?>(
      'ocupacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _telefonoMeta = const VerificationMeta('telefono');
  late final GeneratedColumn<String?> telefono = GeneratedColumn<String?>(
      'telefono', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
      'celular', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaNacMeta = const VerificationMeta('fechaNac');
  late final GeneratedColumn<String?> fechaNac = GeneratedColumn<String?>(
      'fecha_nac', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _correoMeta = const VerificationMeta('correo');
  late final GeneratedColumn<String?> correo = GeneratedColumn<String?>(
      'correo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _generoMeta = const VerificationMeta('genero');
  late final GeneratedColumn<String?> genero = GeneratedColumn<String?>(
      'genero', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoCivilMeta =
      const VerificationMeta('estadoCivil');
  late final GeneratedColumn<String?> estadoCivil = GeneratedColumn<String?>(
      'estado_civil', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _numDocMeta = const VerificationMeta('numDoc');
  late final GeneratedColumn<String?> numDoc = GeneratedColumn<String?>(
      'num_doc', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fotoMeta = const VerificationMeta('foto');
  late final GeneratedColumn<String?> foto = GeneratedColumn<String?>(
      'foto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nombreTipoMeta = const VerificationMeta('nombreTipo');
  late final GeneratedColumn<String?> nombreTipo = GeneratedColumn<String?>(
      'nombre_tipo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  late final GeneratedColumn<int?> tipo = GeneratedColumn<int?>(
      'tipo', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _hijoRelacionIdMeta =
      const VerificationMeta('hijoRelacionId');
  late final GeneratedColumn<int?> hijoRelacionId = GeneratedColumn<int?>(
      'hijo_relacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _relacionMeta = const VerificationMeta('relacion');
  late final GeneratedColumn<String?> relacion = GeneratedColumn<String?>(
      'relacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _cargaCursoIdMeta =
      const VerificationMeta('cargaCursoId');
  late final GeneratedColumn<int?> cargaCursoId = GeneratedColumn<int?>(
      'carga_curso_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _cursoIdMeta = const VerificationMeta('cursoId');
  late final GeneratedColumn<int?> cursoId = GeneratedColumn<int?>(
      'curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cursoNombreMeta =
      const VerificationMeta('cursoNombre');
  late final GeneratedColumn<String?> cursoNombre = GeneratedColumn<String?>(
      'curso_nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _periodoIdMeta = const VerificationMeta('periodoId');
  late final GeneratedColumn<int?> periodoId = GeneratedColumn<int?>(
      'periodo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _periodoNombreMeta =
      const VerificationMeta('periodoNombre');
  late final GeneratedColumn<String?> periodoNombre = GeneratedColumn<String?>(
      'periodo_nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _grupoIdMeta = const VerificationMeta('grupoId');
  late final GeneratedColumn<int?> grupoId = GeneratedColumn<int?>(
      'grupo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _grupoNombreMeta =
      const VerificationMeta('grupoNombre');
  late final GeneratedColumn<String?> grupoNombre = GeneratedColumn<String?>(
      'grupo_nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _aulaIdMeta = const VerificationMeta('aulaId');
  late final GeneratedColumn<int?> aulaId = GeneratedColumn<int?>(
      'aula_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _aulaNombreMeta = const VerificationMeta('aulaNombre');
  late final GeneratedColumn<String?> aulaNombre = GeneratedColumn<String?>(
      'aula_nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _contratoEstadoIdMeta =
      const VerificationMeta('contratoEstadoId');
  late final GeneratedColumn<int?> contratoEstadoId = GeneratedColumn<int?>(
      'contrato_estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _contratoVigenteMeta =
      const VerificationMeta('contratoVigente');
  late final GeneratedColumn<bool?> contratoVigente = GeneratedColumn<bool?>(
      'contrato_vigente', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (contrato_vigente IN (0, 1))');
  final VerificationMeta _relacionIdMeta = const VerificationMeta('relacionId');
  late final GeneratedColumn<int?> relacionId = GeneratedColumn<int?>(
      'relacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        personaId,
        nombres,
        apellidoPaterno,
        apellidoMaterno,
        ocupacion,
        estadoId,
        telefono,
        celular,
        fechaNac,
        correo,
        genero,
        estadoCivil,
        numDoc,
        foto,
        nombreTipo,
        tipo,
        hijoRelacionId,
        relacion,
        cargaCursoId,
        cursoId,
        cursoNombre,
        periodoId,
        periodoNombre,
        grupoId,
        grupoNombre,
        aulaId,
        aulaNombre,
        contratoEstadoId,
        contratoVigente,
        relacionId
      ];
  @override
  String get aliasedName => _alias ?? 'contacto_docente';
  @override
  String get actualTableName => 'contacto_docente';
  @override
  VerificationContext validateIntegrity(
      Insertable<ContactoDocenteData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    } else if (isInserting) {
      context.missing(_personaIdMeta);
    }
    if (data.containsKey('nombres')) {
      context.handle(_nombresMeta,
          nombres.isAcceptableOrUnknown(data['nombres']!, _nombresMeta));
    }
    if (data.containsKey('apellido_paterno')) {
      context.handle(
          _apellidoPaternoMeta,
          apellidoPaterno.isAcceptableOrUnknown(
              data['apellido_paterno']!, _apellidoPaternoMeta));
    }
    if (data.containsKey('apellido_materno')) {
      context.handle(
          _apellidoMaternoMeta,
          apellidoMaterno.isAcceptableOrUnknown(
              data['apellido_materno']!, _apellidoMaternoMeta));
    }
    if (data.containsKey('ocupacion')) {
      context.handle(_ocupacionMeta,
          ocupacion.isAcceptableOrUnknown(data['ocupacion']!, _ocupacionMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('telefono')) {
      context.handle(_telefonoMeta,
          telefono.isAcceptableOrUnknown(data['telefono']!, _telefonoMeta));
    }
    if (data.containsKey('celular')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['celular']!, _celularMeta));
    }
    if (data.containsKey('fecha_nac')) {
      context.handle(_fechaNacMeta,
          fechaNac.isAcceptableOrUnknown(data['fecha_nac']!, _fechaNacMeta));
    }
    if (data.containsKey('correo')) {
      context.handle(_correoMeta,
          correo.isAcceptableOrUnknown(data['correo']!, _correoMeta));
    }
    if (data.containsKey('genero')) {
      context.handle(_generoMeta,
          genero.isAcceptableOrUnknown(data['genero']!, _generoMeta));
    }
    if (data.containsKey('estado_civil')) {
      context.handle(
          _estadoCivilMeta,
          estadoCivil.isAcceptableOrUnknown(
              data['estado_civil']!, _estadoCivilMeta));
    }
    if (data.containsKey('num_doc')) {
      context.handle(_numDocMeta,
          numDoc.isAcceptableOrUnknown(data['num_doc']!, _numDocMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('nombre_tipo')) {
      context.handle(
          _nombreTipoMeta,
          nombreTipo.isAcceptableOrUnknown(
              data['nombre_tipo']!, _nombreTipoMeta));
    }
    if (data.containsKey('tipo')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta));
    } else if (isInserting) {
      context.missing(_tipoMeta);
    }
    if (data.containsKey('hijo_relacion_id')) {
      context.handle(
          _hijoRelacionIdMeta,
          hijoRelacionId.isAcceptableOrUnknown(
              data['hijo_relacion_id']!, _hijoRelacionIdMeta));
    }
    if (data.containsKey('relacion')) {
      context.handle(_relacionMeta,
          relacion.isAcceptableOrUnknown(data['relacion']!, _relacionMeta));
    }
    if (data.containsKey('carga_curso_id')) {
      context.handle(
          _cargaCursoIdMeta,
          cargaCursoId.isAcceptableOrUnknown(
              data['carga_curso_id']!, _cargaCursoIdMeta));
    } else if (isInserting) {
      context.missing(_cargaCursoIdMeta);
    }
    if (data.containsKey('curso_id')) {
      context.handle(_cursoIdMeta,
          cursoId.isAcceptableOrUnknown(data['curso_id']!, _cursoIdMeta));
    }
    if (data.containsKey('curso_nombre')) {
      context.handle(
          _cursoNombreMeta,
          cursoNombre.isAcceptableOrUnknown(
              data['curso_nombre']!, _cursoNombreMeta));
    }
    if (data.containsKey('periodo_id')) {
      context.handle(_periodoIdMeta,
          periodoId.isAcceptableOrUnknown(data['periodo_id']!, _periodoIdMeta));
    }
    if (data.containsKey('periodo_nombre')) {
      context.handle(
          _periodoNombreMeta,
          periodoNombre.isAcceptableOrUnknown(
              data['periodo_nombre']!, _periodoNombreMeta));
    }
    if (data.containsKey('grupo_id')) {
      context.handle(_grupoIdMeta,
          grupoId.isAcceptableOrUnknown(data['grupo_id']!, _grupoIdMeta));
    }
    if (data.containsKey('grupo_nombre')) {
      context.handle(
          _grupoNombreMeta,
          grupoNombre.isAcceptableOrUnknown(
              data['grupo_nombre']!, _grupoNombreMeta));
    }
    if (data.containsKey('aula_id')) {
      context.handle(_aulaIdMeta,
          aulaId.isAcceptableOrUnknown(data['aula_id']!, _aulaIdMeta));
    }
    if (data.containsKey('aula_nombre')) {
      context.handle(
          _aulaNombreMeta,
          aulaNombre.isAcceptableOrUnknown(
              data['aula_nombre']!, _aulaNombreMeta));
    }
    if (data.containsKey('contrato_estado_id')) {
      context.handle(
          _contratoEstadoIdMeta,
          contratoEstadoId.isAcceptableOrUnknown(
              data['contrato_estado_id']!, _contratoEstadoIdMeta));
    }
    if (data.containsKey('contrato_vigente')) {
      context.handle(
          _contratoVigenteMeta,
          contratoVigente.isAcceptableOrUnknown(
              data['contrato_vigente']!, _contratoVigenteMeta));
    }
    if (data.containsKey('relacion_id')) {
      context.handle(
          _relacionIdMeta,
          relacionId.isAcceptableOrUnknown(
              data['relacion_id']!, _relacionIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {personaId, tipo, cargaCursoId};
  @override
  ContactoDocenteData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ContactoDocenteData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ContactoDocenteTable createAlias(String alias) {
    return $ContactoDocenteTable(_db, alias);
  }
}

class CriterioRubroEvaluacionData extends DataClass
    implements Insertable<CriterioRubroEvaluacionData> {
  final String criteriosEvaluacionId;
  final String? rubroEvalProcesoId;
  final String? valorTipoNotaId;
  final String? descripcion;
  CriterioRubroEvaluacionData(
      {required this.criteriosEvaluacionId,
      this.rubroEvalProcesoId,
      this.valorTipoNotaId,
      this.descripcion});
  factory CriterioRubroEvaluacionData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CriterioRubroEvaluacionData(
      criteriosEvaluacionId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}criterios_evaluacion_id'])!,
      rubroEvalProcesoId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}rubro_eval_proceso_id']),
      valorTipoNotaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}valor_tipo_nota_id']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['criterios_evaluacion_id'] = Variable<String>(criteriosEvaluacionId);
    if (!nullToAbsent || rubroEvalProcesoId != null) {
      map['rubro_eval_proceso_id'] = Variable<String?>(rubroEvalProcesoId);
    }
    if (!nullToAbsent || valorTipoNotaId != null) {
      map['valor_tipo_nota_id'] = Variable<String?>(valorTipoNotaId);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    return map;
  }

  CriterioRubroEvaluacionCompanion toCompanion(bool nullToAbsent) {
    return CriterioRubroEvaluacionCompanion(
      criteriosEvaluacionId: Value(criteriosEvaluacionId),
      rubroEvalProcesoId: rubroEvalProcesoId == null && nullToAbsent
          ? const Value.absent()
          : Value(rubroEvalProcesoId),
      valorTipoNotaId: valorTipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTipoNotaId),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
    );
  }

  factory CriterioRubroEvaluacionData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CriterioRubroEvaluacionData(
      criteriosEvaluacionId:
          serializer.fromJson<String>(json['criteriosEvaluacionId']),
      rubroEvalProcesoId:
          serializer.fromJson<String?>(json['rubroEvalProcesoId']),
      valorTipoNotaId: serializer.fromJson<String?>(json['valorTipoNotaId']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'criteriosEvaluacionId': serializer.toJson<String>(criteriosEvaluacionId),
      'rubroEvalProcesoId': serializer.toJson<String?>(rubroEvalProcesoId),
      'valorTipoNotaId': serializer.toJson<String?>(valorTipoNotaId),
      'descripcion': serializer.toJson<String?>(descripcion),
    };
  }

  CriterioRubroEvaluacionData copyWith(
          {String? criteriosEvaluacionId,
          String? rubroEvalProcesoId,
          String? valorTipoNotaId,
          String? descripcion}) =>
      CriterioRubroEvaluacionData(
        criteriosEvaluacionId:
            criteriosEvaluacionId ?? this.criteriosEvaluacionId,
        rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
        valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
        descripcion: descripcion ?? this.descripcion,
      );
  @override
  String toString() {
    return (StringBuffer('CriterioRubroEvaluacionData(')
          ..write('criteriosEvaluacionId: $criteriosEvaluacionId, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('descripcion: $descripcion')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      criteriosEvaluacionId.hashCode,
      $mrjc(rubroEvalProcesoId.hashCode,
          $mrjc(valorTipoNotaId.hashCode, descripcion.hashCode))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CriterioRubroEvaluacionData &&
          other.criteriosEvaluacionId == this.criteriosEvaluacionId &&
          other.rubroEvalProcesoId == this.rubroEvalProcesoId &&
          other.valorTipoNotaId == this.valorTipoNotaId &&
          other.descripcion == this.descripcion);
}

class CriterioRubroEvaluacionCompanion
    extends UpdateCompanion<CriterioRubroEvaluacionData> {
  final Value<String> criteriosEvaluacionId;
  final Value<String?> rubroEvalProcesoId;
  final Value<String?> valorTipoNotaId;
  final Value<String?> descripcion;
  const CriterioRubroEvaluacionCompanion({
    this.criteriosEvaluacionId = const Value.absent(),
    this.rubroEvalProcesoId = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
    this.descripcion = const Value.absent(),
  });
  CriterioRubroEvaluacionCompanion.insert({
    required String criteriosEvaluacionId,
    this.rubroEvalProcesoId = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
    this.descripcion = const Value.absent(),
  }) : criteriosEvaluacionId = Value(criteriosEvaluacionId);
  static Insertable<CriterioRubroEvaluacionData> custom({
    Expression<String>? criteriosEvaluacionId,
    Expression<String?>? rubroEvalProcesoId,
    Expression<String?>? valorTipoNotaId,
    Expression<String?>? descripcion,
  }) {
    return RawValuesInsertable({
      if (criteriosEvaluacionId != null)
        'criterios_evaluacion_id': criteriosEvaluacionId,
      if (rubroEvalProcesoId != null)
        'rubro_eval_proceso_id': rubroEvalProcesoId,
      if (valorTipoNotaId != null) 'valor_tipo_nota_id': valorTipoNotaId,
      if (descripcion != null) 'descripcion': descripcion,
    });
  }

  CriterioRubroEvaluacionCompanion copyWith(
      {Value<String>? criteriosEvaluacionId,
      Value<String?>? rubroEvalProcesoId,
      Value<String?>? valorTipoNotaId,
      Value<String?>? descripcion}) {
    return CriterioRubroEvaluacionCompanion(
      criteriosEvaluacionId:
          criteriosEvaluacionId ?? this.criteriosEvaluacionId,
      rubroEvalProcesoId: rubroEvalProcesoId ?? this.rubroEvalProcesoId,
      valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
      descripcion: descripcion ?? this.descripcion,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (criteriosEvaluacionId.present) {
      map['criterios_evaluacion_id'] =
          Variable<String>(criteriosEvaluacionId.value);
    }
    if (rubroEvalProcesoId.present) {
      map['rubro_eval_proceso_id'] =
          Variable<String?>(rubroEvalProcesoId.value);
    }
    if (valorTipoNotaId.present) {
      map['valor_tipo_nota_id'] = Variable<String?>(valorTipoNotaId.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CriterioRubroEvaluacionCompanion(')
          ..write('criteriosEvaluacionId: $criteriosEvaluacionId, ')
          ..write('rubroEvalProcesoId: $rubroEvalProcesoId, ')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('descripcion: $descripcion')
          ..write(')'))
        .toString();
  }
}

class $CriterioRubroEvaluacionTable extends CriterioRubroEvaluacion
    with TableInfo<$CriterioRubroEvaluacionTable, CriterioRubroEvaluacionData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CriterioRubroEvaluacionTable(this._db, [this._alias]);
  final VerificationMeta _criteriosEvaluacionIdMeta =
      const VerificationMeta('criteriosEvaluacionId');
  late final GeneratedColumn<String?> criteriosEvaluacionId =
      GeneratedColumn<String?>('criterios_evaluacion_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _rubroEvalProcesoIdMeta =
      const VerificationMeta('rubroEvalProcesoId');
  late final GeneratedColumn<String?> rubroEvalProcesoId =
      GeneratedColumn<String?>('rubro_eval_proceso_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _valorTipoNotaIdMeta =
      const VerificationMeta('valorTipoNotaId');
  late final GeneratedColumn<String?> valorTipoNotaId =
      GeneratedColumn<String?>('valor_tipo_nota_id', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [criteriosEvaluacionId, rubroEvalProcesoId, valorTipoNotaId, descripcion];
  @override
  String get aliasedName => _alias ?? 'criterio_rubro_evaluacion';
  @override
  String get actualTableName => 'criterio_rubro_evaluacion';
  @override
  VerificationContext validateIntegrity(
      Insertable<CriterioRubroEvaluacionData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('criterios_evaluacion_id')) {
      context.handle(
          _criteriosEvaluacionIdMeta,
          criteriosEvaluacionId.isAcceptableOrUnknown(
              data['criterios_evaluacion_id']!, _criteriosEvaluacionIdMeta));
    } else if (isInserting) {
      context.missing(_criteriosEvaluacionIdMeta);
    }
    if (data.containsKey('rubro_eval_proceso_id')) {
      context.handle(
          _rubroEvalProcesoIdMeta,
          rubroEvalProcesoId.isAcceptableOrUnknown(
              data['rubro_eval_proceso_id']!, _rubroEvalProcesoIdMeta));
    }
    if (data.containsKey('valor_tipo_nota_id')) {
      context.handle(
          _valorTipoNotaIdMeta,
          valorTipoNotaId.isAcceptableOrUnknown(
              data['valor_tipo_nota_id']!, _valorTipoNotaIdMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {criteriosEvaluacionId};
  @override
  CriterioRubroEvaluacionData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return CriterioRubroEvaluacionData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CriterioRubroEvaluacionTable createAlias(String alias) {
    return $CriterioRubroEvaluacionTable(_db, alias);
  }
}

class CalendarioData extends DataClass implements Insertable<CalendarioData> {
  final String calendarioId;
  final String? nombre;
  final String? descripcion;
  final int? estado;
  final int? entidadId;
  final int? georeferenciaId;
  final String? nUsuario;
  final String? cargo;
  final int? usuarioId;
  final int? cargaAcademicaId;
  final int? cargaCursoId;
  final int? estadoPublicaciN;
  final int? estadoPublicacion;
  final int? rolId;
  final int? usuarioCreacionId;
  final int? usuarioCreadorId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? fechaEnvio;
  final int? fechaEntrega;
  final int? fechaRecibido;
  final int? fechaVisto;
  final int? fechaRespuesta;
  final String? getSTime;
  CalendarioData(
      {required this.calendarioId,
      this.nombre,
      this.descripcion,
      this.estado,
      this.entidadId,
      this.georeferenciaId,
      this.nUsuario,
      this.cargo,
      this.usuarioId,
      this.cargaAcademicaId,
      this.cargaCursoId,
      this.estadoPublicaciN,
      this.estadoPublicacion,
      this.rolId,
      this.usuarioCreacionId,
      this.usuarioCreadorId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.fechaEnvio,
      this.fechaEntrega,
      this.fechaRecibido,
      this.fechaVisto,
      this.fechaRespuesta,
      this.getSTime});
  factory CalendarioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CalendarioData(
      calendarioId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}calendario_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      estado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      nUsuario: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}n_usuario']),
      cargo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}cargo']),
      usuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_id']),
      cargaAcademicaId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}carga_academica_id']),
      cargaCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}carga_curso_id']),
      estadoPublicaciN: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}estado_publicaci_n']),
      estadoPublicacion: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}estado_publicacion']),
      rolId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rol_id']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      usuarioCreadorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creador_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      fechaEnvio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_envio']),
      fechaEntrega: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_entrega']),
      fechaRecibido: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_recibido']),
      fechaVisto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_visto']),
      fechaRespuesta: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_respuesta']),
      getSTime: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}get_s_time']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['calendario_id'] = Variable<String>(calendarioId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<int?>(estado);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || nUsuario != null) {
      map['n_usuario'] = Variable<String?>(nUsuario);
    }
    if (!nullToAbsent || cargo != null) {
      map['cargo'] = Variable<String?>(cargo);
    }
    if (!nullToAbsent || usuarioId != null) {
      map['usuario_id'] = Variable<int?>(usuarioId);
    }
    if (!nullToAbsent || cargaAcademicaId != null) {
      map['carga_academica_id'] = Variable<int?>(cargaAcademicaId);
    }
    if (!nullToAbsent || cargaCursoId != null) {
      map['carga_curso_id'] = Variable<int?>(cargaCursoId);
    }
    if (!nullToAbsent || estadoPublicaciN != null) {
      map['estado_publicaci_n'] = Variable<int?>(estadoPublicaciN);
    }
    if (!nullToAbsent || estadoPublicacion != null) {
      map['estado_publicacion'] = Variable<int?>(estadoPublicacion);
    }
    if (!nullToAbsent || rolId != null) {
      map['rol_id'] = Variable<int?>(rolId);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || usuarioCreadorId != null) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || fechaEnvio != null) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio);
    }
    if (!nullToAbsent || fechaEntrega != null) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega);
    }
    if (!nullToAbsent || fechaRecibido != null) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido);
    }
    if (!nullToAbsent || fechaVisto != null) {
      map['fecha_visto'] = Variable<int?>(fechaVisto);
    }
    if (!nullToAbsent || fechaRespuesta != null) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta);
    }
    if (!nullToAbsent || getSTime != null) {
      map['get_s_time'] = Variable<String?>(getSTime);
    }
    return map;
  }

  CalendarioCompanion toCompanion(bool nullToAbsent) {
    return CalendarioCompanion(
      calendarioId: Value(calendarioId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      nUsuario: nUsuario == null && nullToAbsent
          ? const Value.absent()
          : Value(nUsuario),
      cargo:
          cargo == null && nullToAbsent ? const Value.absent() : Value(cargo),
      usuarioId: usuarioId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioId),
      cargaAcademicaId: cargaAcademicaId == null && nullToAbsent
          ? const Value.absent()
          : Value(cargaAcademicaId),
      cargaCursoId: cargaCursoId == null && nullToAbsent
          ? const Value.absent()
          : Value(cargaCursoId),
      estadoPublicaciN: estadoPublicaciN == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoPublicaciN),
      estadoPublicacion: estadoPublicacion == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoPublicacion),
      rolId:
          rolId == null && nullToAbsent ? const Value.absent() : Value(rolId),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      usuarioCreadorId: usuarioCreadorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreadorId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      fechaEnvio: fechaEnvio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEnvio),
      fechaEntrega: fechaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEntrega),
      fechaRecibido: fechaRecibido == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRecibido),
      fechaVisto: fechaVisto == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaVisto),
      fechaRespuesta: fechaRespuesta == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRespuesta),
      getSTime: getSTime == null && nullToAbsent
          ? const Value.absent()
          : Value(getSTime),
    );
  }

  factory CalendarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CalendarioData(
      calendarioId: serializer.fromJson<String>(json['calendarioId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      estado: serializer.fromJson<int?>(json['estado']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      nUsuario: serializer.fromJson<String?>(json['nUsuario']),
      cargo: serializer.fromJson<String?>(json['cargo']),
      usuarioId: serializer.fromJson<int?>(json['usuarioId']),
      cargaAcademicaId: serializer.fromJson<int?>(json['cargaAcademicaId']),
      cargaCursoId: serializer.fromJson<int?>(json['cargaCursoId']),
      estadoPublicaciN: serializer.fromJson<int?>(json['estadoPublicaciN']),
      estadoPublicacion: serializer.fromJson<int?>(json['estadoPublicacion']),
      rolId: serializer.fromJson<int?>(json['rolId']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      usuarioCreadorId: serializer.fromJson<int?>(json['usuarioCreadorId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      fechaEnvio: serializer.fromJson<int?>(json['fechaEnvio']),
      fechaEntrega: serializer.fromJson<int?>(json['fechaEntrega']),
      fechaRecibido: serializer.fromJson<int?>(json['fechaRecibido']),
      fechaVisto: serializer.fromJson<int?>(json['fechaVisto']),
      fechaRespuesta: serializer.fromJson<int?>(json['fechaRespuesta']),
      getSTime: serializer.fromJson<String?>(json['getSTime']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'calendarioId': serializer.toJson<String>(calendarioId),
      'nombre': serializer.toJson<String?>(nombre),
      'descripcion': serializer.toJson<String?>(descripcion),
      'estado': serializer.toJson<int?>(estado),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'nUsuario': serializer.toJson<String?>(nUsuario),
      'cargo': serializer.toJson<String?>(cargo),
      'usuarioId': serializer.toJson<int?>(usuarioId),
      'cargaAcademicaId': serializer.toJson<int?>(cargaAcademicaId),
      'cargaCursoId': serializer.toJson<int?>(cargaCursoId),
      'estadoPublicaciN': serializer.toJson<int?>(estadoPublicaciN),
      'estadoPublicacion': serializer.toJson<int?>(estadoPublicacion),
      'rolId': serializer.toJson<int?>(rolId),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'usuarioCreadorId': serializer.toJson<int?>(usuarioCreadorId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'fechaEnvio': serializer.toJson<int?>(fechaEnvio),
      'fechaEntrega': serializer.toJson<int?>(fechaEntrega),
      'fechaRecibido': serializer.toJson<int?>(fechaRecibido),
      'fechaVisto': serializer.toJson<int?>(fechaVisto),
      'fechaRespuesta': serializer.toJson<int?>(fechaRespuesta),
      'getSTime': serializer.toJson<String?>(getSTime),
    };
  }

  CalendarioData copyWith(
          {String? calendarioId,
          String? nombre,
          String? descripcion,
          int? estado,
          int? entidadId,
          int? georeferenciaId,
          String? nUsuario,
          String? cargo,
          int? usuarioId,
          int? cargaAcademicaId,
          int? cargaCursoId,
          int? estadoPublicaciN,
          int? estadoPublicacion,
          int? rolId,
          int? usuarioCreacionId,
          int? usuarioCreadorId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? fechaEnvio,
          int? fechaEntrega,
          int? fechaRecibido,
          int? fechaVisto,
          int? fechaRespuesta,
          String? getSTime}) =>
      CalendarioData(
        calendarioId: calendarioId ?? this.calendarioId,
        nombre: nombre ?? this.nombre,
        descripcion: descripcion ?? this.descripcion,
        estado: estado ?? this.estado,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        nUsuario: nUsuario ?? this.nUsuario,
        cargo: cargo ?? this.cargo,
        usuarioId: usuarioId ?? this.usuarioId,
        cargaAcademicaId: cargaAcademicaId ?? this.cargaAcademicaId,
        cargaCursoId: cargaCursoId ?? this.cargaCursoId,
        estadoPublicaciN: estadoPublicaciN ?? this.estadoPublicaciN,
        estadoPublicacion: estadoPublicacion ?? this.estadoPublicacion,
        rolId: rolId ?? this.rolId,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        fechaEnvio: fechaEnvio ?? this.fechaEnvio,
        fechaEntrega: fechaEntrega ?? this.fechaEntrega,
        fechaRecibido: fechaRecibido ?? this.fechaRecibido,
        fechaVisto: fechaVisto ?? this.fechaVisto,
        fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
        getSTime: getSTime ?? this.getSTime,
      );
  @override
  String toString() {
    return (StringBuffer('CalendarioData(')
          ..write('calendarioId: $calendarioId, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('estado: $estado, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('nUsuario: $nUsuario, ')
          ..write('cargo: $cargo, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('cargaAcademicaId: $cargaAcademicaId, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('estadoPublicaciN: $estadoPublicaciN, ')
          ..write('estadoPublicacion: $estadoPublicacion, ')
          ..write('rolId: $rolId, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      calendarioId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              descripcion.hashCode,
              $mrjc(
                  estado.hashCode,
                  $mrjc(
                      entidadId.hashCode,
                      $mrjc(
                          georeferenciaId.hashCode,
                          $mrjc(
                              nUsuario.hashCode,
                              $mrjc(
                                  cargo.hashCode,
                                  $mrjc(
                                      usuarioId.hashCode,
                                      $mrjc(
                                          cargaAcademicaId.hashCode,
                                          $mrjc(
                                              cargaCursoId.hashCode,
                                              $mrjc(
                                                  estadoPublicaciN.hashCode,
                                                  $mrjc(
                                                      estadoPublicacion
                                                          .hashCode,
                                                      $mrjc(
                                                          rolId.hashCode,
                                                          $mrjc(
                                                              usuarioCreacionId
                                                                  .hashCode,
                                                              $mrjc(
                                                                  usuarioCreadorId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      fechaCreacion
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          usuarioAccionId
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              fechaAccion.hashCode,
                                                                              $mrjc(fechaEnvio.hashCode, $mrjc(fechaEntrega.hashCode, $mrjc(fechaRecibido.hashCode, $mrjc(fechaVisto.hashCode, $mrjc(fechaRespuesta.hashCode, getSTime.hashCode)))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CalendarioData &&
          other.calendarioId == this.calendarioId &&
          other.nombre == this.nombre &&
          other.descripcion == this.descripcion &&
          other.estado == this.estado &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.nUsuario == this.nUsuario &&
          other.cargo == this.cargo &&
          other.usuarioId == this.usuarioId &&
          other.cargaAcademicaId == this.cargaAcademicaId &&
          other.cargaCursoId == this.cargaCursoId &&
          other.estadoPublicaciN == this.estadoPublicaciN &&
          other.estadoPublicacion == this.estadoPublicacion &&
          other.rolId == this.rolId &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.usuarioCreadorId == this.usuarioCreadorId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.fechaEnvio == this.fechaEnvio &&
          other.fechaEntrega == this.fechaEntrega &&
          other.fechaRecibido == this.fechaRecibido &&
          other.fechaVisto == this.fechaVisto &&
          other.fechaRespuesta == this.fechaRespuesta &&
          other.getSTime == this.getSTime);
}

class CalendarioCompanion extends UpdateCompanion<CalendarioData> {
  final Value<String> calendarioId;
  final Value<String?> nombre;
  final Value<String?> descripcion;
  final Value<int?> estado;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  final Value<String?> nUsuario;
  final Value<String?> cargo;
  final Value<int?> usuarioId;
  final Value<int?> cargaAcademicaId;
  final Value<int?> cargaCursoId;
  final Value<int?> estadoPublicaciN;
  final Value<int?> estadoPublicacion;
  final Value<int?> rolId;
  final Value<int?> usuarioCreacionId;
  final Value<int?> usuarioCreadorId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> fechaEnvio;
  final Value<int?> fechaEntrega;
  final Value<int?> fechaRecibido;
  final Value<int?> fechaVisto;
  final Value<int?> fechaRespuesta;
  final Value<String?> getSTime;
  const CalendarioCompanion({
    this.calendarioId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.estado = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.nUsuario = const Value.absent(),
    this.cargo = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.cargaAcademicaId = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.estadoPublicaciN = const Value.absent(),
    this.estadoPublicacion = const Value.absent(),
    this.rolId = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  });
  CalendarioCompanion.insert({
    required String calendarioId,
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.estado = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.nUsuario = const Value.absent(),
    this.cargo = const Value.absent(),
    this.usuarioId = const Value.absent(),
    this.cargaAcademicaId = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
    this.estadoPublicaciN = const Value.absent(),
    this.estadoPublicacion = const Value.absent(),
    this.rolId = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  }) : calendarioId = Value(calendarioId);
  static Insertable<CalendarioData> custom({
    Expression<String>? calendarioId,
    Expression<String?>? nombre,
    Expression<String?>? descripcion,
    Expression<int?>? estado,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
    Expression<String?>? nUsuario,
    Expression<String?>? cargo,
    Expression<int?>? usuarioId,
    Expression<int?>? cargaAcademicaId,
    Expression<int?>? cargaCursoId,
    Expression<int?>? estadoPublicaciN,
    Expression<int?>? estadoPublicacion,
    Expression<int?>? rolId,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? usuarioCreadorId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? fechaEnvio,
    Expression<int?>? fechaEntrega,
    Expression<int?>? fechaRecibido,
    Expression<int?>? fechaVisto,
    Expression<int?>? fechaRespuesta,
    Expression<String?>? getSTime,
  }) {
    return RawValuesInsertable({
      if (calendarioId != null) 'calendario_id': calendarioId,
      if (nombre != null) 'nombre': nombre,
      if (descripcion != null) 'descripcion': descripcion,
      if (estado != null) 'estado': estado,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (nUsuario != null) 'n_usuario': nUsuario,
      if (cargo != null) 'cargo': cargo,
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (cargaAcademicaId != null) 'carga_academica_id': cargaAcademicaId,
      if (cargaCursoId != null) 'carga_curso_id': cargaCursoId,
      if (estadoPublicaciN != null) 'estado_publicaci_n': estadoPublicaciN,
      if (estadoPublicacion != null) 'estado_publicacion': estadoPublicacion,
      if (rolId != null) 'rol_id': rolId,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (usuarioCreadorId != null) 'usuario_creador_id': usuarioCreadorId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (fechaEnvio != null) 'fecha_envio': fechaEnvio,
      if (fechaEntrega != null) 'fecha_entrega': fechaEntrega,
      if (fechaRecibido != null) 'fecha_recibido': fechaRecibido,
      if (fechaVisto != null) 'fecha_visto': fechaVisto,
      if (fechaRespuesta != null) 'fecha_respuesta': fechaRespuesta,
      if (getSTime != null) 'get_s_time': getSTime,
    });
  }

  CalendarioCompanion copyWith(
      {Value<String>? calendarioId,
      Value<String?>? nombre,
      Value<String?>? descripcion,
      Value<int?>? estado,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId,
      Value<String?>? nUsuario,
      Value<String?>? cargo,
      Value<int?>? usuarioId,
      Value<int?>? cargaAcademicaId,
      Value<int?>? cargaCursoId,
      Value<int?>? estadoPublicaciN,
      Value<int?>? estadoPublicacion,
      Value<int?>? rolId,
      Value<int?>? usuarioCreacionId,
      Value<int?>? usuarioCreadorId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? fechaEnvio,
      Value<int?>? fechaEntrega,
      Value<int?>? fechaRecibido,
      Value<int?>? fechaVisto,
      Value<int?>? fechaRespuesta,
      Value<String?>? getSTime}) {
    return CalendarioCompanion(
      calendarioId: calendarioId ?? this.calendarioId,
      nombre: nombre ?? this.nombre,
      descripcion: descripcion ?? this.descripcion,
      estado: estado ?? this.estado,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      nUsuario: nUsuario ?? this.nUsuario,
      cargo: cargo ?? this.cargo,
      usuarioId: usuarioId ?? this.usuarioId,
      cargaAcademicaId: cargaAcademicaId ?? this.cargaAcademicaId,
      cargaCursoId: cargaCursoId ?? this.cargaCursoId,
      estadoPublicaciN: estadoPublicaciN ?? this.estadoPublicaciN,
      estadoPublicacion: estadoPublicacion ?? this.estadoPublicacion,
      rolId: rolId ?? this.rolId,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      fechaEnvio: fechaEnvio ?? this.fechaEnvio,
      fechaEntrega: fechaEntrega ?? this.fechaEntrega,
      fechaRecibido: fechaRecibido ?? this.fechaRecibido,
      fechaVisto: fechaVisto ?? this.fechaVisto,
      fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
      getSTime: getSTime ?? this.getSTime,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (calendarioId.present) {
      map['calendario_id'] = Variable<String>(calendarioId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (estado.present) {
      map['estado'] = Variable<int?>(estado.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (nUsuario.present) {
      map['n_usuario'] = Variable<String?>(nUsuario.value);
    }
    if (cargo.present) {
      map['cargo'] = Variable<String?>(cargo.value);
    }
    if (usuarioId.present) {
      map['usuario_id'] = Variable<int?>(usuarioId.value);
    }
    if (cargaAcademicaId.present) {
      map['carga_academica_id'] = Variable<int?>(cargaAcademicaId.value);
    }
    if (cargaCursoId.present) {
      map['carga_curso_id'] = Variable<int?>(cargaCursoId.value);
    }
    if (estadoPublicaciN.present) {
      map['estado_publicaci_n'] = Variable<int?>(estadoPublicaciN.value);
    }
    if (estadoPublicacion.present) {
      map['estado_publicacion'] = Variable<int?>(estadoPublicacion.value);
    }
    if (rolId.present) {
      map['rol_id'] = Variable<int?>(rolId.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (usuarioCreadorId.present) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (fechaEnvio.present) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio.value);
    }
    if (fechaEntrega.present) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega.value);
    }
    if (fechaRecibido.present) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido.value);
    }
    if (fechaVisto.present) {
      map['fecha_visto'] = Variable<int?>(fechaVisto.value);
    }
    if (fechaRespuesta.present) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta.value);
    }
    if (getSTime.present) {
      map['get_s_time'] = Variable<String?>(getSTime.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CalendarioCompanion(')
          ..write('calendarioId: $calendarioId, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('estado: $estado, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('nUsuario: $nUsuario, ')
          ..write('cargo: $cargo, ')
          ..write('usuarioId: $usuarioId, ')
          ..write('cargaAcademicaId: $cargaAcademicaId, ')
          ..write('cargaCursoId: $cargaCursoId, ')
          ..write('estadoPublicaciN: $estadoPublicaciN, ')
          ..write('estadoPublicacion: $estadoPublicacion, ')
          ..write('rolId: $rolId, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }
}

class $CalendarioTable extends Calendario
    with TableInfo<$CalendarioTable, CalendarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CalendarioTable(this._db, [this._alias]);
  final VerificationMeta _calendarioIdMeta =
      const VerificationMeta('calendarioId');
  late final GeneratedColumn<String?> calendarioId = GeneratedColumn<String?>(
      'calendario_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<int?> estado = GeneratedColumn<int?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nUsuarioMeta = const VerificationMeta('nUsuario');
  late final GeneratedColumn<String?> nUsuario = GeneratedColumn<String?>(
      'n_usuario', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _cargoMeta = const VerificationMeta('cargo');
  late final GeneratedColumn<String?> cargo = GeneratedColumn<String?>(
      'cargo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _usuarioIdMeta = const VerificationMeta('usuarioId');
  late final GeneratedColumn<int?> usuarioId = GeneratedColumn<int?>(
      'usuario_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cargaAcademicaIdMeta =
      const VerificationMeta('cargaAcademicaId');
  late final GeneratedColumn<int?> cargaAcademicaId = GeneratedColumn<int?>(
      'carga_academica_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cargaCursoIdMeta =
      const VerificationMeta('cargaCursoId');
  late final GeneratedColumn<int?> cargaCursoId = GeneratedColumn<int?>(
      'carga_curso_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoPublicaciNMeta =
      const VerificationMeta('estadoPublicaciN');
  late final GeneratedColumn<int?> estadoPublicaciN = GeneratedColumn<int?>(
      'estado_publicaci_n', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoPublicacionMeta =
      const VerificationMeta('estadoPublicacion');
  late final GeneratedColumn<int?> estadoPublicacion = GeneratedColumn<int?>(
      'estado_publicacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rolIdMeta = const VerificationMeta('rolId');
  late final GeneratedColumn<int?> rolId = GeneratedColumn<int?>(
      'rol_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreadorIdMeta =
      const VerificationMeta('usuarioCreadorId');
  late final GeneratedColumn<int?> usuarioCreadorId = GeneratedColumn<int?>(
      'usuario_creador_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEnvioMeta = const VerificationMeta('fechaEnvio');
  late final GeneratedColumn<int?> fechaEnvio = GeneratedColumn<int?>(
      'fecha_envio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEntregaMeta =
      const VerificationMeta('fechaEntrega');
  late final GeneratedColumn<int?> fechaEntrega = GeneratedColumn<int?>(
      'fecha_entrega', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRecibidoMeta =
      const VerificationMeta('fechaRecibido');
  late final GeneratedColumn<int?> fechaRecibido = GeneratedColumn<int?>(
      'fecha_recibido', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaVistoMeta = const VerificationMeta('fechaVisto');
  late final GeneratedColumn<int?> fechaVisto = GeneratedColumn<int?>(
      'fecha_visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRespuestaMeta =
      const VerificationMeta('fechaRespuesta');
  late final GeneratedColumn<int?> fechaRespuesta = GeneratedColumn<int?>(
      'fecha_respuesta', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _getSTimeMeta = const VerificationMeta('getSTime');
  late final GeneratedColumn<String?> getSTime = GeneratedColumn<String?>(
      'get_s_time', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        calendarioId,
        nombre,
        descripcion,
        estado,
        entidadId,
        georeferenciaId,
        nUsuario,
        cargo,
        usuarioId,
        cargaAcademicaId,
        cargaCursoId,
        estadoPublicaciN,
        estadoPublicacion,
        rolId,
        usuarioCreacionId,
        usuarioCreadorId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        fechaEnvio,
        fechaEntrega,
        fechaRecibido,
        fechaVisto,
        fechaRespuesta,
        getSTime
      ];
  @override
  String get aliasedName => _alias ?? 'calendario';
  @override
  String get actualTableName => 'calendario';
  @override
  VerificationContext validateIntegrity(Insertable<CalendarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('calendario_id')) {
      context.handle(
          _calendarioIdMeta,
          calendarioId.isAcceptableOrUnknown(
              data['calendario_id']!, _calendarioIdMeta));
    } else if (isInserting) {
      context.missing(_calendarioIdMeta);
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('n_usuario')) {
      context.handle(_nUsuarioMeta,
          nUsuario.isAcceptableOrUnknown(data['n_usuario']!, _nUsuarioMeta));
    }
    if (data.containsKey('cargo')) {
      context.handle(
          _cargoMeta, cargo.isAcceptableOrUnknown(data['cargo']!, _cargoMeta));
    }
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    }
    if (data.containsKey('carga_academica_id')) {
      context.handle(
          _cargaAcademicaIdMeta,
          cargaAcademicaId.isAcceptableOrUnknown(
              data['carga_academica_id']!, _cargaAcademicaIdMeta));
    }
    if (data.containsKey('carga_curso_id')) {
      context.handle(
          _cargaCursoIdMeta,
          cargaCursoId.isAcceptableOrUnknown(
              data['carga_curso_id']!, _cargaCursoIdMeta));
    }
    if (data.containsKey('estado_publicaci_n')) {
      context.handle(
          _estadoPublicaciNMeta,
          estadoPublicaciN.isAcceptableOrUnknown(
              data['estado_publicaci_n']!, _estadoPublicaciNMeta));
    }
    if (data.containsKey('estado_publicacion')) {
      context.handle(
          _estadoPublicacionMeta,
          estadoPublicacion.isAcceptableOrUnknown(
              data['estado_publicacion']!, _estadoPublicacionMeta));
    }
    if (data.containsKey('rol_id')) {
      context.handle(
          _rolIdMeta, rolId.isAcceptableOrUnknown(data['rol_id']!, _rolIdMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('usuario_creador_id')) {
      context.handle(
          _usuarioCreadorIdMeta,
          usuarioCreadorId.isAcceptableOrUnknown(
              data['usuario_creador_id']!, _usuarioCreadorIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('fecha_envio')) {
      context.handle(
          _fechaEnvioMeta,
          fechaEnvio.isAcceptableOrUnknown(
              data['fecha_envio']!, _fechaEnvioMeta));
    }
    if (data.containsKey('fecha_entrega')) {
      context.handle(
          _fechaEntregaMeta,
          fechaEntrega.isAcceptableOrUnknown(
              data['fecha_entrega']!, _fechaEntregaMeta));
    }
    if (data.containsKey('fecha_recibido')) {
      context.handle(
          _fechaRecibidoMeta,
          fechaRecibido.isAcceptableOrUnknown(
              data['fecha_recibido']!, _fechaRecibidoMeta));
    }
    if (data.containsKey('fecha_visto')) {
      context.handle(
          _fechaVistoMeta,
          fechaVisto.isAcceptableOrUnknown(
              data['fecha_visto']!, _fechaVistoMeta));
    }
    if (data.containsKey('fecha_respuesta')) {
      context.handle(
          _fechaRespuestaMeta,
          fechaRespuesta.isAcceptableOrUnknown(
              data['fecha_respuesta']!, _fechaRespuestaMeta));
    }
    if (data.containsKey('get_s_time')) {
      context.handle(_getSTimeMeta,
          getSTime.isAcceptableOrUnknown(data['get_s_time']!, _getSTimeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {calendarioId};
  @override
  CalendarioData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CalendarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CalendarioTable createAlias(String alias) {
    return $CalendarioTable(_db, alias);
  }
}

class CalendarioListaUsuarioData extends DataClass
    implements Insertable<CalendarioListaUsuarioData> {
  final String calendarioId;
  final int listaUsuarioId;
  CalendarioListaUsuarioData(
      {required this.calendarioId, required this.listaUsuarioId});
  factory CalendarioListaUsuarioData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CalendarioListaUsuarioData(
      calendarioId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}calendario_id'])!,
      listaUsuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lista_usuario_id'])!,
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['calendario_id'] = Variable<String>(calendarioId);
    map['lista_usuario_id'] = Variable<int>(listaUsuarioId);
    return map;
  }

  CalendarioListaUsuarioCompanion toCompanion(bool nullToAbsent) {
    return CalendarioListaUsuarioCompanion(
      calendarioId: Value(calendarioId),
      listaUsuarioId: Value(listaUsuarioId),
    );
  }

  factory CalendarioListaUsuarioData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CalendarioListaUsuarioData(
      calendarioId: serializer.fromJson<String>(json['calendarioId']),
      listaUsuarioId: serializer.fromJson<int>(json['listaUsuarioId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'calendarioId': serializer.toJson<String>(calendarioId),
      'listaUsuarioId': serializer.toJson<int>(listaUsuarioId),
    };
  }

  CalendarioListaUsuarioData copyWith(
          {String? calendarioId, int? listaUsuarioId}) =>
      CalendarioListaUsuarioData(
        calendarioId: calendarioId ?? this.calendarioId,
        listaUsuarioId: listaUsuarioId ?? this.listaUsuarioId,
      );
  @override
  String toString() {
    return (StringBuffer('CalendarioListaUsuarioData(')
          ..write('calendarioId: $calendarioId, ')
          ..write('listaUsuarioId: $listaUsuarioId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      $mrjf($mrjc(calendarioId.hashCode, listaUsuarioId.hashCode));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CalendarioListaUsuarioData &&
          other.calendarioId == this.calendarioId &&
          other.listaUsuarioId == this.listaUsuarioId);
}

class CalendarioListaUsuarioCompanion
    extends UpdateCompanion<CalendarioListaUsuarioData> {
  final Value<String> calendarioId;
  final Value<int> listaUsuarioId;
  const CalendarioListaUsuarioCompanion({
    this.calendarioId = const Value.absent(),
    this.listaUsuarioId = const Value.absent(),
  });
  CalendarioListaUsuarioCompanion.insert({
    required String calendarioId,
    required int listaUsuarioId,
  })  : calendarioId = Value(calendarioId),
        listaUsuarioId = Value(listaUsuarioId);
  static Insertable<CalendarioListaUsuarioData> custom({
    Expression<String>? calendarioId,
    Expression<int>? listaUsuarioId,
  }) {
    return RawValuesInsertable({
      if (calendarioId != null) 'calendario_id': calendarioId,
      if (listaUsuarioId != null) 'lista_usuario_id': listaUsuarioId,
    });
  }

  CalendarioListaUsuarioCompanion copyWith(
      {Value<String>? calendarioId, Value<int>? listaUsuarioId}) {
    return CalendarioListaUsuarioCompanion(
      calendarioId: calendarioId ?? this.calendarioId,
      listaUsuarioId: listaUsuarioId ?? this.listaUsuarioId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (calendarioId.present) {
      map['calendario_id'] = Variable<String>(calendarioId.value);
    }
    if (listaUsuarioId.present) {
      map['lista_usuario_id'] = Variable<int>(listaUsuarioId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CalendarioListaUsuarioCompanion(')
          ..write('calendarioId: $calendarioId, ')
          ..write('listaUsuarioId: $listaUsuarioId')
          ..write(')'))
        .toString();
  }
}

class $CalendarioListaUsuarioTable extends CalendarioListaUsuario
    with TableInfo<$CalendarioListaUsuarioTable, CalendarioListaUsuarioData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CalendarioListaUsuarioTable(this._db, [this._alias]);
  final VerificationMeta _calendarioIdMeta =
      const VerificationMeta('calendarioId');
  late final GeneratedColumn<String?> calendarioId = GeneratedColumn<String?>(
      'calendario_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _listaUsuarioIdMeta =
      const VerificationMeta('listaUsuarioId');
  late final GeneratedColumn<int?> listaUsuarioId = GeneratedColumn<int?>(
      'lista_usuario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [calendarioId, listaUsuarioId];
  @override
  String get aliasedName => _alias ?? 'calendario_lista_usuario';
  @override
  String get actualTableName => 'calendario_lista_usuario';
  @override
  VerificationContext validateIntegrity(
      Insertable<CalendarioListaUsuarioData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('calendario_id')) {
      context.handle(
          _calendarioIdMeta,
          calendarioId.isAcceptableOrUnknown(
              data['calendario_id']!, _calendarioIdMeta));
    } else if (isInserting) {
      context.missing(_calendarioIdMeta);
    }
    if (data.containsKey('lista_usuario_id')) {
      context.handle(
          _listaUsuarioIdMeta,
          listaUsuarioId.isAcceptableOrUnknown(
              data['lista_usuario_id']!, _listaUsuarioIdMeta));
    } else if (isInserting) {
      context.missing(_listaUsuarioIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {calendarioId, listaUsuarioId};
  @override
  CalendarioListaUsuarioData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return CalendarioListaUsuarioData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CalendarioListaUsuarioTable createAlias(String alias) {
    return $CalendarioListaUsuarioTable(_db, alias);
  }
}

class EventoData extends DataClass implements Insertable<EventoData> {
  final String eventoId;
  final String? titulo;
  final String? descripcion;
  final String? calendarioId;
  final int? tipoEventoId;
  final int? estadoId;
  final bool? estadoPublicacion;
  final int? entidadId;
  final int? georeferenciaId;
  final int? fechaEvento;
  final String? horaEvento;
  final bool? envioPersonalizado;
  final String? getSTime;
  final int? syncFlag;
  final int? usuarioReceptorId;
  final int? eventoHijoId;
  final String? key;
  final int? usuarioCreacionId;
  final int? usuarioCreadorId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? fechaEnvio;
  final int? fechaEntrega;
  final int? fechaRecibido;
  final int? fechaVisto;
  final int? fechaRespuesta;
  final String? pathImagen;
  final int? likeCount;
  final bool? like;
  final String? nombreEntidad;
  final String? fotoEntidad;
  EventoData(
      {required this.eventoId,
      this.titulo,
      this.descripcion,
      this.calendarioId,
      this.tipoEventoId,
      this.estadoId,
      this.estadoPublicacion,
      this.entidadId,
      this.georeferenciaId,
      this.fechaEvento,
      this.horaEvento,
      this.envioPersonalizado,
      this.getSTime,
      this.syncFlag,
      this.usuarioReceptorId,
      this.eventoHijoId,
      this.key,
      this.usuarioCreacionId,
      this.usuarioCreadorId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.fechaEnvio,
      this.fechaEntrega,
      this.fechaRecibido,
      this.fechaVisto,
      this.fechaRespuesta,
      this.pathImagen,
      this.likeCount,
      this.like,
      this.nombreEntidad,
      this.fotoEntidad});
  factory EventoData.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EventoData(
      eventoId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}evento_id'])!,
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      calendarioId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}calendario_id']),
      tipoEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_evento_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      estadoPublicacion: const BoolType().mapFromDatabaseResponse(
          data['${effectivePrefix}estado_publicacion']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      fechaEvento: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_evento']),
      horaEvento: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hora_evento']),
      envioPersonalizado: const BoolType().mapFromDatabaseResponse(
          data['${effectivePrefix}envio_personalizado']),
      getSTime: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}get_s_time']),
      syncFlag: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}sync_flag']),
      usuarioReceptorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_receptor_id']),
      eventoHijoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}evento_hijo_id']),
      key: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}key']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      usuarioCreadorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creador_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      fechaEnvio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_envio']),
      fechaEntrega: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_entrega']),
      fechaRecibido: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_recibido']),
      fechaVisto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_visto']),
      fechaRespuesta: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_respuesta']),
      pathImagen: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}path_imagen']),
      likeCount: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}like_count']),
      like: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}like']),
      nombreEntidad: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre_entidad']),
      fotoEntidad: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto_entidad']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['evento_id'] = Variable<String>(eventoId);
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || calendarioId != null) {
      map['calendario_id'] = Variable<String?>(calendarioId);
    }
    if (!nullToAbsent || tipoEventoId != null) {
      map['tipo_evento_id'] = Variable<int?>(tipoEventoId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || estadoPublicacion != null) {
      map['estado_publicacion'] = Variable<bool?>(estadoPublicacion);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || fechaEvento != null) {
      map['fecha_evento'] = Variable<int?>(fechaEvento);
    }
    if (!nullToAbsent || horaEvento != null) {
      map['hora_evento'] = Variable<String?>(horaEvento);
    }
    if (!nullToAbsent || envioPersonalizado != null) {
      map['envio_personalizado'] = Variable<bool?>(envioPersonalizado);
    }
    if (!nullToAbsent || getSTime != null) {
      map['get_s_time'] = Variable<String?>(getSTime);
    }
    if (!nullToAbsent || syncFlag != null) {
      map['sync_flag'] = Variable<int?>(syncFlag);
    }
    if (!nullToAbsent || usuarioReceptorId != null) {
      map['usuario_receptor_id'] = Variable<int?>(usuarioReceptorId);
    }
    if (!nullToAbsent || eventoHijoId != null) {
      map['evento_hijo_id'] = Variable<int?>(eventoHijoId);
    }
    if (!nullToAbsent || key != null) {
      map['key'] = Variable<String?>(key);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || usuarioCreadorId != null) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || fechaEnvio != null) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio);
    }
    if (!nullToAbsent || fechaEntrega != null) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega);
    }
    if (!nullToAbsent || fechaRecibido != null) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido);
    }
    if (!nullToAbsent || fechaVisto != null) {
      map['fecha_visto'] = Variable<int?>(fechaVisto);
    }
    if (!nullToAbsent || fechaRespuesta != null) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta);
    }
    if (!nullToAbsent || pathImagen != null) {
      map['path_imagen'] = Variable<String?>(pathImagen);
    }
    if (!nullToAbsent || likeCount != null) {
      map['like_count'] = Variable<int?>(likeCount);
    }
    if (!nullToAbsent || like != null) {
      map['like'] = Variable<bool?>(like);
    }
    if (!nullToAbsent || nombreEntidad != null) {
      map['nombre_entidad'] = Variable<String?>(nombreEntidad);
    }
    if (!nullToAbsent || fotoEntidad != null) {
      map['foto_entidad'] = Variable<String?>(fotoEntidad);
    }
    return map;
  }

  EventoCompanion toCompanion(bool nullToAbsent) {
    return EventoCompanion(
      eventoId: Value(eventoId),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      calendarioId: calendarioId == null && nullToAbsent
          ? const Value.absent()
          : Value(calendarioId),
      tipoEventoId: tipoEventoId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEventoId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      estadoPublicacion: estadoPublicacion == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoPublicacion),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      fechaEvento: fechaEvento == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEvento),
      horaEvento: horaEvento == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEvento),
      envioPersonalizado: envioPersonalizado == null && nullToAbsent
          ? const Value.absent()
          : Value(envioPersonalizado),
      getSTime: getSTime == null && nullToAbsent
          ? const Value.absent()
          : Value(getSTime),
      syncFlag: syncFlag == null && nullToAbsent
          ? const Value.absent()
          : Value(syncFlag),
      usuarioReceptorId: usuarioReceptorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioReceptorId),
      eventoHijoId: eventoHijoId == null && nullToAbsent
          ? const Value.absent()
          : Value(eventoHijoId),
      key: key == null && nullToAbsent ? const Value.absent() : Value(key),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      usuarioCreadorId: usuarioCreadorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreadorId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      fechaEnvio: fechaEnvio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEnvio),
      fechaEntrega: fechaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEntrega),
      fechaRecibido: fechaRecibido == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRecibido),
      fechaVisto: fechaVisto == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaVisto),
      fechaRespuesta: fechaRespuesta == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRespuesta),
      pathImagen: pathImagen == null && nullToAbsent
          ? const Value.absent()
          : Value(pathImagen),
      likeCount: likeCount == null && nullToAbsent
          ? const Value.absent()
          : Value(likeCount),
      like: like == null && nullToAbsent ? const Value.absent() : Value(like),
      nombreEntidad: nombreEntidad == null && nullToAbsent
          ? const Value.absent()
          : Value(nombreEntidad),
      fotoEntidad: fotoEntidad == null && nullToAbsent
          ? const Value.absent()
          : Value(fotoEntidad),
    );
  }

  factory EventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EventoData(
      eventoId: serializer.fromJson<String>(json['eventoId']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      calendarioId: serializer.fromJson<String?>(json['calendarioId']),
      tipoEventoId: serializer.fromJson<int?>(json['tipoEventoId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      estadoPublicacion: serializer.fromJson<bool?>(json['estadoPublicacion']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      fechaEvento: serializer.fromJson<int?>(json['fechaEvento']),
      horaEvento: serializer.fromJson<String?>(json['horaEvento']),
      envioPersonalizado:
          serializer.fromJson<bool?>(json['envioPersonalizado']),
      getSTime: serializer.fromJson<String?>(json['getSTime']),
      syncFlag: serializer.fromJson<int?>(json['syncFlag']),
      usuarioReceptorId: serializer.fromJson<int?>(json['usuarioReceptorId']),
      eventoHijoId: serializer.fromJson<int?>(json['eventoHijoId']),
      key: serializer.fromJson<String?>(json['key']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      usuarioCreadorId: serializer.fromJson<int?>(json['usuarioCreadorId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      fechaEnvio: serializer.fromJson<int?>(json['fechaEnvio']),
      fechaEntrega: serializer.fromJson<int?>(json['fechaEntrega']),
      fechaRecibido: serializer.fromJson<int?>(json['fechaRecibido']),
      fechaVisto: serializer.fromJson<int?>(json['fechaVisto']),
      fechaRespuesta: serializer.fromJson<int?>(json['fechaRespuesta']),
      pathImagen: serializer.fromJson<String?>(json['pathImagen']),
      likeCount: serializer.fromJson<int?>(json['likeCount']),
      like: serializer.fromJson<bool?>(json['like']),
      nombreEntidad: serializer.fromJson<String?>(json['nombreEntidad']),
      fotoEntidad: serializer.fromJson<String?>(json['fotoEntidad']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'eventoId': serializer.toJson<String>(eventoId),
      'titulo': serializer.toJson<String?>(titulo),
      'descripcion': serializer.toJson<String?>(descripcion),
      'calendarioId': serializer.toJson<String?>(calendarioId),
      'tipoEventoId': serializer.toJson<int?>(tipoEventoId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'estadoPublicacion': serializer.toJson<bool?>(estadoPublicacion),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'fechaEvento': serializer.toJson<int?>(fechaEvento),
      'horaEvento': serializer.toJson<String?>(horaEvento),
      'envioPersonalizado': serializer.toJson<bool?>(envioPersonalizado),
      'getSTime': serializer.toJson<String?>(getSTime),
      'syncFlag': serializer.toJson<int?>(syncFlag),
      'usuarioReceptorId': serializer.toJson<int?>(usuarioReceptorId),
      'eventoHijoId': serializer.toJson<int?>(eventoHijoId),
      'key': serializer.toJson<String?>(key),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'usuarioCreadorId': serializer.toJson<int?>(usuarioCreadorId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'fechaEnvio': serializer.toJson<int?>(fechaEnvio),
      'fechaEntrega': serializer.toJson<int?>(fechaEntrega),
      'fechaRecibido': serializer.toJson<int?>(fechaRecibido),
      'fechaVisto': serializer.toJson<int?>(fechaVisto),
      'fechaRespuesta': serializer.toJson<int?>(fechaRespuesta),
      'pathImagen': serializer.toJson<String?>(pathImagen),
      'likeCount': serializer.toJson<int?>(likeCount),
      'like': serializer.toJson<bool?>(like),
      'nombreEntidad': serializer.toJson<String?>(nombreEntidad),
      'fotoEntidad': serializer.toJson<String?>(fotoEntidad),
    };
  }

  EventoData copyWith(
          {String? eventoId,
          String? titulo,
          String? descripcion,
          String? calendarioId,
          int? tipoEventoId,
          int? estadoId,
          bool? estadoPublicacion,
          int? entidadId,
          int? georeferenciaId,
          int? fechaEvento,
          String? horaEvento,
          bool? envioPersonalizado,
          String? getSTime,
          int? syncFlag,
          int? usuarioReceptorId,
          int? eventoHijoId,
          String? key,
          int? usuarioCreacionId,
          int? usuarioCreadorId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? fechaEnvio,
          int? fechaEntrega,
          int? fechaRecibido,
          int? fechaVisto,
          int? fechaRespuesta,
          String? pathImagen,
          int? likeCount,
          bool? like,
          String? nombreEntidad,
          String? fotoEntidad}) =>
      EventoData(
        eventoId: eventoId ?? this.eventoId,
        titulo: titulo ?? this.titulo,
        descripcion: descripcion ?? this.descripcion,
        calendarioId: calendarioId ?? this.calendarioId,
        tipoEventoId: tipoEventoId ?? this.tipoEventoId,
        estadoId: estadoId ?? this.estadoId,
        estadoPublicacion: estadoPublicacion ?? this.estadoPublicacion,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        fechaEvento: fechaEvento ?? this.fechaEvento,
        horaEvento: horaEvento ?? this.horaEvento,
        envioPersonalizado: envioPersonalizado ?? this.envioPersonalizado,
        getSTime: getSTime ?? this.getSTime,
        syncFlag: syncFlag ?? this.syncFlag,
        usuarioReceptorId: usuarioReceptorId ?? this.usuarioReceptorId,
        eventoHijoId: eventoHijoId ?? this.eventoHijoId,
        key: key ?? this.key,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        fechaEnvio: fechaEnvio ?? this.fechaEnvio,
        fechaEntrega: fechaEntrega ?? this.fechaEntrega,
        fechaRecibido: fechaRecibido ?? this.fechaRecibido,
        fechaVisto: fechaVisto ?? this.fechaVisto,
        fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
        pathImagen: pathImagen ?? this.pathImagen,
        likeCount: likeCount ?? this.likeCount,
        like: like ?? this.like,
        nombreEntidad: nombreEntidad ?? this.nombreEntidad,
        fotoEntidad: fotoEntidad ?? this.fotoEntidad,
      );
  @override
  String toString() {
    return (StringBuffer('EventoData(')
          ..write('eventoId: $eventoId, ')
          ..write('titulo: $titulo, ')
          ..write('descripcion: $descripcion, ')
          ..write('calendarioId: $calendarioId, ')
          ..write('tipoEventoId: $tipoEventoId, ')
          ..write('estadoId: $estadoId, ')
          ..write('estadoPublicacion: $estadoPublicacion, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('fechaEvento: $fechaEvento, ')
          ..write('horaEvento: $horaEvento, ')
          ..write('envioPersonalizado: $envioPersonalizado, ')
          ..write('getSTime: $getSTime, ')
          ..write('syncFlag: $syncFlag, ')
          ..write('usuarioReceptorId: $usuarioReceptorId, ')
          ..write('eventoHijoId: $eventoHijoId, ')
          ..write('key: $key, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('pathImagen: $pathImagen, ')
          ..write('likeCount: $likeCount, ')
          ..write('like: $like, ')
          ..write('nombreEntidad: $nombreEntidad, ')
          ..write('fotoEntidad: $fotoEntidad')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      eventoId.hashCode,
      $mrjc(
          titulo.hashCode,
          $mrjc(
              descripcion.hashCode,
              $mrjc(
                  calendarioId.hashCode,
                  $mrjc(
                      tipoEventoId.hashCode,
                      $mrjc(
                          estadoId.hashCode,
                          $mrjc(
                              estadoPublicacion.hashCode,
                              $mrjc(
                                  entidadId.hashCode,
                                  $mrjc(
                                      georeferenciaId.hashCode,
                                      $mrjc(
                                          fechaEvento.hashCode,
                                          $mrjc(
                                              horaEvento.hashCode,
                                              $mrjc(
                                                  envioPersonalizado.hashCode,
                                                  $mrjc(
                                                      getSTime.hashCode,
                                                      $mrjc(
                                                          syncFlag.hashCode,
                                                          $mrjc(
                                                              usuarioReceptorId
                                                                  .hashCode,
                                                              $mrjc(
                                                                  eventoHijoId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      key
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          usuarioCreacionId
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              usuarioCreadorId.hashCode,
                                                                              $mrjc(fechaCreacion.hashCode, $mrjc(usuarioAccionId.hashCode, $mrjc(fechaAccion.hashCode, $mrjc(fechaEnvio.hashCode, $mrjc(fechaEntrega.hashCode, $mrjc(fechaRecibido.hashCode, $mrjc(fechaVisto.hashCode, $mrjc(fechaRespuesta.hashCode, $mrjc(pathImagen.hashCode, $mrjc(likeCount.hashCode, $mrjc(like.hashCode, $mrjc(nombreEntidad.hashCode, fotoEntidad.hashCode))))))))))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EventoData &&
          other.eventoId == this.eventoId &&
          other.titulo == this.titulo &&
          other.descripcion == this.descripcion &&
          other.calendarioId == this.calendarioId &&
          other.tipoEventoId == this.tipoEventoId &&
          other.estadoId == this.estadoId &&
          other.estadoPublicacion == this.estadoPublicacion &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.fechaEvento == this.fechaEvento &&
          other.horaEvento == this.horaEvento &&
          other.envioPersonalizado == this.envioPersonalizado &&
          other.getSTime == this.getSTime &&
          other.syncFlag == this.syncFlag &&
          other.usuarioReceptorId == this.usuarioReceptorId &&
          other.eventoHijoId == this.eventoHijoId &&
          other.key == this.key &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.usuarioCreadorId == this.usuarioCreadorId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.fechaEnvio == this.fechaEnvio &&
          other.fechaEntrega == this.fechaEntrega &&
          other.fechaRecibido == this.fechaRecibido &&
          other.fechaVisto == this.fechaVisto &&
          other.fechaRespuesta == this.fechaRespuesta &&
          other.pathImagen == this.pathImagen &&
          other.likeCount == this.likeCount &&
          other.like == this.like &&
          other.nombreEntidad == this.nombreEntidad &&
          other.fotoEntidad == this.fotoEntidad);
}

class EventoCompanion extends UpdateCompanion<EventoData> {
  final Value<String> eventoId;
  final Value<String?> titulo;
  final Value<String?> descripcion;
  final Value<String?> calendarioId;
  final Value<int?> tipoEventoId;
  final Value<int?> estadoId;
  final Value<bool?> estadoPublicacion;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  final Value<int?> fechaEvento;
  final Value<String?> horaEvento;
  final Value<bool?> envioPersonalizado;
  final Value<String?> getSTime;
  final Value<int?> syncFlag;
  final Value<int?> usuarioReceptorId;
  final Value<int?> eventoHijoId;
  final Value<String?> key;
  final Value<int?> usuarioCreacionId;
  final Value<int?> usuarioCreadorId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> fechaEnvio;
  final Value<int?> fechaEntrega;
  final Value<int?> fechaRecibido;
  final Value<int?> fechaVisto;
  final Value<int?> fechaRespuesta;
  final Value<String?> pathImagen;
  final Value<int?> likeCount;
  final Value<bool?> like;
  final Value<String?> nombreEntidad;
  final Value<String?> fotoEntidad;
  const EventoCompanion({
    this.eventoId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.calendarioId = const Value.absent(),
    this.tipoEventoId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.estadoPublicacion = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.fechaEvento = const Value.absent(),
    this.horaEvento = const Value.absent(),
    this.envioPersonalizado = const Value.absent(),
    this.getSTime = const Value.absent(),
    this.syncFlag = const Value.absent(),
    this.usuarioReceptorId = const Value.absent(),
    this.eventoHijoId = const Value.absent(),
    this.key = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.pathImagen = const Value.absent(),
    this.likeCount = const Value.absent(),
    this.like = const Value.absent(),
    this.nombreEntidad = const Value.absent(),
    this.fotoEntidad = const Value.absent(),
  });
  EventoCompanion.insert({
    required String eventoId,
    this.titulo = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.calendarioId = const Value.absent(),
    this.tipoEventoId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.estadoPublicacion = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.fechaEvento = const Value.absent(),
    this.horaEvento = const Value.absent(),
    this.envioPersonalizado = const Value.absent(),
    this.getSTime = const Value.absent(),
    this.syncFlag = const Value.absent(),
    this.usuarioReceptorId = const Value.absent(),
    this.eventoHijoId = const Value.absent(),
    this.key = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.pathImagen = const Value.absent(),
    this.likeCount = const Value.absent(),
    this.like = const Value.absent(),
    this.nombreEntidad = const Value.absent(),
    this.fotoEntidad = const Value.absent(),
  }) : eventoId = Value(eventoId);
  static Insertable<EventoData> custom({
    Expression<String>? eventoId,
    Expression<String?>? titulo,
    Expression<String?>? descripcion,
    Expression<String?>? calendarioId,
    Expression<int?>? tipoEventoId,
    Expression<int?>? estadoId,
    Expression<bool?>? estadoPublicacion,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
    Expression<int?>? fechaEvento,
    Expression<String?>? horaEvento,
    Expression<bool?>? envioPersonalizado,
    Expression<String?>? getSTime,
    Expression<int?>? syncFlag,
    Expression<int?>? usuarioReceptorId,
    Expression<int?>? eventoHijoId,
    Expression<String?>? key,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? usuarioCreadorId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? fechaEnvio,
    Expression<int?>? fechaEntrega,
    Expression<int?>? fechaRecibido,
    Expression<int?>? fechaVisto,
    Expression<int?>? fechaRespuesta,
    Expression<String?>? pathImagen,
    Expression<int?>? likeCount,
    Expression<bool?>? like,
    Expression<String?>? nombreEntidad,
    Expression<String?>? fotoEntidad,
  }) {
    return RawValuesInsertable({
      if (eventoId != null) 'evento_id': eventoId,
      if (titulo != null) 'titulo': titulo,
      if (descripcion != null) 'descripcion': descripcion,
      if (calendarioId != null) 'calendario_id': calendarioId,
      if (tipoEventoId != null) 'tipo_evento_id': tipoEventoId,
      if (estadoId != null) 'estado_id': estadoId,
      if (estadoPublicacion != null) 'estado_publicacion': estadoPublicacion,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (fechaEvento != null) 'fecha_evento': fechaEvento,
      if (horaEvento != null) 'hora_evento': horaEvento,
      if (envioPersonalizado != null) 'envio_personalizado': envioPersonalizado,
      if (getSTime != null) 'get_s_time': getSTime,
      if (syncFlag != null) 'sync_flag': syncFlag,
      if (usuarioReceptorId != null) 'usuario_receptor_id': usuarioReceptorId,
      if (eventoHijoId != null) 'evento_hijo_id': eventoHijoId,
      if (key != null) 'key': key,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (usuarioCreadorId != null) 'usuario_creador_id': usuarioCreadorId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (fechaEnvio != null) 'fecha_envio': fechaEnvio,
      if (fechaEntrega != null) 'fecha_entrega': fechaEntrega,
      if (fechaRecibido != null) 'fecha_recibido': fechaRecibido,
      if (fechaVisto != null) 'fecha_visto': fechaVisto,
      if (fechaRespuesta != null) 'fecha_respuesta': fechaRespuesta,
      if (pathImagen != null) 'path_imagen': pathImagen,
      if (likeCount != null) 'like_count': likeCount,
      if (like != null) 'like': like,
      if (nombreEntidad != null) 'nombre_entidad': nombreEntidad,
      if (fotoEntidad != null) 'foto_entidad': fotoEntidad,
    });
  }

  EventoCompanion copyWith(
      {Value<String>? eventoId,
      Value<String?>? titulo,
      Value<String?>? descripcion,
      Value<String?>? calendarioId,
      Value<int?>? tipoEventoId,
      Value<int?>? estadoId,
      Value<bool?>? estadoPublicacion,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId,
      Value<int?>? fechaEvento,
      Value<String?>? horaEvento,
      Value<bool?>? envioPersonalizado,
      Value<String?>? getSTime,
      Value<int?>? syncFlag,
      Value<int?>? usuarioReceptorId,
      Value<int?>? eventoHijoId,
      Value<String?>? key,
      Value<int?>? usuarioCreacionId,
      Value<int?>? usuarioCreadorId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? fechaEnvio,
      Value<int?>? fechaEntrega,
      Value<int?>? fechaRecibido,
      Value<int?>? fechaVisto,
      Value<int?>? fechaRespuesta,
      Value<String?>? pathImagen,
      Value<int?>? likeCount,
      Value<bool?>? like,
      Value<String?>? nombreEntidad,
      Value<String?>? fotoEntidad}) {
    return EventoCompanion(
      eventoId: eventoId ?? this.eventoId,
      titulo: titulo ?? this.titulo,
      descripcion: descripcion ?? this.descripcion,
      calendarioId: calendarioId ?? this.calendarioId,
      tipoEventoId: tipoEventoId ?? this.tipoEventoId,
      estadoId: estadoId ?? this.estadoId,
      estadoPublicacion: estadoPublicacion ?? this.estadoPublicacion,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      fechaEvento: fechaEvento ?? this.fechaEvento,
      horaEvento: horaEvento ?? this.horaEvento,
      envioPersonalizado: envioPersonalizado ?? this.envioPersonalizado,
      getSTime: getSTime ?? this.getSTime,
      syncFlag: syncFlag ?? this.syncFlag,
      usuarioReceptorId: usuarioReceptorId ?? this.usuarioReceptorId,
      eventoHijoId: eventoHijoId ?? this.eventoHijoId,
      key: key ?? this.key,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      fechaEnvio: fechaEnvio ?? this.fechaEnvio,
      fechaEntrega: fechaEntrega ?? this.fechaEntrega,
      fechaRecibido: fechaRecibido ?? this.fechaRecibido,
      fechaVisto: fechaVisto ?? this.fechaVisto,
      fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
      pathImagen: pathImagen ?? this.pathImagen,
      likeCount: likeCount ?? this.likeCount,
      like: like ?? this.like,
      nombreEntidad: nombreEntidad ?? this.nombreEntidad,
      fotoEntidad: fotoEntidad ?? this.fotoEntidad,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (eventoId.present) {
      map['evento_id'] = Variable<String>(eventoId.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (calendarioId.present) {
      map['calendario_id'] = Variable<String?>(calendarioId.value);
    }
    if (tipoEventoId.present) {
      map['tipo_evento_id'] = Variable<int?>(tipoEventoId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (estadoPublicacion.present) {
      map['estado_publicacion'] = Variable<bool?>(estadoPublicacion.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (fechaEvento.present) {
      map['fecha_evento'] = Variable<int?>(fechaEvento.value);
    }
    if (horaEvento.present) {
      map['hora_evento'] = Variable<String?>(horaEvento.value);
    }
    if (envioPersonalizado.present) {
      map['envio_personalizado'] = Variable<bool?>(envioPersonalizado.value);
    }
    if (getSTime.present) {
      map['get_s_time'] = Variable<String?>(getSTime.value);
    }
    if (syncFlag.present) {
      map['sync_flag'] = Variable<int?>(syncFlag.value);
    }
    if (usuarioReceptorId.present) {
      map['usuario_receptor_id'] = Variable<int?>(usuarioReceptorId.value);
    }
    if (eventoHijoId.present) {
      map['evento_hijo_id'] = Variable<int?>(eventoHijoId.value);
    }
    if (key.present) {
      map['key'] = Variable<String?>(key.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (usuarioCreadorId.present) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (fechaEnvio.present) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio.value);
    }
    if (fechaEntrega.present) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega.value);
    }
    if (fechaRecibido.present) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido.value);
    }
    if (fechaVisto.present) {
      map['fecha_visto'] = Variable<int?>(fechaVisto.value);
    }
    if (fechaRespuesta.present) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta.value);
    }
    if (pathImagen.present) {
      map['path_imagen'] = Variable<String?>(pathImagen.value);
    }
    if (likeCount.present) {
      map['like_count'] = Variable<int?>(likeCount.value);
    }
    if (like.present) {
      map['like'] = Variable<bool?>(like.value);
    }
    if (nombreEntidad.present) {
      map['nombre_entidad'] = Variable<String?>(nombreEntidad.value);
    }
    if (fotoEntidad.present) {
      map['foto_entidad'] = Variable<String?>(fotoEntidad.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EventoCompanion(')
          ..write('eventoId: $eventoId, ')
          ..write('titulo: $titulo, ')
          ..write('descripcion: $descripcion, ')
          ..write('calendarioId: $calendarioId, ')
          ..write('tipoEventoId: $tipoEventoId, ')
          ..write('estadoId: $estadoId, ')
          ..write('estadoPublicacion: $estadoPublicacion, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('fechaEvento: $fechaEvento, ')
          ..write('horaEvento: $horaEvento, ')
          ..write('envioPersonalizado: $envioPersonalizado, ')
          ..write('getSTime: $getSTime, ')
          ..write('syncFlag: $syncFlag, ')
          ..write('usuarioReceptorId: $usuarioReceptorId, ')
          ..write('eventoHijoId: $eventoHijoId, ')
          ..write('key: $key, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('pathImagen: $pathImagen, ')
          ..write('likeCount: $likeCount, ')
          ..write('like: $like, ')
          ..write('nombreEntidad: $nombreEntidad, ')
          ..write('fotoEntidad: $fotoEntidad')
          ..write(')'))
        .toString();
  }
}

class $EventoTable extends Evento with TableInfo<$EventoTable, EventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $EventoTable(this._db, [this._alias]);
  final VerificationMeta _eventoIdMeta = const VerificationMeta('eventoId');
  late final GeneratedColumn<String?> eventoId = GeneratedColumn<String?>(
      'evento_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _calendarioIdMeta =
      const VerificationMeta('calendarioId');
  late final GeneratedColumn<String?> calendarioId = GeneratedColumn<String?>(
      'calendario_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoEventoIdMeta =
      const VerificationMeta('tipoEventoId');
  late final GeneratedColumn<int?> tipoEventoId = GeneratedColumn<int?>(
      'tipo_evento_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoPublicacionMeta =
      const VerificationMeta('estadoPublicacion');
  late final GeneratedColumn<bool?> estadoPublicacion = GeneratedColumn<bool?>(
      'estado_publicacion', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado_publicacion IN (0, 1))');
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEventoMeta =
      const VerificationMeta('fechaEvento');
  late final GeneratedColumn<int?> fechaEvento = GeneratedColumn<int?>(
      'fecha_evento', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _horaEventoMeta = const VerificationMeta('horaEvento');
  late final GeneratedColumn<String?> horaEvento = GeneratedColumn<String?>(
      'hora_evento', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _envioPersonalizadoMeta =
      const VerificationMeta('envioPersonalizado');
  late final GeneratedColumn<bool?> envioPersonalizado = GeneratedColumn<bool?>(
      'envio_personalizado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (envio_personalizado IN (0, 1))');
  final VerificationMeta _getSTimeMeta = const VerificationMeta('getSTime');
  late final GeneratedColumn<String?> getSTime = GeneratedColumn<String?>(
      'get_s_time', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _syncFlagMeta = const VerificationMeta('syncFlag');
  late final GeneratedColumn<int?> syncFlag = GeneratedColumn<int?>(
      'sync_flag', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioReceptorIdMeta =
      const VerificationMeta('usuarioReceptorId');
  late final GeneratedColumn<int?> usuarioReceptorId = GeneratedColumn<int?>(
      'usuario_receptor_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _eventoHijoIdMeta =
      const VerificationMeta('eventoHijoId');
  late final GeneratedColumn<int?> eventoHijoId = GeneratedColumn<int?>(
      'evento_hijo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _keyMeta = const VerificationMeta('key');
  late final GeneratedColumn<String?> key = GeneratedColumn<String?>(
      'key', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreadorIdMeta =
      const VerificationMeta('usuarioCreadorId');
  late final GeneratedColumn<int?> usuarioCreadorId = GeneratedColumn<int?>(
      'usuario_creador_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEnvioMeta = const VerificationMeta('fechaEnvio');
  late final GeneratedColumn<int?> fechaEnvio = GeneratedColumn<int?>(
      'fecha_envio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEntregaMeta =
      const VerificationMeta('fechaEntrega');
  late final GeneratedColumn<int?> fechaEntrega = GeneratedColumn<int?>(
      'fecha_entrega', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRecibidoMeta =
      const VerificationMeta('fechaRecibido');
  late final GeneratedColumn<int?> fechaRecibido = GeneratedColumn<int?>(
      'fecha_recibido', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaVistoMeta = const VerificationMeta('fechaVisto');
  late final GeneratedColumn<int?> fechaVisto = GeneratedColumn<int?>(
      'fecha_visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRespuestaMeta =
      const VerificationMeta('fechaRespuesta');
  late final GeneratedColumn<int?> fechaRespuesta = GeneratedColumn<int?>(
      'fecha_respuesta', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _pathImagenMeta = const VerificationMeta('pathImagen');
  late final GeneratedColumn<String?> pathImagen = GeneratedColumn<String?>(
      'path_imagen', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _likeCountMeta = const VerificationMeta('likeCount');
  late final GeneratedColumn<int?> likeCount = GeneratedColumn<int?>(
      'like_count', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _likeMeta = const VerificationMeta('like');
  late final GeneratedColumn<bool?> like = GeneratedColumn<bool?>(
      'like', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK ("like" IN (0, 1))');
  final VerificationMeta _nombreEntidadMeta =
      const VerificationMeta('nombreEntidad');
  late final GeneratedColumn<String?> nombreEntidad = GeneratedColumn<String?>(
      'nombre_entidad', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fotoEntidadMeta =
      const VerificationMeta('fotoEntidad');
  late final GeneratedColumn<String?> fotoEntidad = GeneratedColumn<String?>(
      'foto_entidad', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        eventoId,
        titulo,
        descripcion,
        calendarioId,
        tipoEventoId,
        estadoId,
        estadoPublicacion,
        entidadId,
        georeferenciaId,
        fechaEvento,
        horaEvento,
        envioPersonalizado,
        getSTime,
        syncFlag,
        usuarioReceptorId,
        eventoHijoId,
        key,
        usuarioCreacionId,
        usuarioCreadorId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        fechaEnvio,
        fechaEntrega,
        fechaRecibido,
        fechaVisto,
        fechaRespuesta,
        pathImagen,
        likeCount,
        like,
        nombreEntidad,
        fotoEntidad
      ];
  @override
  String get aliasedName => _alias ?? 'evento';
  @override
  String get actualTableName => 'evento';
  @override
  VerificationContext validateIntegrity(Insertable<EventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('evento_id')) {
      context.handle(_eventoIdMeta,
          eventoId.isAcceptableOrUnknown(data['evento_id']!, _eventoIdMeta));
    } else if (isInserting) {
      context.missing(_eventoIdMeta);
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('calendario_id')) {
      context.handle(
          _calendarioIdMeta,
          calendarioId.isAcceptableOrUnknown(
              data['calendario_id']!, _calendarioIdMeta));
    }
    if (data.containsKey('tipo_evento_id')) {
      context.handle(
          _tipoEventoIdMeta,
          tipoEventoId.isAcceptableOrUnknown(
              data['tipo_evento_id']!, _tipoEventoIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('estado_publicacion')) {
      context.handle(
          _estadoPublicacionMeta,
          estadoPublicacion.isAcceptableOrUnknown(
              data['estado_publicacion']!, _estadoPublicacionMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('fecha_evento')) {
      context.handle(
          _fechaEventoMeta,
          fechaEvento.isAcceptableOrUnknown(
              data['fecha_evento']!, _fechaEventoMeta));
    }
    if (data.containsKey('hora_evento')) {
      context.handle(
          _horaEventoMeta,
          horaEvento.isAcceptableOrUnknown(
              data['hora_evento']!, _horaEventoMeta));
    }
    if (data.containsKey('envio_personalizado')) {
      context.handle(
          _envioPersonalizadoMeta,
          envioPersonalizado.isAcceptableOrUnknown(
              data['envio_personalizado']!, _envioPersonalizadoMeta));
    }
    if (data.containsKey('get_s_time')) {
      context.handle(_getSTimeMeta,
          getSTime.isAcceptableOrUnknown(data['get_s_time']!, _getSTimeMeta));
    }
    if (data.containsKey('sync_flag')) {
      context.handle(_syncFlagMeta,
          syncFlag.isAcceptableOrUnknown(data['sync_flag']!, _syncFlagMeta));
    }
    if (data.containsKey('usuario_receptor_id')) {
      context.handle(
          _usuarioReceptorIdMeta,
          usuarioReceptorId.isAcceptableOrUnknown(
              data['usuario_receptor_id']!, _usuarioReceptorIdMeta));
    }
    if (data.containsKey('evento_hijo_id')) {
      context.handle(
          _eventoHijoIdMeta,
          eventoHijoId.isAcceptableOrUnknown(
              data['evento_hijo_id']!, _eventoHijoIdMeta));
    }
    if (data.containsKey('key')) {
      context.handle(
          _keyMeta, key.isAcceptableOrUnknown(data['key']!, _keyMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('usuario_creador_id')) {
      context.handle(
          _usuarioCreadorIdMeta,
          usuarioCreadorId.isAcceptableOrUnknown(
              data['usuario_creador_id']!, _usuarioCreadorIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('fecha_envio')) {
      context.handle(
          _fechaEnvioMeta,
          fechaEnvio.isAcceptableOrUnknown(
              data['fecha_envio']!, _fechaEnvioMeta));
    }
    if (data.containsKey('fecha_entrega')) {
      context.handle(
          _fechaEntregaMeta,
          fechaEntrega.isAcceptableOrUnknown(
              data['fecha_entrega']!, _fechaEntregaMeta));
    }
    if (data.containsKey('fecha_recibido')) {
      context.handle(
          _fechaRecibidoMeta,
          fechaRecibido.isAcceptableOrUnknown(
              data['fecha_recibido']!, _fechaRecibidoMeta));
    }
    if (data.containsKey('fecha_visto')) {
      context.handle(
          _fechaVistoMeta,
          fechaVisto.isAcceptableOrUnknown(
              data['fecha_visto']!, _fechaVistoMeta));
    }
    if (data.containsKey('fecha_respuesta')) {
      context.handle(
          _fechaRespuestaMeta,
          fechaRespuesta.isAcceptableOrUnknown(
              data['fecha_respuesta']!, _fechaRespuestaMeta));
    }
    if (data.containsKey('path_imagen')) {
      context.handle(
          _pathImagenMeta,
          pathImagen.isAcceptableOrUnknown(
              data['path_imagen']!, _pathImagenMeta));
    }
    if (data.containsKey('like_count')) {
      context.handle(_likeCountMeta,
          likeCount.isAcceptableOrUnknown(data['like_count']!, _likeCountMeta));
    }
    if (data.containsKey('like')) {
      context.handle(
          _likeMeta, like.isAcceptableOrUnknown(data['like']!, _likeMeta));
    }
    if (data.containsKey('nombre_entidad')) {
      context.handle(
          _nombreEntidadMeta,
          nombreEntidad.isAcceptableOrUnknown(
              data['nombre_entidad']!, _nombreEntidadMeta));
    }
    if (data.containsKey('foto_entidad')) {
      context.handle(
          _fotoEntidadMeta,
          fotoEntidad.isAcceptableOrUnknown(
              data['foto_entidad']!, _fotoEntidadMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => <GeneratedColumn>{};
  @override
  EventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EventoTable createAlias(String alias) {
    return $EventoTable(_db, alias);
  }
}

class EventoPersonaData extends DataClass
    implements Insertable<EventoPersonaData> {
  final String eventoPersonaId;
  final String? eventoId;
  final int? personaId;
  final bool? estado;
  final int? rolId;
  final int? apoderadoId;
  final String? key;
  final int? usuarioCreacionId;
  final int? usuarioCreadorId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? fechaEnvio;
  final int? fechaEntrega;
  final int? fechaRecibido;
  final int? fechaVisto;
  final int? fechaRespuesta;
  final String? getSTime;
  EventoPersonaData(
      {required this.eventoPersonaId,
      this.eventoId,
      this.personaId,
      this.estado,
      this.rolId,
      this.apoderadoId,
      this.key,
      this.usuarioCreacionId,
      this.usuarioCreadorId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.fechaEnvio,
      this.fechaEntrega,
      this.fechaRecibido,
      this.fechaVisto,
      this.fechaRespuesta,
      this.getSTime});
  factory EventoPersonaData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EventoPersonaData(
      eventoPersonaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}evento_persona_id'])!,
      eventoId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}evento_id']),
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      rolId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rol_id']),
      apoderadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apoderado_id']),
      key: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}key']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      usuarioCreadorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creador_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      fechaEnvio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_envio']),
      fechaEntrega: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_entrega']),
      fechaRecibido: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_recibido']),
      fechaVisto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_visto']),
      fechaRespuesta: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_respuesta']),
      getSTime: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}get_s_time']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['evento_persona_id'] = Variable<String>(eventoPersonaId);
    if (!nullToAbsent || eventoId != null) {
      map['evento_id'] = Variable<String?>(eventoId);
    }
    if (!nullToAbsent || personaId != null) {
      map['persona_id'] = Variable<int?>(personaId);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || rolId != null) {
      map['rol_id'] = Variable<int?>(rolId);
    }
    if (!nullToAbsent || apoderadoId != null) {
      map['apoderado_id'] = Variable<int?>(apoderadoId);
    }
    if (!nullToAbsent || key != null) {
      map['key'] = Variable<String?>(key);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || usuarioCreadorId != null) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || fechaEnvio != null) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio);
    }
    if (!nullToAbsent || fechaEntrega != null) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega);
    }
    if (!nullToAbsent || fechaRecibido != null) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido);
    }
    if (!nullToAbsent || fechaVisto != null) {
      map['fecha_visto'] = Variable<int?>(fechaVisto);
    }
    if (!nullToAbsent || fechaRespuesta != null) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta);
    }
    if (!nullToAbsent || getSTime != null) {
      map['get_s_time'] = Variable<String?>(getSTime);
    }
    return map;
  }

  EventoPersonaCompanion toCompanion(bool nullToAbsent) {
    return EventoPersonaCompanion(
      eventoPersonaId: Value(eventoPersonaId),
      eventoId: eventoId == null && nullToAbsent
          ? const Value.absent()
          : Value(eventoId),
      personaId: personaId == null && nullToAbsent
          ? const Value.absent()
          : Value(personaId),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      rolId:
          rolId == null && nullToAbsent ? const Value.absent() : Value(rolId),
      apoderadoId: apoderadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(apoderadoId),
      key: key == null && nullToAbsent ? const Value.absent() : Value(key),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      usuarioCreadorId: usuarioCreadorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreadorId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      fechaEnvio: fechaEnvio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEnvio),
      fechaEntrega: fechaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEntrega),
      fechaRecibido: fechaRecibido == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRecibido),
      fechaVisto: fechaVisto == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaVisto),
      fechaRespuesta: fechaRespuesta == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRespuesta),
      getSTime: getSTime == null && nullToAbsent
          ? const Value.absent()
          : Value(getSTime),
    );
  }

  factory EventoPersonaData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EventoPersonaData(
      eventoPersonaId: serializer.fromJson<String>(json['eventoPersonaId']),
      eventoId: serializer.fromJson<String?>(json['eventoId']),
      personaId: serializer.fromJson<int?>(json['personaId']),
      estado: serializer.fromJson<bool?>(json['estado']),
      rolId: serializer.fromJson<int?>(json['rolId']),
      apoderadoId: serializer.fromJson<int?>(json['apoderadoId']),
      key: serializer.fromJson<String?>(json['key']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      usuarioCreadorId: serializer.fromJson<int?>(json['usuarioCreadorId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      fechaEnvio: serializer.fromJson<int?>(json['fechaEnvio']),
      fechaEntrega: serializer.fromJson<int?>(json['fechaEntrega']),
      fechaRecibido: serializer.fromJson<int?>(json['fechaRecibido']),
      fechaVisto: serializer.fromJson<int?>(json['fechaVisto']),
      fechaRespuesta: serializer.fromJson<int?>(json['fechaRespuesta']),
      getSTime: serializer.fromJson<String?>(json['getSTime']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'eventoPersonaId': serializer.toJson<String>(eventoPersonaId),
      'eventoId': serializer.toJson<String?>(eventoId),
      'personaId': serializer.toJson<int?>(personaId),
      'estado': serializer.toJson<bool?>(estado),
      'rolId': serializer.toJson<int?>(rolId),
      'apoderadoId': serializer.toJson<int?>(apoderadoId),
      'key': serializer.toJson<String?>(key),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'usuarioCreadorId': serializer.toJson<int?>(usuarioCreadorId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'fechaEnvio': serializer.toJson<int?>(fechaEnvio),
      'fechaEntrega': serializer.toJson<int?>(fechaEntrega),
      'fechaRecibido': serializer.toJson<int?>(fechaRecibido),
      'fechaVisto': serializer.toJson<int?>(fechaVisto),
      'fechaRespuesta': serializer.toJson<int?>(fechaRespuesta),
      'getSTime': serializer.toJson<String?>(getSTime),
    };
  }

  EventoPersonaData copyWith(
          {String? eventoPersonaId,
          String? eventoId,
          int? personaId,
          bool? estado,
          int? rolId,
          int? apoderadoId,
          String? key,
          int? usuarioCreacionId,
          int? usuarioCreadorId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? fechaEnvio,
          int? fechaEntrega,
          int? fechaRecibido,
          int? fechaVisto,
          int? fechaRespuesta,
          String? getSTime}) =>
      EventoPersonaData(
        eventoPersonaId: eventoPersonaId ?? this.eventoPersonaId,
        eventoId: eventoId ?? this.eventoId,
        personaId: personaId ?? this.personaId,
        estado: estado ?? this.estado,
        rolId: rolId ?? this.rolId,
        apoderadoId: apoderadoId ?? this.apoderadoId,
        key: key ?? this.key,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        fechaEnvio: fechaEnvio ?? this.fechaEnvio,
        fechaEntrega: fechaEntrega ?? this.fechaEntrega,
        fechaRecibido: fechaRecibido ?? this.fechaRecibido,
        fechaVisto: fechaVisto ?? this.fechaVisto,
        fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
        getSTime: getSTime ?? this.getSTime,
      );
  @override
  String toString() {
    return (StringBuffer('EventoPersonaData(')
          ..write('eventoPersonaId: $eventoPersonaId, ')
          ..write('eventoId: $eventoId, ')
          ..write('personaId: $personaId, ')
          ..write('estado: $estado, ')
          ..write('rolId: $rolId, ')
          ..write('apoderadoId: $apoderadoId, ')
          ..write('key: $key, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      eventoPersonaId.hashCode,
      $mrjc(
          eventoId.hashCode,
          $mrjc(
              personaId.hashCode,
              $mrjc(
                  estado.hashCode,
                  $mrjc(
                      rolId.hashCode,
                      $mrjc(
                          apoderadoId.hashCode,
                          $mrjc(
                              key.hashCode,
                              $mrjc(
                                  usuarioCreacionId.hashCode,
                                  $mrjc(
                                      usuarioCreadorId.hashCode,
                                      $mrjc(
                                          fechaCreacion.hashCode,
                                          $mrjc(
                                              usuarioAccionId.hashCode,
                                              $mrjc(
                                                  fechaAccion.hashCode,
                                                  $mrjc(
                                                      fechaEnvio.hashCode,
                                                      $mrjc(
                                                          fechaEntrega.hashCode,
                                                          $mrjc(
                                                              fechaRecibido
                                                                  .hashCode,
                                                              $mrjc(
                                                                  fechaVisto
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      fechaRespuesta
                                                                          .hashCode,
                                                                      getSTime
                                                                          .hashCode))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EventoPersonaData &&
          other.eventoPersonaId == this.eventoPersonaId &&
          other.eventoId == this.eventoId &&
          other.personaId == this.personaId &&
          other.estado == this.estado &&
          other.rolId == this.rolId &&
          other.apoderadoId == this.apoderadoId &&
          other.key == this.key &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.usuarioCreadorId == this.usuarioCreadorId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.fechaEnvio == this.fechaEnvio &&
          other.fechaEntrega == this.fechaEntrega &&
          other.fechaRecibido == this.fechaRecibido &&
          other.fechaVisto == this.fechaVisto &&
          other.fechaRespuesta == this.fechaRespuesta &&
          other.getSTime == this.getSTime);
}

class EventoPersonaCompanion extends UpdateCompanion<EventoPersonaData> {
  final Value<String> eventoPersonaId;
  final Value<String?> eventoId;
  final Value<int?> personaId;
  final Value<bool?> estado;
  final Value<int?> rolId;
  final Value<int?> apoderadoId;
  final Value<String?> key;
  final Value<int?> usuarioCreacionId;
  final Value<int?> usuarioCreadorId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> fechaEnvio;
  final Value<int?> fechaEntrega;
  final Value<int?> fechaRecibido;
  final Value<int?> fechaVisto;
  final Value<int?> fechaRespuesta;
  final Value<String?> getSTime;
  const EventoPersonaCompanion({
    this.eventoPersonaId = const Value.absent(),
    this.eventoId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.estado = const Value.absent(),
    this.rolId = const Value.absent(),
    this.apoderadoId = const Value.absent(),
    this.key = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  });
  EventoPersonaCompanion.insert({
    required String eventoPersonaId,
    this.eventoId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.estado = const Value.absent(),
    this.rolId = const Value.absent(),
    this.apoderadoId = const Value.absent(),
    this.key = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  }) : eventoPersonaId = Value(eventoPersonaId);
  static Insertable<EventoPersonaData> custom({
    Expression<String>? eventoPersonaId,
    Expression<String?>? eventoId,
    Expression<int?>? personaId,
    Expression<bool?>? estado,
    Expression<int?>? rolId,
    Expression<int?>? apoderadoId,
    Expression<String?>? key,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? usuarioCreadorId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? fechaEnvio,
    Expression<int?>? fechaEntrega,
    Expression<int?>? fechaRecibido,
    Expression<int?>? fechaVisto,
    Expression<int?>? fechaRespuesta,
    Expression<String?>? getSTime,
  }) {
    return RawValuesInsertable({
      if (eventoPersonaId != null) 'evento_persona_id': eventoPersonaId,
      if (eventoId != null) 'evento_id': eventoId,
      if (personaId != null) 'persona_id': personaId,
      if (estado != null) 'estado': estado,
      if (rolId != null) 'rol_id': rolId,
      if (apoderadoId != null) 'apoderado_id': apoderadoId,
      if (key != null) 'key': key,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (usuarioCreadorId != null) 'usuario_creador_id': usuarioCreadorId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (fechaEnvio != null) 'fecha_envio': fechaEnvio,
      if (fechaEntrega != null) 'fecha_entrega': fechaEntrega,
      if (fechaRecibido != null) 'fecha_recibido': fechaRecibido,
      if (fechaVisto != null) 'fecha_visto': fechaVisto,
      if (fechaRespuesta != null) 'fecha_respuesta': fechaRespuesta,
      if (getSTime != null) 'get_s_time': getSTime,
    });
  }

  EventoPersonaCompanion copyWith(
      {Value<String>? eventoPersonaId,
      Value<String?>? eventoId,
      Value<int?>? personaId,
      Value<bool?>? estado,
      Value<int?>? rolId,
      Value<int?>? apoderadoId,
      Value<String?>? key,
      Value<int?>? usuarioCreacionId,
      Value<int?>? usuarioCreadorId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? fechaEnvio,
      Value<int?>? fechaEntrega,
      Value<int?>? fechaRecibido,
      Value<int?>? fechaVisto,
      Value<int?>? fechaRespuesta,
      Value<String?>? getSTime}) {
    return EventoPersonaCompanion(
      eventoPersonaId: eventoPersonaId ?? this.eventoPersonaId,
      eventoId: eventoId ?? this.eventoId,
      personaId: personaId ?? this.personaId,
      estado: estado ?? this.estado,
      rolId: rolId ?? this.rolId,
      apoderadoId: apoderadoId ?? this.apoderadoId,
      key: key ?? this.key,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      fechaEnvio: fechaEnvio ?? this.fechaEnvio,
      fechaEntrega: fechaEntrega ?? this.fechaEntrega,
      fechaRecibido: fechaRecibido ?? this.fechaRecibido,
      fechaVisto: fechaVisto ?? this.fechaVisto,
      fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
      getSTime: getSTime ?? this.getSTime,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (eventoPersonaId.present) {
      map['evento_persona_id'] = Variable<String>(eventoPersonaId.value);
    }
    if (eventoId.present) {
      map['evento_id'] = Variable<String?>(eventoId.value);
    }
    if (personaId.present) {
      map['persona_id'] = Variable<int?>(personaId.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (rolId.present) {
      map['rol_id'] = Variable<int?>(rolId.value);
    }
    if (apoderadoId.present) {
      map['apoderado_id'] = Variable<int?>(apoderadoId.value);
    }
    if (key.present) {
      map['key'] = Variable<String?>(key.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (usuarioCreadorId.present) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (fechaEnvio.present) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio.value);
    }
    if (fechaEntrega.present) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega.value);
    }
    if (fechaRecibido.present) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido.value);
    }
    if (fechaVisto.present) {
      map['fecha_visto'] = Variable<int?>(fechaVisto.value);
    }
    if (fechaRespuesta.present) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta.value);
    }
    if (getSTime.present) {
      map['get_s_time'] = Variable<String?>(getSTime.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EventoPersonaCompanion(')
          ..write('eventoPersonaId: $eventoPersonaId, ')
          ..write('eventoId: $eventoId, ')
          ..write('personaId: $personaId, ')
          ..write('estado: $estado, ')
          ..write('rolId: $rolId, ')
          ..write('apoderadoId: $apoderadoId, ')
          ..write('key: $key, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }
}

class $EventoPersonaTable extends EventoPersona
    with TableInfo<$EventoPersonaTable, EventoPersonaData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $EventoPersonaTable(this._db, [this._alias]);
  final VerificationMeta _eventoPersonaIdMeta =
      const VerificationMeta('eventoPersonaId');
  late final GeneratedColumn<String?> eventoPersonaId =
      GeneratedColumn<String?>('evento_persona_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _eventoIdMeta = const VerificationMeta('eventoId');
  late final GeneratedColumn<String?> eventoId = GeneratedColumn<String?>(
      'evento_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _rolIdMeta = const VerificationMeta('rolId');
  late final GeneratedColumn<int?> rolId = GeneratedColumn<int?>(
      'rol_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _apoderadoIdMeta =
      const VerificationMeta('apoderadoId');
  late final GeneratedColumn<int?> apoderadoId = GeneratedColumn<int?>(
      'apoderado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _keyMeta = const VerificationMeta('key');
  late final GeneratedColumn<String?> key = GeneratedColumn<String?>(
      'key', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreadorIdMeta =
      const VerificationMeta('usuarioCreadorId');
  late final GeneratedColumn<int?> usuarioCreadorId = GeneratedColumn<int?>(
      'usuario_creador_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEnvioMeta = const VerificationMeta('fechaEnvio');
  late final GeneratedColumn<int?> fechaEnvio = GeneratedColumn<int?>(
      'fecha_envio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEntregaMeta =
      const VerificationMeta('fechaEntrega');
  late final GeneratedColumn<int?> fechaEntrega = GeneratedColumn<int?>(
      'fecha_entrega', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRecibidoMeta =
      const VerificationMeta('fechaRecibido');
  late final GeneratedColumn<int?> fechaRecibido = GeneratedColumn<int?>(
      'fecha_recibido', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaVistoMeta = const VerificationMeta('fechaVisto');
  late final GeneratedColumn<int?> fechaVisto = GeneratedColumn<int?>(
      'fecha_visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRespuestaMeta =
      const VerificationMeta('fechaRespuesta');
  late final GeneratedColumn<int?> fechaRespuesta = GeneratedColumn<int?>(
      'fecha_respuesta', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _getSTimeMeta = const VerificationMeta('getSTime');
  late final GeneratedColumn<String?> getSTime = GeneratedColumn<String?>(
      'get_s_time', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        eventoPersonaId,
        eventoId,
        personaId,
        estado,
        rolId,
        apoderadoId,
        key,
        usuarioCreacionId,
        usuarioCreadorId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        fechaEnvio,
        fechaEntrega,
        fechaRecibido,
        fechaVisto,
        fechaRespuesta,
        getSTime
      ];
  @override
  String get aliasedName => _alias ?? 'evento_persona';
  @override
  String get actualTableName => 'evento_persona';
  @override
  VerificationContext validateIntegrity(Insertable<EventoPersonaData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('evento_persona_id')) {
      context.handle(
          _eventoPersonaIdMeta,
          eventoPersonaId.isAcceptableOrUnknown(
              data['evento_persona_id']!, _eventoPersonaIdMeta));
    } else if (isInserting) {
      context.missing(_eventoPersonaIdMeta);
    }
    if (data.containsKey('evento_id')) {
      context.handle(_eventoIdMeta,
          eventoId.isAcceptableOrUnknown(data['evento_id']!, _eventoIdMeta));
    }
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('rol_id')) {
      context.handle(
          _rolIdMeta, rolId.isAcceptableOrUnknown(data['rol_id']!, _rolIdMeta));
    }
    if (data.containsKey('apoderado_id')) {
      context.handle(
          _apoderadoIdMeta,
          apoderadoId.isAcceptableOrUnknown(
              data['apoderado_id']!, _apoderadoIdMeta));
    }
    if (data.containsKey('key')) {
      context.handle(
          _keyMeta, key.isAcceptableOrUnknown(data['key']!, _keyMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('usuario_creador_id')) {
      context.handle(
          _usuarioCreadorIdMeta,
          usuarioCreadorId.isAcceptableOrUnknown(
              data['usuario_creador_id']!, _usuarioCreadorIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('fecha_envio')) {
      context.handle(
          _fechaEnvioMeta,
          fechaEnvio.isAcceptableOrUnknown(
              data['fecha_envio']!, _fechaEnvioMeta));
    }
    if (data.containsKey('fecha_entrega')) {
      context.handle(
          _fechaEntregaMeta,
          fechaEntrega.isAcceptableOrUnknown(
              data['fecha_entrega']!, _fechaEntregaMeta));
    }
    if (data.containsKey('fecha_recibido')) {
      context.handle(
          _fechaRecibidoMeta,
          fechaRecibido.isAcceptableOrUnknown(
              data['fecha_recibido']!, _fechaRecibidoMeta));
    }
    if (data.containsKey('fecha_visto')) {
      context.handle(
          _fechaVistoMeta,
          fechaVisto.isAcceptableOrUnknown(
              data['fecha_visto']!, _fechaVistoMeta));
    }
    if (data.containsKey('fecha_respuesta')) {
      context.handle(
          _fechaRespuestaMeta,
          fechaRespuesta.isAcceptableOrUnknown(
              data['fecha_respuesta']!, _fechaRespuestaMeta));
    }
    if (data.containsKey('get_s_time')) {
      context.handle(_getSTimeMeta,
          getSTime.isAcceptableOrUnknown(data['get_s_time']!, _getSTimeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {eventoPersonaId};
  @override
  EventoPersonaData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EventoPersonaData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EventoPersonaTable createAlias(String alias) {
    return $EventoPersonaTable(_db, alias);
  }
}

class ListaUsuarioDetalleData extends DataClass
    implements Insertable<ListaUsuarioDetalleData> {
  final int listaUsuarioId;
  final int usuarioId;
  ListaUsuarioDetalleData(
      {required this.listaUsuarioId, required this.usuarioId});
  factory ListaUsuarioDetalleData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ListaUsuarioDetalleData(
      listaUsuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lista_usuario_id'])!,
      usuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_id'])!,
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['lista_usuario_id'] = Variable<int>(listaUsuarioId);
    map['usuario_id'] = Variable<int>(usuarioId);
    return map;
  }

  ListaUsuarioDetalleCompanion toCompanion(bool nullToAbsent) {
    return ListaUsuarioDetalleCompanion(
      listaUsuarioId: Value(listaUsuarioId),
      usuarioId: Value(usuarioId),
    );
  }

  factory ListaUsuarioDetalleData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ListaUsuarioDetalleData(
      listaUsuarioId: serializer.fromJson<int>(json['listaUsuarioId']),
      usuarioId: serializer.fromJson<int>(json['usuarioId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'listaUsuarioId': serializer.toJson<int>(listaUsuarioId),
      'usuarioId': serializer.toJson<int>(usuarioId),
    };
  }

  ListaUsuarioDetalleData copyWith({int? listaUsuarioId, int? usuarioId}) =>
      ListaUsuarioDetalleData(
        listaUsuarioId: listaUsuarioId ?? this.listaUsuarioId,
        usuarioId: usuarioId ?? this.usuarioId,
      );
  @override
  String toString() {
    return (StringBuffer('ListaUsuarioDetalleData(')
          ..write('listaUsuarioId: $listaUsuarioId, ')
          ..write('usuarioId: $usuarioId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(listaUsuarioId.hashCode, usuarioId.hashCode));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ListaUsuarioDetalleData &&
          other.listaUsuarioId == this.listaUsuarioId &&
          other.usuarioId == this.usuarioId);
}

class ListaUsuarioDetalleCompanion
    extends UpdateCompanion<ListaUsuarioDetalleData> {
  final Value<int> listaUsuarioId;
  final Value<int> usuarioId;
  const ListaUsuarioDetalleCompanion({
    this.listaUsuarioId = const Value.absent(),
    this.usuarioId = const Value.absent(),
  });
  ListaUsuarioDetalleCompanion.insert({
    required int listaUsuarioId,
    required int usuarioId,
  })  : listaUsuarioId = Value(listaUsuarioId),
        usuarioId = Value(usuarioId);
  static Insertable<ListaUsuarioDetalleData> custom({
    Expression<int>? listaUsuarioId,
    Expression<int>? usuarioId,
  }) {
    return RawValuesInsertable({
      if (listaUsuarioId != null) 'lista_usuario_id': listaUsuarioId,
      if (usuarioId != null) 'usuario_id': usuarioId,
    });
  }

  ListaUsuarioDetalleCompanion copyWith(
      {Value<int>? listaUsuarioId, Value<int>? usuarioId}) {
    return ListaUsuarioDetalleCompanion(
      listaUsuarioId: listaUsuarioId ?? this.listaUsuarioId,
      usuarioId: usuarioId ?? this.usuarioId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (listaUsuarioId.present) {
      map['lista_usuario_id'] = Variable<int>(listaUsuarioId.value);
    }
    if (usuarioId.present) {
      map['usuario_id'] = Variable<int>(usuarioId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ListaUsuarioDetalleCompanion(')
          ..write('listaUsuarioId: $listaUsuarioId, ')
          ..write('usuarioId: $usuarioId')
          ..write(')'))
        .toString();
  }
}

class $ListaUsuarioDetalleTable extends ListaUsuarioDetalle
    with TableInfo<$ListaUsuarioDetalleTable, ListaUsuarioDetalleData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ListaUsuarioDetalleTable(this._db, [this._alias]);
  final VerificationMeta _listaUsuarioIdMeta =
      const VerificationMeta('listaUsuarioId');
  late final GeneratedColumn<int?> listaUsuarioId = GeneratedColumn<int?>(
      'lista_usuario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _usuarioIdMeta = const VerificationMeta('usuarioId');
  late final GeneratedColumn<int?> usuarioId = GeneratedColumn<int?>(
      'usuario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [listaUsuarioId, usuarioId];
  @override
  String get aliasedName => _alias ?? 'lista_usuario_detalle';
  @override
  String get actualTableName => 'lista_usuario_detalle';
  @override
  VerificationContext validateIntegrity(
      Insertable<ListaUsuarioDetalleData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('lista_usuario_id')) {
      context.handle(
          _listaUsuarioIdMeta,
          listaUsuarioId.isAcceptableOrUnknown(
              data['lista_usuario_id']!, _listaUsuarioIdMeta));
    } else if (isInserting) {
      context.missing(_listaUsuarioIdMeta);
    }
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    } else if (isInserting) {
      context.missing(_usuarioIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {listaUsuarioId, usuarioId};
  @override
  ListaUsuarioDetalleData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return ListaUsuarioDetalleData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ListaUsuarioDetalleTable createAlias(String alias) {
    return $ListaUsuarioDetalleTable(_db, alias);
  }
}

class ListaUsuario extends DataClass implements Insertable<ListaUsuario> {
  final int listaUsuarioId;
  final String? nombre;
  final String? descripcion;
  final int? entidadId;
  final int? georeferenciaId;
  final int? organigramaId;
  final bool? estado;
  final int? usuarioCreacionId;
  final int? usuarioCreadorId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? fechaEnvio;
  final int? fechaEntrega;
  final int? fechaRecibido;
  final int? fechaVisto;
  final int? fechaRespuesta;
  final String? getSTime;
  ListaUsuario(
      {required this.listaUsuarioId,
      this.nombre,
      this.descripcion,
      this.entidadId,
      this.georeferenciaId,
      this.organigramaId,
      this.estado,
      this.usuarioCreacionId,
      this.usuarioCreadorId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.fechaEnvio,
      this.fechaEntrega,
      this.fechaRecibido,
      this.fechaVisto,
      this.fechaRespuesta,
      this.getSTime});
  factory ListaUsuario.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ListaUsuario(
      listaUsuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lista_usuario_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      descripcion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}descripcion']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      organigramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}organigrama_id']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      usuarioCreadorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creador_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      fechaEnvio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_envio']),
      fechaEntrega: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_entrega']),
      fechaRecibido: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_recibido']),
      fechaVisto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_visto']),
      fechaRespuesta: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_respuesta']),
      getSTime: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}get_s_time']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['lista_usuario_id'] = Variable<int>(listaUsuarioId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || descripcion != null) {
      map['descripcion'] = Variable<String?>(descripcion);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || organigramaId != null) {
      map['organigrama_id'] = Variable<int?>(organigramaId);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || usuarioCreadorId != null) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || fechaEnvio != null) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio);
    }
    if (!nullToAbsent || fechaEntrega != null) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega);
    }
    if (!nullToAbsent || fechaRecibido != null) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido);
    }
    if (!nullToAbsent || fechaVisto != null) {
      map['fecha_visto'] = Variable<int?>(fechaVisto);
    }
    if (!nullToAbsent || fechaRespuesta != null) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta);
    }
    if (!nullToAbsent || getSTime != null) {
      map['get_s_time'] = Variable<String?>(getSTime);
    }
    return map;
  }

  ListaUsuariosCompanion toCompanion(bool nullToAbsent) {
    return ListaUsuariosCompanion(
      listaUsuarioId: Value(listaUsuarioId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      descripcion: descripcion == null && nullToAbsent
          ? const Value.absent()
          : Value(descripcion),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      organigramaId: organigramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(organigramaId),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      usuarioCreadorId: usuarioCreadorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreadorId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      fechaEnvio: fechaEnvio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEnvio),
      fechaEntrega: fechaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEntrega),
      fechaRecibido: fechaRecibido == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRecibido),
      fechaVisto: fechaVisto == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaVisto),
      fechaRespuesta: fechaRespuesta == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRespuesta),
      getSTime: getSTime == null && nullToAbsent
          ? const Value.absent()
          : Value(getSTime),
    );
  }

  factory ListaUsuario.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ListaUsuario(
      listaUsuarioId: serializer.fromJson<int>(json['listaUsuarioId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      descripcion: serializer.fromJson<String?>(json['descripcion']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      organigramaId: serializer.fromJson<int?>(json['organigramaId']),
      estado: serializer.fromJson<bool?>(json['estado']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      usuarioCreadorId: serializer.fromJson<int?>(json['usuarioCreadorId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      fechaEnvio: serializer.fromJson<int?>(json['fechaEnvio']),
      fechaEntrega: serializer.fromJson<int?>(json['fechaEntrega']),
      fechaRecibido: serializer.fromJson<int?>(json['fechaRecibido']),
      fechaVisto: serializer.fromJson<int?>(json['fechaVisto']),
      fechaRespuesta: serializer.fromJson<int?>(json['fechaRespuesta']),
      getSTime: serializer.fromJson<String?>(json['getSTime']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'listaUsuarioId': serializer.toJson<int>(listaUsuarioId),
      'nombre': serializer.toJson<String?>(nombre),
      'descripcion': serializer.toJson<String?>(descripcion),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'organigramaId': serializer.toJson<int?>(organigramaId),
      'estado': serializer.toJson<bool?>(estado),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'usuarioCreadorId': serializer.toJson<int?>(usuarioCreadorId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'fechaEnvio': serializer.toJson<int?>(fechaEnvio),
      'fechaEntrega': serializer.toJson<int?>(fechaEntrega),
      'fechaRecibido': serializer.toJson<int?>(fechaRecibido),
      'fechaVisto': serializer.toJson<int?>(fechaVisto),
      'fechaRespuesta': serializer.toJson<int?>(fechaRespuesta),
      'getSTime': serializer.toJson<String?>(getSTime),
    };
  }

  ListaUsuario copyWith(
          {int? listaUsuarioId,
          String? nombre,
          String? descripcion,
          int? entidadId,
          int? georeferenciaId,
          int? organigramaId,
          bool? estado,
          int? usuarioCreacionId,
          int? usuarioCreadorId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? fechaEnvio,
          int? fechaEntrega,
          int? fechaRecibido,
          int? fechaVisto,
          int? fechaRespuesta,
          String? getSTime}) =>
      ListaUsuario(
        listaUsuarioId: listaUsuarioId ?? this.listaUsuarioId,
        nombre: nombre ?? this.nombre,
        descripcion: descripcion ?? this.descripcion,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        organigramaId: organigramaId ?? this.organigramaId,
        estado: estado ?? this.estado,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        fechaEnvio: fechaEnvio ?? this.fechaEnvio,
        fechaEntrega: fechaEntrega ?? this.fechaEntrega,
        fechaRecibido: fechaRecibido ?? this.fechaRecibido,
        fechaVisto: fechaVisto ?? this.fechaVisto,
        fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
        getSTime: getSTime ?? this.getSTime,
      );
  @override
  String toString() {
    return (StringBuffer('ListaUsuario(')
          ..write('listaUsuarioId: $listaUsuarioId, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estado: $estado, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      listaUsuarioId.hashCode,
      $mrjc(
          nombre.hashCode,
          $mrjc(
              descripcion.hashCode,
              $mrjc(
                  entidadId.hashCode,
                  $mrjc(
                      georeferenciaId.hashCode,
                      $mrjc(
                          organigramaId.hashCode,
                          $mrjc(
                              estado.hashCode,
                              $mrjc(
                                  usuarioCreacionId.hashCode,
                                  $mrjc(
                                      usuarioCreadorId.hashCode,
                                      $mrjc(
                                          fechaCreacion.hashCode,
                                          $mrjc(
                                              usuarioAccionId.hashCode,
                                              $mrjc(
                                                  fechaAccion.hashCode,
                                                  $mrjc(
                                                      fechaEnvio.hashCode,
                                                      $mrjc(
                                                          fechaEntrega.hashCode,
                                                          $mrjc(
                                                              fechaRecibido
                                                                  .hashCode,
                                                              $mrjc(
                                                                  fechaVisto
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      fechaRespuesta
                                                                          .hashCode,
                                                                      getSTime
                                                                          .hashCode))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ListaUsuario &&
          other.listaUsuarioId == this.listaUsuarioId &&
          other.nombre == this.nombre &&
          other.descripcion == this.descripcion &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.organigramaId == this.organigramaId &&
          other.estado == this.estado &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.usuarioCreadorId == this.usuarioCreadorId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.fechaEnvio == this.fechaEnvio &&
          other.fechaEntrega == this.fechaEntrega &&
          other.fechaRecibido == this.fechaRecibido &&
          other.fechaVisto == this.fechaVisto &&
          other.fechaRespuesta == this.fechaRespuesta &&
          other.getSTime == this.getSTime);
}

class ListaUsuariosCompanion extends UpdateCompanion<ListaUsuario> {
  final Value<int> listaUsuarioId;
  final Value<String?> nombre;
  final Value<String?> descripcion;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  final Value<int?> organigramaId;
  final Value<bool?> estado;
  final Value<int?> usuarioCreacionId;
  final Value<int?> usuarioCreadorId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> fechaEnvio;
  final Value<int?> fechaEntrega;
  final Value<int?> fechaRecibido;
  final Value<int?> fechaVisto;
  final Value<int?> fechaRespuesta;
  final Value<String?> getSTime;
  const ListaUsuariosCompanion({
    this.listaUsuarioId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estado = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  });
  ListaUsuariosCompanion.insert({
    this.listaUsuarioId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.descripcion = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estado = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  });
  static Insertable<ListaUsuario> custom({
    Expression<int>? listaUsuarioId,
    Expression<String?>? nombre,
    Expression<String?>? descripcion,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
    Expression<int?>? organigramaId,
    Expression<bool?>? estado,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? usuarioCreadorId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? fechaEnvio,
    Expression<int?>? fechaEntrega,
    Expression<int?>? fechaRecibido,
    Expression<int?>? fechaVisto,
    Expression<int?>? fechaRespuesta,
    Expression<String?>? getSTime,
  }) {
    return RawValuesInsertable({
      if (listaUsuarioId != null) 'lista_usuario_id': listaUsuarioId,
      if (nombre != null) 'nombre': nombre,
      if (descripcion != null) 'descripcion': descripcion,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (organigramaId != null) 'organigrama_id': organigramaId,
      if (estado != null) 'estado': estado,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (usuarioCreadorId != null) 'usuario_creador_id': usuarioCreadorId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (fechaEnvio != null) 'fecha_envio': fechaEnvio,
      if (fechaEntrega != null) 'fecha_entrega': fechaEntrega,
      if (fechaRecibido != null) 'fecha_recibido': fechaRecibido,
      if (fechaVisto != null) 'fecha_visto': fechaVisto,
      if (fechaRespuesta != null) 'fecha_respuesta': fechaRespuesta,
      if (getSTime != null) 'get_s_time': getSTime,
    });
  }

  ListaUsuariosCompanion copyWith(
      {Value<int>? listaUsuarioId,
      Value<String?>? nombre,
      Value<String?>? descripcion,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId,
      Value<int?>? organigramaId,
      Value<bool?>? estado,
      Value<int?>? usuarioCreacionId,
      Value<int?>? usuarioCreadorId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? fechaEnvio,
      Value<int?>? fechaEntrega,
      Value<int?>? fechaRecibido,
      Value<int?>? fechaVisto,
      Value<int?>? fechaRespuesta,
      Value<String?>? getSTime}) {
    return ListaUsuariosCompanion(
      listaUsuarioId: listaUsuarioId ?? this.listaUsuarioId,
      nombre: nombre ?? this.nombre,
      descripcion: descripcion ?? this.descripcion,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      organigramaId: organigramaId ?? this.organigramaId,
      estado: estado ?? this.estado,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      fechaEnvio: fechaEnvio ?? this.fechaEnvio,
      fechaEntrega: fechaEntrega ?? this.fechaEntrega,
      fechaRecibido: fechaRecibido ?? this.fechaRecibido,
      fechaVisto: fechaVisto ?? this.fechaVisto,
      fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
      getSTime: getSTime ?? this.getSTime,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (listaUsuarioId.present) {
      map['lista_usuario_id'] = Variable<int>(listaUsuarioId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (descripcion.present) {
      map['descripcion'] = Variable<String?>(descripcion.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (organigramaId.present) {
      map['organigrama_id'] = Variable<int?>(organigramaId.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (usuarioCreadorId.present) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (fechaEnvio.present) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio.value);
    }
    if (fechaEntrega.present) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega.value);
    }
    if (fechaRecibido.present) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido.value);
    }
    if (fechaVisto.present) {
      map['fecha_visto'] = Variable<int?>(fechaVisto.value);
    }
    if (fechaRespuesta.present) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta.value);
    }
    if (getSTime.present) {
      map['get_s_time'] = Variable<String?>(getSTime.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ListaUsuariosCompanion(')
          ..write('listaUsuarioId: $listaUsuarioId, ')
          ..write('nombre: $nombre, ')
          ..write('descripcion: $descripcion, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estado: $estado, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }
}

class $ListaUsuariosTable extends ListaUsuarios
    with TableInfo<$ListaUsuariosTable, ListaUsuario> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ListaUsuariosTable(this._db, [this._alias]);
  final VerificationMeta _listaUsuarioIdMeta =
      const VerificationMeta('listaUsuarioId');
  late final GeneratedColumn<int?> listaUsuarioId = GeneratedColumn<int?>(
      'lista_usuario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _descripcionMeta =
      const VerificationMeta('descripcion');
  late final GeneratedColumn<String?> descripcion = GeneratedColumn<String?>(
      'descripcion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _organigramaIdMeta =
      const VerificationMeta('organigramaId');
  late final GeneratedColumn<int?> organigramaId = GeneratedColumn<int?>(
      'organigrama_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreadorIdMeta =
      const VerificationMeta('usuarioCreadorId');
  late final GeneratedColumn<int?> usuarioCreadorId = GeneratedColumn<int?>(
      'usuario_creador_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEnvioMeta = const VerificationMeta('fechaEnvio');
  late final GeneratedColumn<int?> fechaEnvio = GeneratedColumn<int?>(
      'fecha_envio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEntregaMeta =
      const VerificationMeta('fechaEntrega');
  late final GeneratedColumn<int?> fechaEntrega = GeneratedColumn<int?>(
      'fecha_entrega', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRecibidoMeta =
      const VerificationMeta('fechaRecibido');
  late final GeneratedColumn<int?> fechaRecibido = GeneratedColumn<int?>(
      'fecha_recibido', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaVistoMeta = const VerificationMeta('fechaVisto');
  late final GeneratedColumn<int?> fechaVisto = GeneratedColumn<int?>(
      'fecha_visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRespuestaMeta =
      const VerificationMeta('fechaRespuesta');
  late final GeneratedColumn<int?> fechaRespuesta = GeneratedColumn<int?>(
      'fecha_respuesta', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _getSTimeMeta = const VerificationMeta('getSTime');
  late final GeneratedColumn<String?> getSTime = GeneratedColumn<String?>(
      'get_s_time', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        listaUsuarioId,
        nombre,
        descripcion,
        entidadId,
        georeferenciaId,
        organigramaId,
        estado,
        usuarioCreacionId,
        usuarioCreadorId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        fechaEnvio,
        fechaEntrega,
        fechaRecibido,
        fechaVisto,
        fechaRespuesta,
        getSTime
      ];
  @override
  String get aliasedName => _alias ?? 'lista_usuarios';
  @override
  String get actualTableName => 'lista_usuarios';
  @override
  VerificationContext validateIntegrity(Insertable<ListaUsuario> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('lista_usuario_id')) {
      context.handle(
          _listaUsuarioIdMeta,
          listaUsuarioId.isAcceptableOrUnknown(
              data['lista_usuario_id']!, _listaUsuarioIdMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('descripcion')) {
      context.handle(
          _descripcionMeta,
          descripcion.isAcceptableOrUnknown(
              data['descripcion']!, _descripcionMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('organigrama_id')) {
      context.handle(
          _organigramaIdMeta,
          organigramaId.isAcceptableOrUnknown(
              data['organigrama_id']!, _organigramaIdMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('usuario_creador_id')) {
      context.handle(
          _usuarioCreadorIdMeta,
          usuarioCreadorId.isAcceptableOrUnknown(
              data['usuario_creador_id']!, _usuarioCreadorIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('fecha_envio')) {
      context.handle(
          _fechaEnvioMeta,
          fechaEnvio.isAcceptableOrUnknown(
              data['fecha_envio']!, _fechaEnvioMeta));
    }
    if (data.containsKey('fecha_entrega')) {
      context.handle(
          _fechaEntregaMeta,
          fechaEntrega.isAcceptableOrUnknown(
              data['fecha_entrega']!, _fechaEntregaMeta));
    }
    if (data.containsKey('fecha_recibido')) {
      context.handle(
          _fechaRecibidoMeta,
          fechaRecibido.isAcceptableOrUnknown(
              data['fecha_recibido']!, _fechaRecibidoMeta));
    }
    if (data.containsKey('fecha_visto')) {
      context.handle(
          _fechaVistoMeta,
          fechaVisto.isAcceptableOrUnknown(
              data['fecha_visto']!, _fechaVistoMeta));
    }
    if (data.containsKey('fecha_respuesta')) {
      context.handle(
          _fechaRespuestaMeta,
          fechaRespuesta.isAcceptableOrUnknown(
              data['fecha_respuesta']!, _fechaRespuestaMeta));
    }
    if (data.containsKey('get_s_time')) {
      context.handle(_getSTimeMeta,
          getSTime.isAcceptableOrUnknown(data['get_s_time']!, _getSTimeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {listaUsuarioId};
  @override
  ListaUsuario map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ListaUsuario.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ListaUsuariosTable createAlias(String alias) {
    return $ListaUsuariosTable(_db, alias);
  }
}

class PersonaEventoData extends DataClass
    implements Insertable<PersonaEventoData> {
  final int personaId;
  final String? nombres;
  final String? apellidoPaterno;
  final String? apellidoMaterno;
  final String? celular;
  final String? telefono;
  final String? foto;
  final String? fechaNac;
  final String? genero;
  final String? estadoCivil;
  final String? numDoc;
  final String? ocupacion;
  final int? estadoId;
  final String? correo;
  final int? empleadoId;
  PersonaEventoData(
      {required this.personaId,
      this.nombres,
      this.apellidoPaterno,
      this.apellidoMaterno,
      this.celular,
      this.telefono,
      this.foto,
      this.fechaNac,
      this.genero,
      this.estadoCivil,
      this.numDoc,
      this.ocupacion,
      this.estadoId,
      this.correo,
      this.empleadoId});
  factory PersonaEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PersonaEventoData(
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id'])!,
      nombres: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombres']),
      apellidoPaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_paterno']),
      apellidoMaterno: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}apellido_materno']),
      celular: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}celular']),
      telefono: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}telefono']),
      foto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}foto']),
      fechaNac: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_nac']),
      genero: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}genero']),
      estadoCivil: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_civil']),
      numDoc: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}num_doc']),
      ocupacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ocupacion']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      correo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}correo']),
      empleadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}empleado_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['persona_id'] = Variable<int>(personaId);
    if (!nullToAbsent || nombres != null) {
      map['nombres'] = Variable<String?>(nombres);
    }
    if (!nullToAbsent || apellidoPaterno != null) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno);
    }
    if (!nullToAbsent || apellidoMaterno != null) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno);
    }
    if (!nullToAbsent || celular != null) {
      map['celular'] = Variable<String?>(celular);
    }
    if (!nullToAbsent || telefono != null) {
      map['telefono'] = Variable<String?>(telefono);
    }
    if (!nullToAbsent || foto != null) {
      map['foto'] = Variable<String?>(foto);
    }
    if (!nullToAbsent || fechaNac != null) {
      map['fecha_nac'] = Variable<String?>(fechaNac);
    }
    if (!nullToAbsent || genero != null) {
      map['genero'] = Variable<String?>(genero);
    }
    if (!nullToAbsent || estadoCivil != null) {
      map['estado_civil'] = Variable<String?>(estadoCivil);
    }
    if (!nullToAbsent || numDoc != null) {
      map['num_doc'] = Variable<String?>(numDoc);
    }
    if (!nullToAbsent || ocupacion != null) {
      map['ocupacion'] = Variable<String?>(ocupacion);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || correo != null) {
      map['correo'] = Variable<String?>(correo);
    }
    if (!nullToAbsent || empleadoId != null) {
      map['empleado_id'] = Variable<int?>(empleadoId);
    }
    return map;
  }

  PersonaEventoCompanion toCompanion(bool nullToAbsent) {
    return PersonaEventoCompanion(
      personaId: Value(personaId),
      nombres: nombres == null && nullToAbsent
          ? const Value.absent()
          : Value(nombres),
      apellidoPaterno: apellidoPaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoPaterno),
      apellidoMaterno: apellidoMaterno == null && nullToAbsent
          ? const Value.absent()
          : Value(apellidoMaterno),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      telefono: telefono == null && nullToAbsent
          ? const Value.absent()
          : Value(telefono),
      foto: foto == null && nullToAbsent ? const Value.absent() : Value(foto),
      fechaNac: fechaNac == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaNac),
      genero:
          genero == null && nullToAbsent ? const Value.absent() : Value(genero),
      estadoCivil: estadoCivil == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoCivil),
      numDoc:
          numDoc == null && nullToAbsent ? const Value.absent() : Value(numDoc),
      ocupacion: ocupacion == null && nullToAbsent
          ? const Value.absent()
          : Value(ocupacion),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      correo:
          correo == null && nullToAbsent ? const Value.absent() : Value(correo),
      empleadoId: empleadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(empleadoId),
    );
  }

  factory PersonaEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PersonaEventoData(
      personaId: serializer.fromJson<int>(json['personaId']),
      nombres: serializer.fromJson<String?>(json['nombres']),
      apellidoPaterno: serializer.fromJson<String?>(json['apellidoPaterno']),
      apellidoMaterno: serializer.fromJson<String?>(json['apellidoMaterno']),
      celular: serializer.fromJson<String?>(json['celular']),
      telefono: serializer.fromJson<String?>(json['telefono']),
      foto: serializer.fromJson<String?>(json['foto']),
      fechaNac: serializer.fromJson<String?>(json['fechaNac']),
      genero: serializer.fromJson<String?>(json['genero']),
      estadoCivil: serializer.fromJson<String?>(json['estadoCivil']),
      numDoc: serializer.fromJson<String?>(json['numDoc']),
      ocupacion: serializer.fromJson<String?>(json['ocupacion']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      correo: serializer.fromJson<String?>(json['correo']),
      empleadoId: serializer.fromJson<int?>(json['empleadoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'personaId': serializer.toJson<int>(personaId),
      'nombres': serializer.toJson<String?>(nombres),
      'apellidoPaterno': serializer.toJson<String?>(apellidoPaterno),
      'apellidoMaterno': serializer.toJson<String?>(apellidoMaterno),
      'celular': serializer.toJson<String?>(celular),
      'telefono': serializer.toJson<String?>(telefono),
      'foto': serializer.toJson<String?>(foto),
      'fechaNac': serializer.toJson<String?>(fechaNac),
      'genero': serializer.toJson<String?>(genero),
      'estadoCivil': serializer.toJson<String?>(estadoCivil),
      'numDoc': serializer.toJson<String?>(numDoc),
      'ocupacion': serializer.toJson<String?>(ocupacion),
      'estadoId': serializer.toJson<int?>(estadoId),
      'correo': serializer.toJson<String?>(correo),
      'empleadoId': serializer.toJson<int?>(empleadoId),
    };
  }

  PersonaEventoData copyWith(
          {int? personaId,
          String? nombres,
          String? apellidoPaterno,
          String? apellidoMaterno,
          String? celular,
          String? telefono,
          String? foto,
          String? fechaNac,
          String? genero,
          String? estadoCivil,
          String? numDoc,
          String? ocupacion,
          int? estadoId,
          String? correo,
          int? empleadoId}) =>
      PersonaEventoData(
        personaId: personaId ?? this.personaId,
        nombres: nombres ?? this.nombres,
        apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
        apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
        celular: celular ?? this.celular,
        telefono: telefono ?? this.telefono,
        foto: foto ?? this.foto,
        fechaNac: fechaNac ?? this.fechaNac,
        genero: genero ?? this.genero,
        estadoCivil: estadoCivil ?? this.estadoCivil,
        numDoc: numDoc ?? this.numDoc,
        ocupacion: ocupacion ?? this.ocupacion,
        estadoId: estadoId ?? this.estadoId,
        correo: correo ?? this.correo,
        empleadoId: empleadoId ?? this.empleadoId,
      );
  @override
  String toString() {
    return (StringBuffer('PersonaEventoData(')
          ..write('personaId: $personaId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('celular: $celular, ')
          ..write('telefono: $telefono, ')
          ..write('foto: $foto, ')
          ..write('fechaNac: $fechaNac, ')
          ..write('genero: $genero, ')
          ..write('estadoCivil: $estadoCivil, ')
          ..write('numDoc: $numDoc, ')
          ..write('ocupacion: $ocupacion, ')
          ..write('estadoId: $estadoId, ')
          ..write('correo: $correo, ')
          ..write('empleadoId: $empleadoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      personaId.hashCode,
      $mrjc(
          nombres.hashCode,
          $mrjc(
              apellidoPaterno.hashCode,
              $mrjc(
                  apellidoMaterno.hashCode,
                  $mrjc(
                      celular.hashCode,
                      $mrjc(
                          telefono.hashCode,
                          $mrjc(
                              foto.hashCode,
                              $mrjc(
                                  fechaNac.hashCode,
                                  $mrjc(
                                      genero.hashCode,
                                      $mrjc(
                                          estadoCivil.hashCode,
                                          $mrjc(
                                              numDoc.hashCode,
                                              $mrjc(
                                                  ocupacion.hashCode,
                                                  $mrjc(
                                                      estadoId.hashCode,
                                                      $mrjc(
                                                          correo.hashCode,
                                                          empleadoId
                                                              .hashCode)))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PersonaEventoData &&
          other.personaId == this.personaId &&
          other.nombres == this.nombres &&
          other.apellidoPaterno == this.apellidoPaterno &&
          other.apellidoMaterno == this.apellidoMaterno &&
          other.celular == this.celular &&
          other.telefono == this.telefono &&
          other.foto == this.foto &&
          other.fechaNac == this.fechaNac &&
          other.genero == this.genero &&
          other.estadoCivil == this.estadoCivil &&
          other.numDoc == this.numDoc &&
          other.ocupacion == this.ocupacion &&
          other.estadoId == this.estadoId &&
          other.correo == this.correo &&
          other.empleadoId == this.empleadoId);
}

class PersonaEventoCompanion extends UpdateCompanion<PersonaEventoData> {
  final Value<int> personaId;
  final Value<String?> nombres;
  final Value<String?> apellidoPaterno;
  final Value<String?> apellidoMaterno;
  final Value<String?> celular;
  final Value<String?> telefono;
  final Value<String?> foto;
  final Value<String?> fechaNac;
  final Value<String?> genero;
  final Value<String?> estadoCivil;
  final Value<String?> numDoc;
  final Value<String?> ocupacion;
  final Value<int?> estadoId;
  final Value<String?> correo;
  final Value<int?> empleadoId;
  const PersonaEventoCompanion({
    this.personaId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.celular = const Value.absent(),
    this.telefono = const Value.absent(),
    this.foto = const Value.absent(),
    this.fechaNac = const Value.absent(),
    this.genero = const Value.absent(),
    this.estadoCivil = const Value.absent(),
    this.numDoc = const Value.absent(),
    this.ocupacion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.correo = const Value.absent(),
    this.empleadoId = const Value.absent(),
  });
  PersonaEventoCompanion.insert({
    this.personaId = const Value.absent(),
    this.nombres = const Value.absent(),
    this.apellidoPaterno = const Value.absent(),
    this.apellidoMaterno = const Value.absent(),
    this.celular = const Value.absent(),
    this.telefono = const Value.absent(),
    this.foto = const Value.absent(),
    this.fechaNac = const Value.absent(),
    this.genero = const Value.absent(),
    this.estadoCivil = const Value.absent(),
    this.numDoc = const Value.absent(),
    this.ocupacion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.correo = const Value.absent(),
    this.empleadoId = const Value.absent(),
  });
  static Insertable<PersonaEventoData> custom({
    Expression<int>? personaId,
    Expression<String?>? nombres,
    Expression<String?>? apellidoPaterno,
    Expression<String?>? apellidoMaterno,
    Expression<String?>? celular,
    Expression<String?>? telefono,
    Expression<String?>? foto,
    Expression<String?>? fechaNac,
    Expression<String?>? genero,
    Expression<String?>? estadoCivil,
    Expression<String?>? numDoc,
    Expression<String?>? ocupacion,
    Expression<int?>? estadoId,
    Expression<String?>? correo,
    Expression<int?>? empleadoId,
  }) {
    return RawValuesInsertable({
      if (personaId != null) 'persona_id': personaId,
      if (nombres != null) 'nombres': nombres,
      if (apellidoPaterno != null) 'apellido_paterno': apellidoPaterno,
      if (apellidoMaterno != null) 'apellido_materno': apellidoMaterno,
      if (celular != null) 'celular': celular,
      if (telefono != null) 'telefono': telefono,
      if (foto != null) 'foto': foto,
      if (fechaNac != null) 'fecha_nac': fechaNac,
      if (genero != null) 'genero': genero,
      if (estadoCivil != null) 'estado_civil': estadoCivil,
      if (numDoc != null) 'num_doc': numDoc,
      if (ocupacion != null) 'ocupacion': ocupacion,
      if (estadoId != null) 'estado_id': estadoId,
      if (correo != null) 'correo': correo,
      if (empleadoId != null) 'empleado_id': empleadoId,
    });
  }

  PersonaEventoCompanion copyWith(
      {Value<int>? personaId,
      Value<String?>? nombres,
      Value<String?>? apellidoPaterno,
      Value<String?>? apellidoMaterno,
      Value<String?>? celular,
      Value<String?>? telefono,
      Value<String?>? foto,
      Value<String?>? fechaNac,
      Value<String?>? genero,
      Value<String?>? estadoCivil,
      Value<String?>? numDoc,
      Value<String?>? ocupacion,
      Value<int?>? estadoId,
      Value<String?>? correo,
      Value<int?>? empleadoId}) {
    return PersonaEventoCompanion(
      personaId: personaId ?? this.personaId,
      nombres: nombres ?? this.nombres,
      apellidoPaterno: apellidoPaterno ?? this.apellidoPaterno,
      apellidoMaterno: apellidoMaterno ?? this.apellidoMaterno,
      celular: celular ?? this.celular,
      telefono: telefono ?? this.telefono,
      foto: foto ?? this.foto,
      fechaNac: fechaNac ?? this.fechaNac,
      genero: genero ?? this.genero,
      estadoCivil: estadoCivil ?? this.estadoCivil,
      numDoc: numDoc ?? this.numDoc,
      ocupacion: ocupacion ?? this.ocupacion,
      estadoId: estadoId ?? this.estadoId,
      correo: correo ?? this.correo,
      empleadoId: empleadoId ?? this.empleadoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (personaId.present) {
      map['persona_id'] = Variable<int>(personaId.value);
    }
    if (nombres.present) {
      map['nombres'] = Variable<String?>(nombres.value);
    }
    if (apellidoPaterno.present) {
      map['apellido_paterno'] = Variable<String?>(apellidoPaterno.value);
    }
    if (apellidoMaterno.present) {
      map['apellido_materno'] = Variable<String?>(apellidoMaterno.value);
    }
    if (celular.present) {
      map['celular'] = Variable<String?>(celular.value);
    }
    if (telefono.present) {
      map['telefono'] = Variable<String?>(telefono.value);
    }
    if (foto.present) {
      map['foto'] = Variable<String?>(foto.value);
    }
    if (fechaNac.present) {
      map['fecha_nac'] = Variable<String?>(fechaNac.value);
    }
    if (genero.present) {
      map['genero'] = Variable<String?>(genero.value);
    }
    if (estadoCivil.present) {
      map['estado_civil'] = Variable<String?>(estadoCivil.value);
    }
    if (numDoc.present) {
      map['num_doc'] = Variable<String?>(numDoc.value);
    }
    if (ocupacion.present) {
      map['ocupacion'] = Variable<String?>(ocupacion.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (correo.present) {
      map['correo'] = Variable<String?>(correo.value);
    }
    if (empleadoId.present) {
      map['empleado_id'] = Variable<int?>(empleadoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PersonaEventoCompanion(')
          ..write('personaId: $personaId, ')
          ..write('nombres: $nombres, ')
          ..write('apellidoPaterno: $apellidoPaterno, ')
          ..write('apellidoMaterno: $apellidoMaterno, ')
          ..write('celular: $celular, ')
          ..write('telefono: $telefono, ')
          ..write('foto: $foto, ')
          ..write('fechaNac: $fechaNac, ')
          ..write('genero: $genero, ')
          ..write('estadoCivil: $estadoCivil, ')
          ..write('numDoc: $numDoc, ')
          ..write('ocupacion: $ocupacion, ')
          ..write('estadoId: $estadoId, ')
          ..write('correo: $correo, ')
          ..write('empleadoId: $empleadoId')
          ..write(')'))
        .toString();
  }
}

class $PersonaEventoTable extends PersonaEvento
    with TableInfo<$PersonaEventoTable, PersonaEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $PersonaEventoTable(this._db, [this._alias]);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombresMeta = const VerificationMeta('nombres');
  late final GeneratedColumn<String?> nombres = GeneratedColumn<String?>(
      'nombres', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoPaternoMeta =
      const VerificationMeta('apellidoPaterno');
  late final GeneratedColumn<String?> apellidoPaterno =
      GeneratedColumn<String?>('apellido_paterno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _apellidoMaternoMeta =
      const VerificationMeta('apellidoMaterno');
  late final GeneratedColumn<String?> apellidoMaterno =
      GeneratedColumn<String?>('apellido_materno', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
      'celular', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _telefonoMeta = const VerificationMeta('telefono');
  late final GeneratedColumn<String?> telefono = GeneratedColumn<String?>(
      'telefono', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fotoMeta = const VerificationMeta('foto');
  late final GeneratedColumn<String?> foto = GeneratedColumn<String?>(
      'foto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaNacMeta = const VerificationMeta('fechaNac');
  late final GeneratedColumn<String?> fechaNac = GeneratedColumn<String?>(
      'fecha_nac', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _generoMeta = const VerificationMeta('genero');
  late final GeneratedColumn<String?> genero = GeneratedColumn<String?>(
      'genero', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoCivilMeta =
      const VerificationMeta('estadoCivil');
  late final GeneratedColumn<String?> estadoCivil = GeneratedColumn<String?>(
      'estado_civil', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _numDocMeta = const VerificationMeta('numDoc');
  late final GeneratedColumn<String?> numDoc = GeneratedColumn<String?>(
      'num_doc', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _ocupacionMeta = const VerificationMeta('ocupacion');
  late final GeneratedColumn<String?> ocupacion = GeneratedColumn<String?>(
      'ocupacion', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _correoMeta = const VerificationMeta('correo');
  late final GeneratedColumn<String?> correo = GeneratedColumn<String?>(
      'correo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _empleadoIdMeta = const VerificationMeta('empleadoId');
  late final GeneratedColumn<int?> empleadoId = GeneratedColumn<int?>(
      'empleado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        personaId,
        nombres,
        apellidoPaterno,
        apellidoMaterno,
        celular,
        telefono,
        foto,
        fechaNac,
        genero,
        estadoCivil,
        numDoc,
        ocupacion,
        estadoId,
        correo,
        empleadoId
      ];
  @override
  String get aliasedName => _alias ?? 'persona_evento';
  @override
  String get actualTableName => 'persona_evento';
  @override
  VerificationContext validateIntegrity(Insertable<PersonaEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    }
    if (data.containsKey('nombres')) {
      context.handle(_nombresMeta,
          nombres.isAcceptableOrUnknown(data['nombres']!, _nombresMeta));
    }
    if (data.containsKey('apellido_paterno')) {
      context.handle(
          _apellidoPaternoMeta,
          apellidoPaterno.isAcceptableOrUnknown(
              data['apellido_paterno']!, _apellidoPaternoMeta));
    }
    if (data.containsKey('apellido_materno')) {
      context.handle(
          _apellidoMaternoMeta,
          apellidoMaterno.isAcceptableOrUnknown(
              data['apellido_materno']!, _apellidoMaternoMeta));
    }
    if (data.containsKey('celular')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['celular']!, _celularMeta));
    }
    if (data.containsKey('telefono')) {
      context.handle(_telefonoMeta,
          telefono.isAcceptableOrUnknown(data['telefono']!, _telefonoMeta));
    }
    if (data.containsKey('foto')) {
      context.handle(
          _fotoMeta, foto.isAcceptableOrUnknown(data['foto']!, _fotoMeta));
    }
    if (data.containsKey('fecha_nac')) {
      context.handle(_fechaNacMeta,
          fechaNac.isAcceptableOrUnknown(data['fecha_nac']!, _fechaNacMeta));
    }
    if (data.containsKey('genero')) {
      context.handle(_generoMeta,
          genero.isAcceptableOrUnknown(data['genero']!, _generoMeta));
    }
    if (data.containsKey('estado_civil')) {
      context.handle(
          _estadoCivilMeta,
          estadoCivil.isAcceptableOrUnknown(
              data['estado_civil']!, _estadoCivilMeta));
    }
    if (data.containsKey('num_doc')) {
      context.handle(_numDocMeta,
          numDoc.isAcceptableOrUnknown(data['num_doc']!, _numDocMeta));
    }
    if (data.containsKey('ocupacion')) {
      context.handle(_ocupacionMeta,
          ocupacion.isAcceptableOrUnknown(data['ocupacion']!, _ocupacionMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('correo')) {
      context.handle(_correoMeta,
          correo.isAcceptableOrUnknown(data['correo']!, _correoMeta));
    }
    if (data.containsKey('empleado_id')) {
      context.handle(
          _empleadoIdMeta,
          empleadoId.isAcceptableOrUnknown(
              data['empleado_id']!, _empleadoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {personaId};
  @override
  PersonaEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PersonaEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PersonaEventoTable createAlias(String alias) {
    return $PersonaEventoTable(_db, alias);
  }
}

class RelacionesEventoData extends DataClass
    implements Insertable<RelacionesEventoData> {
  final int idRelacion;
  final int? personaPrincipalId;
  final int? personaVinculadaId;
  final int? tipoId;
  final bool? activo;
  RelacionesEventoData(
      {required this.idRelacion,
      this.personaPrincipalId,
      this.personaVinculadaId,
      this.tipoId,
      this.activo});
  factory RelacionesEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RelacionesEventoData(
      idRelacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}id_relacion'])!,
      personaPrincipalId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}persona_principal_id']),
      personaVinculadaId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}persona_vinculada_id']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      activo: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}activo']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id_relacion'] = Variable<int>(idRelacion);
    if (!nullToAbsent || personaPrincipalId != null) {
      map['persona_principal_id'] = Variable<int?>(personaPrincipalId);
    }
    if (!nullToAbsent || personaVinculadaId != null) {
      map['persona_vinculada_id'] = Variable<int?>(personaVinculadaId);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || activo != null) {
      map['activo'] = Variable<bool?>(activo);
    }
    return map;
  }

  RelacionesEventoCompanion toCompanion(bool nullToAbsent) {
    return RelacionesEventoCompanion(
      idRelacion: Value(idRelacion),
      personaPrincipalId: personaPrincipalId == null && nullToAbsent
          ? const Value.absent()
          : Value(personaPrincipalId),
      personaVinculadaId: personaVinculadaId == null && nullToAbsent
          ? const Value.absent()
          : Value(personaVinculadaId),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      activo:
          activo == null && nullToAbsent ? const Value.absent() : Value(activo),
    );
  }

  factory RelacionesEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RelacionesEventoData(
      idRelacion: serializer.fromJson<int>(json['idRelacion']),
      personaPrincipalId: serializer.fromJson<int?>(json['personaPrincipalId']),
      personaVinculadaId: serializer.fromJson<int?>(json['personaVinculadaId']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      activo: serializer.fromJson<bool?>(json['activo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'idRelacion': serializer.toJson<int>(idRelacion),
      'personaPrincipalId': serializer.toJson<int?>(personaPrincipalId),
      'personaVinculadaId': serializer.toJson<int?>(personaVinculadaId),
      'tipoId': serializer.toJson<int?>(tipoId),
      'activo': serializer.toJson<bool?>(activo),
    };
  }

  RelacionesEventoData copyWith(
          {int? idRelacion,
          int? personaPrincipalId,
          int? personaVinculadaId,
          int? tipoId,
          bool? activo}) =>
      RelacionesEventoData(
        idRelacion: idRelacion ?? this.idRelacion,
        personaPrincipalId: personaPrincipalId ?? this.personaPrincipalId,
        personaVinculadaId: personaVinculadaId ?? this.personaVinculadaId,
        tipoId: tipoId ?? this.tipoId,
        activo: activo ?? this.activo,
      );
  @override
  String toString() {
    return (StringBuffer('RelacionesEventoData(')
          ..write('idRelacion: $idRelacion, ')
          ..write('personaPrincipalId: $personaPrincipalId, ')
          ..write('personaVinculadaId: $personaVinculadaId, ')
          ..write('tipoId: $tipoId, ')
          ..write('activo: $activo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      idRelacion.hashCode,
      $mrjc(
          personaPrincipalId.hashCode,
          $mrjc(personaVinculadaId.hashCode,
              $mrjc(tipoId.hashCode, activo.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RelacionesEventoData &&
          other.idRelacion == this.idRelacion &&
          other.personaPrincipalId == this.personaPrincipalId &&
          other.personaVinculadaId == this.personaVinculadaId &&
          other.tipoId == this.tipoId &&
          other.activo == this.activo);
}

class RelacionesEventoCompanion extends UpdateCompanion<RelacionesEventoData> {
  final Value<int> idRelacion;
  final Value<int?> personaPrincipalId;
  final Value<int?> personaVinculadaId;
  final Value<int?> tipoId;
  final Value<bool?> activo;
  const RelacionesEventoCompanion({
    this.idRelacion = const Value.absent(),
    this.personaPrincipalId = const Value.absent(),
    this.personaVinculadaId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.activo = const Value.absent(),
  });
  RelacionesEventoCompanion.insert({
    this.idRelacion = const Value.absent(),
    this.personaPrincipalId = const Value.absent(),
    this.personaVinculadaId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.activo = const Value.absent(),
  });
  static Insertable<RelacionesEventoData> custom({
    Expression<int>? idRelacion,
    Expression<int?>? personaPrincipalId,
    Expression<int?>? personaVinculadaId,
    Expression<int?>? tipoId,
    Expression<bool?>? activo,
  }) {
    return RawValuesInsertable({
      if (idRelacion != null) 'id_relacion': idRelacion,
      if (personaPrincipalId != null)
        'persona_principal_id': personaPrincipalId,
      if (personaVinculadaId != null)
        'persona_vinculada_id': personaVinculadaId,
      if (tipoId != null) 'tipo_id': tipoId,
      if (activo != null) 'activo': activo,
    });
  }

  RelacionesEventoCompanion copyWith(
      {Value<int>? idRelacion,
      Value<int?>? personaPrincipalId,
      Value<int?>? personaVinculadaId,
      Value<int?>? tipoId,
      Value<bool?>? activo}) {
    return RelacionesEventoCompanion(
      idRelacion: idRelacion ?? this.idRelacion,
      personaPrincipalId: personaPrincipalId ?? this.personaPrincipalId,
      personaVinculadaId: personaVinculadaId ?? this.personaVinculadaId,
      tipoId: tipoId ?? this.tipoId,
      activo: activo ?? this.activo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (idRelacion.present) {
      map['id_relacion'] = Variable<int>(idRelacion.value);
    }
    if (personaPrincipalId.present) {
      map['persona_principal_id'] = Variable<int?>(personaPrincipalId.value);
    }
    if (personaVinculadaId.present) {
      map['persona_vinculada_id'] = Variable<int?>(personaVinculadaId.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (activo.present) {
      map['activo'] = Variable<bool?>(activo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RelacionesEventoCompanion(')
          ..write('idRelacion: $idRelacion, ')
          ..write('personaPrincipalId: $personaPrincipalId, ')
          ..write('personaVinculadaId: $personaVinculadaId, ')
          ..write('tipoId: $tipoId, ')
          ..write('activo: $activo')
          ..write(')'))
        .toString();
  }
}

class $RelacionesEventoTable extends RelacionesEvento
    with TableInfo<$RelacionesEventoTable, RelacionesEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RelacionesEventoTable(this._db, [this._alias]);
  final VerificationMeta _idRelacionMeta = const VerificationMeta('idRelacion');
  late final GeneratedColumn<int?> idRelacion = GeneratedColumn<int?>(
      'id_relacion', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _personaPrincipalIdMeta =
      const VerificationMeta('personaPrincipalId');
  late final GeneratedColumn<int?> personaPrincipalId = GeneratedColumn<int?>(
      'persona_principal_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _personaVinculadaIdMeta =
      const VerificationMeta('personaVinculadaId');
  late final GeneratedColumn<int?> personaVinculadaId = GeneratedColumn<int?>(
      'persona_vinculada_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _activoMeta = const VerificationMeta('activo');
  late final GeneratedColumn<bool?> activo = GeneratedColumn<bool?>(
      'activo', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (activo IN (0, 1))');
  @override
  List<GeneratedColumn> get $columns =>
      [idRelacion, personaPrincipalId, personaVinculadaId, tipoId, activo];
  @override
  String get aliasedName => _alias ?? 'relaciones_evento';
  @override
  String get actualTableName => 'relaciones_evento';
  @override
  VerificationContext validateIntegrity(
      Insertable<RelacionesEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id_relacion')) {
      context.handle(
          _idRelacionMeta,
          idRelacion.isAcceptableOrUnknown(
              data['id_relacion']!, _idRelacionMeta));
    }
    if (data.containsKey('persona_principal_id')) {
      context.handle(
          _personaPrincipalIdMeta,
          personaPrincipalId.isAcceptableOrUnknown(
              data['persona_principal_id']!, _personaPrincipalIdMeta));
    }
    if (data.containsKey('persona_vinculada_id')) {
      context.handle(
          _personaVinculadaIdMeta,
          personaVinculadaId.isAcceptableOrUnknown(
              data['persona_vinculada_id']!, _personaVinculadaIdMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('activo')) {
      context.handle(_activoMeta,
          activo.isAcceptableOrUnknown(data['activo']!, _activoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {idRelacion};
  @override
  RelacionesEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return RelacionesEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RelacionesEventoTable createAlias(String alias) {
    return $RelacionesEventoTable(_db, alias);
  }
}

class TipoEventoData extends DataClass implements Insertable<TipoEventoData> {
  final int tipoId;
  final String? objeto;
  final String? concepto;
  final String? nombre;
  final String? codigo;
  final int? estado;
  final int? parentId;
  TipoEventoData(
      {required this.tipoId,
      this.objeto,
      this.concepto,
      this.nombre,
      this.codigo,
      this.estado,
      this.parentId});
  factory TipoEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TipoEventoData(
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id'])!,
      objeto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}objeto']),
      concepto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}concepto']),
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      codigo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}codigo']),
      estado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      parentId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parent_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['tipo_id'] = Variable<int>(tipoId);
    if (!nullToAbsent || objeto != null) {
      map['objeto'] = Variable<String?>(objeto);
    }
    if (!nullToAbsent || concepto != null) {
      map['concepto'] = Variable<String?>(concepto);
    }
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || codigo != null) {
      map['codigo'] = Variable<String?>(codigo);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<int?>(estado);
    }
    if (!nullToAbsent || parentId != null) {
      map['parent_id'] = Variable<int?>(parentId);
    }
    return map;
  }

  TipoEventoCompanion toCompanion(bool nullToAbsent) {
    return TipoEventoCompanion(
      tipoId: Value(tipoId),
      objeto:
          objeto == null && nullToAbsent ? const Value.absent() : Value(objeto),
      concepto: concepto == null && nullToAbsent
          ? const Value.absent()
          : Value(concepto),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      parentId: parentId == null && nullToAbsent
          ? const Value.absent()
          : Value(parentId),
    );
  }

  factory TipoEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return TipoEventoData(
      tipoId: serializer.fromJson<int>(json['tipoId']),
      objeto: serializer.fromJson<String?>(json['objeto']),
      concepto: serializer.fromJson<String?>(json['concepto']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      estado: serializer.fromJson<int?>(json['estado']),
      parentId: serializer.fromJson<int?>(json['parentId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'tipoId': serializer.toJson<int>(tipoId),
      'objeto': serializer.toJson<String?>(objeto),
      'concepto': serializer.toJson<String?>(concepto),
      'nombre': serializer.toJson<String?>(nombre),
      'codigo': serializer.toJson<String?>(codigo),
      'estado': serializer.toJson<int?>(estado),
      'parentId': serializer.toJson<int?>(parentId),
    };
  }

  TipoEventoData copyWith(
          {int? tipoId,
          String? objeto,
          String? concepto,
          String? nombre,
          String? codigo,
          int? estado,
          int? parentId}) =>
      TipoEventoData(
        tipoId: tipoId ?? this.tipoId,
        objeto: objeto ?? this.objeto,
        concepto: concepto ?? this.concepto,
        nombre: nombre ?? this.nombre,
        codigo: codigo ?? this.codigo,
        estado: estado ?? this.estado,
        parentId: parentId ?? this.parentId,
      );
  @override
  String toString() {
    return (StringBuffer('TipoEventoData(')
          ..write('tipoId: $tipoId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('codigo: $codigo, ')
          ..write('estado: $estado, ')
          ..write('parentId: $parentId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      tipoId.hashCode,
      $mrjc(
          objeto.hashCode,
          $mrjc(
              concepto.hashCode,
              $mrjc(
                  nombre.hashCode,
                  $mrjc(codigo.hashCode,
                      $mrjc(estado.hashCode, parentId.hashCode)))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TipoEventoData &&
          other.tipoId == this.tipoId &&
          other.objeto == this.objeto &&
          other.concepto == this.concepto &&
          other.nombre == this.nombre &&
          other.codigo == this.codigo &&
          other.estado == this.estado &&
          other.parentId == this.parentId);
}

class TipoEventoCompanion extends UpdateCompanion<TipoEventoData> {
  final Value<int> tipoId;
  final Value<String?> objeto;
  final Value<String?> concepto;
  final Value<String?> nombre;
  final Value<String?> codigo;
  final Value<int?> estado;
  final Value<int?> parentId;
  const TipoEventoCompanion({
    this.tipoId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.codigo = const Value.absent(),
    this.estado = const Value.absent(),
    this.parentId = const Value.absent(),
  });
  TipoEventoCompanion.insert({
    this.tipoId = const Value.absent(),
    this.objeto = const Value.absent(),
    this.concepto = const Value.absent(),
    this.nombre = const Value.absent(),
    this.codigo = const Value.absent(),
    this.estado = const Value.absent(),
    this.parentId = const Value.absent(),
  });
  static Insertable<TipoEventoData> custom({
    Expression<int>? tipoId,
    Expression<String?>? objeto,
    Expression<String?>? concepto,
    Expression<String?>? nombre,
    Expression<String?>? codigo,
    Expression<int?>? estado,
    Expression<int?>? parentId,
  }) {
    return RawValuesInsertable({
      if (tipoId != null) 'tipo_id': tipoId,
      if (objeto != null) 'objeto': objeto,
      if (concepto != null) 'concepto': concepto,
      if (nombre != null) 'nombre': nombre,
      if (codigo != null) 'codigo': codigo,
      if (estado != null) 'estado': estado,
      if (parentId != null) 'parent_id': parentId,
    });
  }

  TipoEventoCompanion copyWith(
      {Value<int>? tipoId,
      Value<String?>? objeto,
      Value<String?>? concepto,
      Value<String?>? nombre,
      Value<String?>? codigo,
      Value<int?>? estado,
      Value<int?>? parentId}) {
    return TipoEventoCompanion(
      tipoId: tipoId ?? this.tipoId,
      objeto: objeto ?? this.objeto,
      concepto: concepto ?? this.concepto,
      nombre: nombre ?? this.nombre,
      codigo: codigo ?? this.codigo,
      estado: estado ?? this.estado,
      parentId: parentId ?? this.parentId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (tipoId.present) {
      map['tipo_id'] = Variable<int>(tipoId.value);
    }
    if (objeto.present) {
      map['objeto'] = Variable<String?>(objeto.value);
    }
    if (concepto.present) {
      map['concepto'] = Variable<String?>(concepto.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (codigo.present) {
      map['codigo'] = Variable<String?>(codigo.value);
    }
    if (estado.present) {
      map['estado'] = Variable<int?>(estado.value);
    }
    if (parentId.present) {
      map['parent_id'] = Variable<int?>(parentId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TipoEventoCompanion(')
          ..write('tipoId: $tipoId, ')
          ..write('objeto: $objeto, ')
          ..write('concepto: $concepto, ')
          ..write('nombre: $nombre, ')
          ..write('codigo: $codigo, ')
          ..write('estado: $estado, ')
          ..write('parentId: $parentId')
          ..write(')'))
        .toString();
  }
}

class $TipoEventoTable extends TipoEvento
    with TableInfo<$TipoEventoTable, TipoEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $TipoEventoTable(this._db, [this._alias]);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _objetoMeta = const VerificationMeta('objeto');
  late final GeneratedColumn<String?> objeto = GeneratedColumn<String?>(
      'objeto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _conceptoMeta = const VerificationMeta('concepto');
  late final GeneratedColumn<String?> concepto = GeneratedColumn<String?>(
      'concepto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
      'codigo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<int?> estado = GeneratedColumn<int?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _parentIdMeta = const VerificationMeta('parentId');
  late final GeneratedColumn<int?> parentId = GeneratedColumn<int?>(
      'parent_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [tipoId, objeto, concepto, nombre, codigo, estado, parentId];
  @override
  String get aliasedName => _alias ?? 'tipo_evento';
  @override
  String get actualTableName => 'tipo_evento';
  @override
  VerificationContext validateIntegrity(Insertable<TipoEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('objeto')) {
      context.handle(_objetoMeta,
          objeto.isAcceptableOrUnknown(data['objeto']!, _objetoMeta));
    }
    if (data.containsKey('concepto')) {
      context.handle(_conceptoMeta,
          concepto.isAcceptableOrUnknown(data['concepto']!, _conceptoMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('codigo')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['codigo']!, _codigoMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('parent_id')) {
      context.handle(_parentIdMeta,
          parentId.isAcceptableOrUnknown(data['parent_id']!, _parentIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {tipoId};
  @override
  TipoEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TipoEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TipoEventoTable createAlias(String alias) {
    return $TipoEventoTable(_db, alias);
  }
}

class UsuarioEventoData extends DataClass
    implements Insertable<UsuarioEventoData> {
  final int usuarioId;
  final int? personaId;
  final bool? estado;
  final int? entidadId;
  final int? georeferenciaId;
  UsuarioEventoData(
      {required this.usuarioId,
      this.personaId,
      this.estado,
      this.entidadId,
      this.georeferenciaId});
  factory UsuarioEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return UsuarioEventoData(
      usuarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_id'])!,
      personaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}persona_id']),
      estado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['usuario_id'] = Variable<int>(usuarioId);
    if (!nullToAbsent || personaId != null) {
      map['persona_id'] = Variable<int?>(personaId);
    }
    if (!nullToAbsent || estado != null) {
      map['estado'] = Variable<bool?>(estado);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    return map;
  }

  UsuarioEventoCompanion toCompanion(bool nullToAbsent) {
    return UsuarioEventoCompanion(
      usuarioId: Value(usuarioId),
      personaId: personaId == null && nullToAbsent
          ? const Value.absent()
          : Value(personaId),
      estado:
          estado == null && nullToAbsent ? const Value.absent() : Value(estado),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
    );
  }

  factory UsuarioEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return UsuarioEventoData(
      usuarioId: serializer.fromJson<int>(json['usuarioId']),
      personaId: serializer.fromJson<int?>(json['personaId']),
      estado: serializer.fromJson<bool?>(json['estado']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'usuarioId': serializer.toJson<int>(usuarioId),
      'personaId': serializer.toJson<int?>(personaId),
      'estado': serializer.toJson<bool?>(estado),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
    };
  }

  UsuarioEventoData copyWith(
          {int? usuarioId,
          int? personaId,
          bool? estado,
          int? entidadId,
          int? georeferenciaId}) =>
      UsuarioEventoData(
        usuarioId: usuarioId ?? this.usuarioId,
        personaId: personaId ?? this.personaId,
        estado: estado ?? this.estado,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      );
  @override
  String toString() {
    return (StringBuffer('UsuarioEventoData(')
          ..write('usuarioId: $usuarioId, ')
          ..write('personaId: $personaId, ')
          ..write('estado: $estado, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      usuarioId.hashCode,
      $mrjc(
          personaId.hashCode,
          $mrjc(estado.hashCode,
              $mrjc(entidadId.hashCode, georeferenciaId.hashCode)))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UsuarioEventoData &&
          other.usuarioId == this.usuarioId &&
          other.personaId == this.personaId &&
          other.estado == this.estado &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId);
}

class UsuarioEventoCompanion extends UpdateCompanion<UsuarioEventoData> {
  final Value<int> usuarioId;
  final Value<int?> personaId;
  final Value<bool?> estado;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  const UsuarioEventoCompanion({
    this.usuarioId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.estado = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
  });
  UsuarioEventoCompanion.insert({
    this.usuarioId = const Value.absent(),
    this.personaId = const Value.absent(),
    this.estado = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
  });
  static Insertable<UsuarioEventoData> custom({
    Expression<int>? usuarioId,
    Expression<int?>? personaId,
    Expression<bool?>? estado,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
  }) {
    return RawValuesInsertable({
      if (usuarioId != null) 'usuario_id': usuarioId,
      if (personaId != null) 'persona_id': personaId,
      if (estado != null) 'estado': estado,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
    });
  }

  UsuarioEventoCompanion copyWith(
      {Value<int>? usuarioId,
      Value<int?>? personaId,
      Value<bool?>? estado,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId}) {
    return UsuarioEventoCompanion(
      usuarioId: usuarioId ?? this.usuarioId,
      personaId: personaId ?? this.personaId,
      estado: estado ?? this.estado,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (usuarioId.present) {
      map['usuario_id'] = Variable<int>(usuarioId.value);
    }
    if (personaId.present) {
      map['persona_id'] = Variable<int?>(personaId.value);
    }
    if (estado.present) {
      map['estado'] = Variable<bool?>(estado.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UsuarioEventoCompanion(')
          ..write('usuarioId: $usuarioId, ')
          ..write('personaId: $personaId, ')
          ..write('estado: $estado, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId')
          ..write(')'))
        .toString();
  }
}

class $UsuarioEventoTable extends UsuarioEvento
    with TableInfo<$UsuarioEventoTable, UsuarioEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $UsuarioEventoTable(this._db, [this._alias]);
  final VerificationMeta _usuarioIdMeta = const VerificationMeta('usuarioId');
  late final GeneratedColumn<int?> usuarioId = GeneratedColumn<int?>(
      'usuario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _personaIdMeta = const VerificationMeta('personaId');
  late final GeneratedColumn<int?> personaId = GeneratedColumn<int?>(
      'persona_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoMeta = const VerificationMeta('estado');
  late final GeneratedColumn<bool?> estado = GeneratedColumn<bool?>(
      'estado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado IN (0, 1))');
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [usuarioId, personaId, estado, entidadId, georeferenciaId];
  @override
  String get aliasedName => _alias ?? 'usuario_evento';
  @override
  String get actualTableName => 'usuario_evento';
  @override
  VerificationContext validateIntegrity(Insertable<UsuarioEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('usuario_id')) {
      context.handle(_usuarioIdMeta,
          usuarioId.isAcceptableOrUnknown(data['usuario_id']!, _usuarioIdMeta));
    }
    if (data.containsKey('persona_id')) {
      context.handle(_personaIdMeta,
          personaId.isAcceptableOrUnknown(data['persona_id']!, _personaIdMeta));
    }
    if (data.containsKey('estado')) {
      context.handle(_estadoMeta,
          estado.isAcceptableOrUnknown(data['estado']!, _estadoMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {usuarioId};
  @override
  UsuarioEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return UsuarioEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $UsuarioEventoTable createAlias(String alias) {
    return $UsuarioEventoTable(_db, alias);
  }
}

class UnidadEventoData extends DataClass
    implements Insertable<UnidadEventoData> {
  final int unidadAprendizajeId;
  final int? nroUnidad;
  final String? titulo;
  final String? situacionSignificativa;
  final int? nroSemanas;
  final int? nroHoras;
  final int? nroSesiones;
  final int? estadoId;
  final int? silaboEventoId;
  final String? situacionSignificativaComplementaria;
  final String? desafio;
  final String? reto;
  UnidadEventoData(
      {required this.unidadAprendizajeId,
      this.nroUnidad,
      this.titulo,
      this.situacionSignificativa,
      this.nroSemanas,
      this.nroHoras,
      this.nroSesiones,
      this.estadoId,
      this.silaboEventoId,
      this.situacionSignificativaComplementaria,
      this.desafio,
      this.reto});
  factory UnidadEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return UnidadEventoData(
      unidadAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}unidad_aprendizaje_id'])!,
      nroUnidad: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_unidad']),
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      situacionSignificativa: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}situacion_significativa']),
      nroSemanas: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_semanas']),
      nroHoras: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_horas']),
      nroSesiones: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_sesiones']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id']),
      situacionSignificativaComplementaria: const StringType()
          .mapFromDatabaseResponse(
              data['${effectivePrefix}situacion_significativa_complementaria']),
      desafio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}desafio']),
      reto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}reto']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['unidad_aprendizaje_id'] = Variable<int>(unidadAprendizajeId);
    if (!nullToAbsent || nroUnidad != null) {
      map['nro_unidad'] = Variable<int?>(nroUnidad);
    }
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || situacionSignificativa != null) {
      map['situacion_significativa'] =
          Variable<String?>(situacionSignificativa);
    }
    if (!nullToAbsent || nroSemanas != null) {
      map['nro_semanas'] = Variable<int?>(nroSemanas);
    }
    if (!nullToAbsent || nroHoras != null) {
      map['nro_horas'] = Variable<int?>(nroHoras);
    }
    if (!nullToAbsent || nroSesiones != null) {
      map['nro_sesiones'] = Variable<int?>(nroSesiones);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || silaboEventoId != null) {
      map['silabo_evento_id'] = Variable<int?>(silaboEventoId);
    }
    if (!nullToAbsent || situacionSignificativaComplementaria != null) {
      map['situacion_significativa_complementaria'] =
          Variable<String?>(situacionSignificativaComplementaria);
    }
    if (!nullToAbsent || desafio != null) {
      map['desafio'] = Variable<String?>(desafio);
    }
    if (!nullToAbsent || reto != null) {
      map['reto'] = Variable<String?>(reto);
    }
    return map;
  }

  UnidadEventoCompanion toCompanion(bool nullToAbsent) {
    return UnidadEventoCompanion(
      unidadAprendizajeId: Value(unidadAprendizajeId),
      nroUnidad: nroUnidad == null && nullToAbsent
          ? const Value.absent()
          : Value(nroUnidad),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      situacionSignificativa: situacionSignificativa == null && nullToAbsent
          ? const Value.absent()
          : Value(situacionSignificativa),
      nroSemanas: nroSemanas == null && nullToAbsent
          ? const Value.absent()
          : Value(nroSemanas),
      nroHoras: nroHoras == null && nullToAbsent
          ? const Value.absent()
          : Value(nroHoras),
      nroSesiones: nroSesiones == null && nullToAbsent
          ? const Value.absent()
          : Value(nroSesiones),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      silaboEventoId: silaboEventoId == null && nullToAbsent
          ? const Value.absent()
          : Value(silaboEventoId),
      situacionSignificativaComplementaria:
          situacionSignificativaComplementaria == null && nullToAbsent
              ? const Value.absent()
              : Value(situacionSignificativaComplementaria),
      desafio: desafio == null && nullToAbsent
          ? const Value.absent()
          : Value(desafio),
      reto: reto == null && nullToAbsent ? const Value.absent() : Value(reto),
    );
  }

  factory UnidadEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return UnidadEventoData(
      unidadAprendizajeId:
          serializer.fromJson<int>(json['unidadAprendizajeId']),
      nroUnidad: serializer.fromJson<int?>(json['nroUnidad']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      situacionSignificativa:
          serializer.fromJson<String?>(json['situacionSignificativa']),
      nroSemanas: serializer.fromJson<int?>(json['nroSemanas']),
      nroHoras: serializer.fromJson<int?>(json['nroHoras']),
      nroSesiones: serializer.fromJson<int?>(json['nroSesiones']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      silaboEventoId: serializer.fromJson<int?>(json['silaboEventoId']),
      situacionSignificativaComplementaria: serializer
          .fromJson<String?>(json['situacionSignificativaComplementaria']),
      desafio: serializer.fromJson<String?>(json['desafio']),
      reto: serializer.fromJson<String?>(json['reto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'unidadAprendizajeId': serializer.toJson<int>(unidadAprendizajeId),
      'nroUnidad': serializer.toJson<int?>(nroUnidad),
      'titulo': serializer.toJson<String?>(titulo),
      'situacionSignificativa':
          serializer.toJson<String?>(situacionSignificativa),
      'nroSemanas': serializer.toJson<int?>(nroSemanas),
      'nroHoras': serializer.toJson<int?>(nroHoras),
      'nroSesiones': serializer.toJson<int?>(nroSesiones),
      'estadoId': serializer.toJson<int?>(estadoId),
      'silaboEventoId': serializer.toJson<int?>(silaboEventoId),
      'situacionSignificativaComplementaria':
          serializer.toJson<String?>(situacionSignificativaComplementaria),
      'desafio': serializer.toJson<String?>(desafio),
      'reto': serializer.toJson<String?>(reto),
    };
  }

  UnidadEventoData copyWith(
          {int? unidadAprendizajeId,
          int? nroUnidad,
          String? titulo,
          String? situacionSignificativa,
          int? nroSemanas,
          int? nroHoras,
          int? nroSesiones,
          int? estadoId,
          int? silaboEventoId,
          String? situacionSignificativaComplementaria,
          String? desafio,
          String? reto}) =>
      UnidadEventoData(
        unidadAprendizajeId: unidadAprendizajeId ?? this.unidadAprendizajeId,
        nroUnidad: nroUnidad ?? this.nroUnidad,
        titulo: titulo ?? this.titulo,
        situacionSignificativa:
            situacionSignificativa ?? this.situacionSignificativa,
        nroSemanas: nroSemanas ?? this.nroSemanas,
        nroHoras: nroHoras ?? this.nroHoras,
        nroSesiones: nroSesiones ?? this.nroSesiones,
        estadoId: estadoId ?? this.estadoId,
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
        situacionSignificativaComplementaria:
            situacionSignificativaComplementaria ??
                this.situacionSignificativaComplementaria,
        desafio: desafio ?? this.desafio,
        reto: reto ?? this.reto,
      );
  @override
  String toString() {
    return (StringBuffer('UnidadEventoData(')
          ..write('unidadAprendizajeId: $unidadAprendizajeId, ')
          ..write('nroUnidad: $nroUnidad, ')
          ..write('titulo: $titulo, ')
          ..write('situacionSignificativa: $situacionSignificativa, ')
          ..write('nroSemanas: $nroSemanas, ')
          ..write('nroHoras: $nroHoras, ')
          ..write('nroSesiones: $nroSesiones, ')
          ..write('estadoId: $estadoId, ')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write(
              'situacionSignificativaComplementaria: $situacionSignificativaComplementaria, ')
          ..write('desafio: $desafio, ')
          ..write('reto: $reto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      unidadAprendizajeId.hashCode,
      $mrjc(
          nroUnidad.hashCode,
          $mrjc(
              titulo.hashCode,
              $mrjc(
                  situacionSignificativa.hashCode,
                  $mrjc(
                      nroSemanas.hashCode,
                      $mrjc(
                          nroHoras.hashCode,
                          $mrjc(
                              nroSesiones.hashCode,
                              $mrjc(
                                  estadoId.hashCode,
                                  $mrjc(
                                      silaboEventoId.hashCode,
                                      $mrjc(
                                          situacionSignificativaComplementaria
                                              .hashCode,
                                          $mrjc(desafio.hashCode,
                                              reto.hashCode))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UnidadEventoData &&
          other.unidadAprendizajeId == this.unidadAprendizajeId &&
          other.nroUnidad == this.nroUnidad &&
          other.titulo == this.titulo &&
          other.situacionSignificativa == this.situacionSignificativa &&
          other.nroSemanas == this.nroSemanas &&
          other.nroHoras == this.nroHoras &&
          other.nroSesiones == this.nroSesiones &&
          other.estadoId == this.estadoId &&
          other.silaboEventoId == this.silaboEventoId &&
          other.situacionSignificativaComplementaria ==
              this.situacionSignificativaComplementaria &&
          other.desafio == this.desafio &&
          other.reto == this.reto);
}

class UnidadEventoCompanion extends UpdateCompanion<UnidadEventoData> {
  final Value<int> unidadAprendizajeId;
  final Value<int?> nroUnidad;
  final Value<String?> titulo;
  final Value<String?> situacionSignificativa;
  final Value<int?> nroSemanas;
  final Value<int?> nroHoras;
  final Value<int?> nroSesiones;
  final Value<int?> estadoId;
  final Value<int?> silaboEventoId;
  final Value<String?> situacionSignificativaComplementaria;
  final Value<String?> desafio;
  final Value<String?> reto;
  const UnidadEventoCompanion({
    this.unidadAprendizajeId = const Value.absent(),
    this.nroUnidad = const Value.absent(),
    this.titulo = const Value.absent(),
    this.situacionSignificativa = const Value.absent(),
    this.nroSemanas = const Value.absent(),
    this.nroHoras = const Value.absent(),
    this.nroSesiones = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.silaboEventoId = const Value.absent(),
    this.situacionSignificativaComplementaria = const Value.absent(),
    this.desafio = const Value.absent(),
    this.reto = const Value.absent(),
  });
  UnidadEventoCompanion.insert({
    this.unidadAprendizajeId = const Value.absent(),
    this.nroUnidad = const Value.absent(),
    this.titulo = const Value.absent(),
    this.situacionSignificativa = const Value.absent(),
    this.nroSemanas = const Value.absent(),
    this.nroHoras = const Value.absent(),
    this.nroSesiones = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.silaboEventoId = const Value.absent(),
    this.situacionSignificativaComplementaria = const Value.absent(),
    this.desafio = const Value.absent(),
    this.reto = const Value.absent(),
  });
  static Insertable<UnidadEventoData> custom({
    Expression<int>? unidadAprendizajeId,
    Expression<int?>? nroUnidad,
    Expression<String?>? titulo,
    Expression<String?>? situacionSignificativa,
    Expression<int?>? nroSemanas,
    Expression<int?>? nroHoras,
    Expression<int?>? nroSesiones,
    Expression<int?>? estadoId,
    Expression<int?>? silaboEventoId,
    Expression<String?>? situacionSignificativaComplementaria,
    Expression<String?>? desafio,
    Expression<String?>? reto,
  }) {
    return RawValuesInsertable({
      if (unidadAprendizajeId != null)
        'unidad_aprendizaje_id': unidadAprendizajeId,
      if (nroUnidad != null) 'nro_unidad': nroUnidad,
      if (titulo != null) 'titulo': titulo,
      if (situacionSignificativa != null)
        'situacion_significativa': situacionSignificativa,
      if (nroSemanas != null) 'nro_semanas': nroSemanas,
      if (nroHoras != null) 'nro_horas': nroHoras,
      if (nroSesiones != null) 'nro_sesiones': nroSesiones,
      if (estadoId != null) 'estado_id': estadoId,
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
      if (situacionSignificativaComplementaria != null)
        'situacion_significativa_complementaria':
            situacionSignificativaComplementaria,
      if (desafio != null) 'desafio': desafio,
      if (reto != null) 'reto': reto,
    });
  }

  UnidadEventoCompanion copyWith(
      {Value<int>? unidadAprendizajeId,
      Value<int?>? nroUnidad,
      Value<String?>? titulo,
      Value<String?>? situacionSignificativa,
      Value<int?>? nroSemanas,
      Value<int?>? nroHoras,
      Value<int?>? nroSesiones,
      Value<int?>? estadoId,
      Value<int?>? silaboEventoId,
      Value<String?>? situacionSignificativaComplementaria,
      Value<String?>? desafio,
      Value<String?>? reto}) {
    return UnidadEventoCompanion(
      unidadAprendizajeId: unidadAprendizajeId ?? this.unidadAprendizajeId,
      nroUnidad: nroUnidad ?? this.nroUnidad,
      titulo: titulo ?? this.titulo,
      situacionSignificativa:
          situacionSignificativa ?? this.situacionSignificativa,
      nroSemanas: nroSemanas ?? this.nroSemanas,
      nroHoras: nroHoras ?? this.nroHoras,
      nroSesiones: nroSesiones ?? this.nroSesiones,
      estadoId: estadoId ?? this.estadoId,
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      situacionSignificativaComplementaria:
          situacionSignificativaComplementaria ??
              this.situacionSignificativaComplementaria,
      desafio: desafio ?? this.desafio,
      reto: reto ?? this.reto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (unidadAprendizajeId.present) {
      map['unidad_aprendizaje_id'] = Variable<int>(unidadAprendizajeId.value);
    }
    if (nroUnidad.present) {
      map['nro_unidad'] = Variable<int?>(nroUnidad.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (situacionSignificativa.present) {
      map['situacion_significativa'] =
          Variable<String?>(situacionSignificativa.value);
    }
    if (nroSemanas.present) {
      map['nro_semanas'] = Variable<int?>(nroSemanas.value);
    }
    if (nroHoras.present) {
      map['nro_horas'] = Variable<int?>(nroHoras.value);
    }
    if (nroSesiones.present) {
      map['nro_sesiones'] = Variable<int?>(nroSesiones.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int?>(silaboEventoId.value);
    }
    if (situacionSignificativaComplementaria.present) {
      map['situacion_significativa_complementaria'] =
          Variable<String?>(situacionSignificativaComplementaria.value);
    }
    if (desafio.present) {
      map['desafio'] = Variable<String?>(desafio.value);
    }
    if (reto.present) {
      map['reto'] = Variable<String?>(reto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UnidadEventoCompanion(')
          ..write('unidadAprendizajeId: $unidadAprendizajeId, ')
          ..write('nroUnidad: $nroUnidad, ')
          ..write('titulo: $titulo, ')
          ..write('situacionSignificativa: $situacionSignificativa, ')
          ..write('nroSemanas: $nroSemanas, ')
          ..write('nroHoras: $nroHoras, ')
          ..write('nroSesiones: $nroSesiones, ')
          ..write('estadoId: $estadoId, ')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write(
              'situacionSignificativaComplementaria: $situacionSignificativaComplementaria, ')
          ..write('desafio: $desafio, ')
          ..write('reto: $reto')
          ..write(')'))
        .toString();
  }
}

class $UnidadEventoTable extends UnidadEvento
    with TableInfo<$UnidadEventoTable, UnidadEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $UnidadEventoTable(this._db, [this._alias]);
  final VerificationMeta _unidadAprendizajeIdMeta =
      const VerificationMeta('unidadAprendizajeId');
  late final GeneratedColumn<int?> unidadAprendizajeId = GeneratedColumn<int?>(
      'unidad_aprendizaje_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nroUnidadMeta = const VerificationMeta('nroUnidad');
  late final GeneratedColumn<int?> nroUnidad = GeneratedColumn<int?>(
      'nro_unidad', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _situacionSignificativaMeta =
      const VerificationMeta('situacionSignificativa');
  late final GeneratedColumn<String?> situacionSignificativa =
      GeneratedColumn<String?>('situacion_significativa', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nroSemanasMeta = const VerificationMeta('nroSemanas');
  late final GeneratedColumn<int?> nroSemanas = GeneratedColumn<int?>(
      'nro_semanas', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nroHorasMeta = const VerificationMeta('nroHoras');
  late final GeneratedColumn<int?> nroHoras = GeneratedColumn<int?>(
      'nro_horas', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nroSesionesMeta =
      const VerificationMeta('nroSesiones');
  late final GeneratedColumn<int?> nroSesiones = GeneratedColumn<int?>(
      'nro_sesiones', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _situacionSignificativaComplementariaMeta =
      const VerificationMeta('situacionSignificativaComplementaria');
  late final GeneratedColumn<String?> situacionSignificativaComplementaria =
      GeneratedColumn<String?>(
          'situacion_significativa_complementaria', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _desafioMeta = const VerificationMeta('desafio');
  late final GeneratedColumn<String?> desafio = GeneratedColumn<String?>(
      'desafio', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _retoMeta = const VerificationMeta('reto');
  late final GeneratedColumn<String?> reto = GeneratedColumn<String?>(
      'reto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        unidadAprendizajeId,
        nroUnidad,
        titulo,
        situacionSignificativa,
        nroSemanas,
        nroHoras,
        nroSesiones,
        estadoId,
        silaboEventoId,
        situacionSignificativaComplementaria,
        desafio,
        reto
      ];
  @override
  String get aliasedName => _alias ?? 'unidad_evento';
  @override
  String get actualTableName => 'unidad_evento';
  @override
  VerificationContext validateIntegrity(Insertable<UnidadEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('unidad_aprendizaje_id')) {
      context.handle(
          _unidadAprendizajeIdMeta,
          unidadAprendizajeId.isAcceptableOrUnknown(
              data['unidad_aprendizaje_id']!, _unidadAprendizajeIdMeta));
    }
    if (data.containsKey('nro_unidad')) {
      context.handle(_nroUnidadMeta,
          nroUnidad.isAcceptableOrUnknown(data['nro_unidad']!, _nroUnidadMeta));
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('situacion_significativa')) {
      context.handle(
          _situacionSignificativaMeta,
          situacionSignificativa.isAcceptableOrUnknown(
              data['situacion_significativa']!, _situacionSignificativaMeta));
    }
    if (data.containsKey('nro_semanas')) {
      context.handle(
          _nroSemanasMeta,
          nroSemanas.isAcceptableOrUnknown(
              data['nro_semanas']!, _nroSemanasMeta));
    }
    if (data.containsKey('nro_horas')) {
      context.handle(_nroHorasMeta,
          nroHoras.isAcceptableOrUnknown(data['nro_horas']!, _nroHorasMeta));
    }
    if (data.containsKey('nro_sesiones')) {
      context.handle(
          _nroSesionesMeta,
          nroSesiones.isAcceptableOrUnknown(
              data['nro_sesiones']!, _nroSesionesMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    }
    if (data.containsKey('situacion_significativa_complementaria')) {
      context.handle(
          _situacionSignificativaComplementariaMeta,
          situacionSignificativaComplementaria.isAcceptableOrUnknown(
              data['situacion_significativa_complementaria']!,
              _situacionSignificativaComplementariaMeta));
    }
    if (data.containsKey('desafio')) {
      context.handle(_desafioMeta,
          desafio.isAcceptableOrUnknown(data['desafio']!, _desafioMeta));
    }
    if (data.containsKey('reto')) {
      context.handle(
          _retoMeta, reto.isAcceptableOrUnknown(data['reto']!, _retoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {unidadAprendizajeId};
  @override
  UnidadEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return UnidadEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $UnidadEventoTable createAlias(String alias) {
    return $UnidadEventoTable(_db, alias);
  }
}

class SesionEventoData extends DataClass
    implements Insertable<SesionEventoData> {
  final int sesionAprendizajeId;
  final int? unidadAprendizajeId;
  final String? titulo;
  final String? proposito;
  final int? horas;
  final String? contenido;
  final int? usuarioCreacionId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? estadoId;
  final int? fechaEjecucion;
  final String? fechaReprogramacion;
  final String? fechaPublicacion;
  final int? nroSesion;
  final int? rolId;
  final int? estadoEjecucionId;
  final int? fechaRealizada;
  final int? fechaEjecucionFin;
  final bool? estadoEvaluacion;
  final int? evaluados;
  final int? docenteid;
  final int? parentSesionId;
  SesionEventoData(
      {required this.sesionAprendizajeId,
      this.unidadAprendizajeId,
      this.titulo,
      this.proposito,
      this.horas,
      this.contenido,
      this.usuarioCreacionId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.estadoId,
      this.fechaEjecucion,
      this.fechaReprogramacion,
      this.fechaPublicacion,
      this.nroSesion,
      this.rolId,
      this.estadoEjecucionId,
      this.fechaRealizada,
      this.fechaEjecucionFin,
      this.estadoEvaluacion,
      this.evaluados,
      this.docenteid,
      this.parentSesionId});
  factory SesionEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return SesionEventoData(
      sesionAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}sesion_aprendizaje_id'])!,
      unidadAprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}unidad_aprendizaje_id']),
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      proposito: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}proposito']),
      horas: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}horas']),
      contenido: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}contenido']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      fechaEjecucion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_ejecucion']),
      fechaReprogramacion: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}fecha_reprogramacion']),
      fechaPublicacion: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_publicacion']),
      nroSesion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nro_sesion']),
      rolId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rol_id']),
      estadoEjecucionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}estado_ejecucion_id']),
      fechaRealizada: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_realizada']),
      fechaEjecucionFin: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}fecha_ejecucion_fin']),
      estadoEvaluacion: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_evaluacion']),
      evaluados: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}evaluados']),
      docenteid: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}docenteid']),
      parentSesionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}parent_sesion_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['sesion_aprendizaje_id'] = Variable<int>(sesionAprendizajeId);
    if (!nullToAbsent || unidadAprendizajeId != null) {
      map['unidad_aprendizaje_id'] = Variable<int?>(unidadAprendizajeId);
    }
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || proposito != null) {
      map['proposito'] = Variable<String?>(proposito);
    }
    if (!nullToAbsent || horas != null) {
      map['horas'] = Variable<int?>(horas);
    }
    if (!nullToAbsent || contenido != null) {
      map['contenido'] = Variable<String?>(contenido);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || fechaEjecucion != null) {
      map['fecha_ejecucion'] = Variable<int?>(fechaEjecucion);
    }
    if (!nullToAbsent || fechaReprogramacion != null) {
      map['fecha_reprogramacion'] = Variable<String?>(fechaReprogramacion);
    }
    if (!nullToAbsent || fechaPublicacion != null) {
      map['fecha_publicacion'] = Variable<String?>(fechaPublicacion);
    }
    if (!nullToAbsent || nroSesion != null) {
      map['nro_sesion'] = Variable<int?>(nroSesion);
    }
    if (!nullToAbsent || rolId != null) {
      map['rol_id'] = Variable<int?>(rolId);
    }
    if (!nullToAbsent || estadoEjecucionId != null) {
      map['estado_ejecucion_id'] = Variable<int?>(estadoEjecucionId);
    }
    if (!nullToAbsent || fechaRealizada != null) {
      map['fecha_realizada'] = Variable<int?>(fechaRealizada);
    }
    if (!nullToAbsent || fechaEjecucionFin != null) {
      map['fecha_ejecucion_fin'] = Variable<int?>(fechaEjecucionFin);
    }
    if (!nullToAbsent || estadoEvaluacion != null) {
      map['estado_evaluacion'] = Variable<bool?>(estadoEvaluacion);
    }
    if (!nullToAbsent || evaluados != null) {
      map['evaluados'] = Variable<int?>(evaluados);
    }
    if (!nullToAbsent || docenteid != null) {
      map['docenteid'] = Variable<int?>(docenteid);
    }
    if (!nullToAbsent || parentSesionId != null) {
      map['parent_sesion_id'] = Variable<int?>(parentSesionId);
    }
    return map;
  }

  SesionEventoCompanion toCompanion(bool nullToAbsent) {
    return SesionEventoCompanion(
      sesionAprendizajeId: Value(sesionAprendizajeId),
      unidadAprendizajeId: unidadAprendizajeId == null && nullToAbsent
          ? const Value.absent()
          : Value(unidadAprendizajeId),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      proposito: proposito == null && nullToAbsent
          ? const Value.absent()
          : Value(proposito),
      horas:
          horas == null && nullToAbsent ? const Value.absent() : Value(horas),
      contenido: contenido == null && nullToAbsent
          ? const Value.absent()
          : Value(contenido),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      fechaEjecucion: fechaEjecucion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEjecucion),
      fechaReprogramacion: fechaReprogramacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaReprogramacion),
      fechaPublicacion: fechaPublicacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaPublicacion),
      nroSesion: nroSesion == null && nullToAbsent
          ? const Value.absent()
          : Value(nroSesion),
      rolId:
          rolId == null && nullToAbsent ? const Value.absent() : Value(rolId),
      estadoEjecucionId: estadoEjecucionId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoEjecucionId),
      fechaRealizada: fechaRealizada == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRealizada),
      fechaEjecucionFin: fechaEjecucionFin == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEjecucionFin),
      estadoEvaluacion: estadoEvaluacion == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoEvaluacion),
      evaluados: evaluados == null && nullToAbsent
          ? const Value.absent()
          : Value(evaluados),
      docenteid: docenteid == null && nullToAbsent
          ? const Value.absent()
          : Value(docenteid),
      parentSesionId: parentSesionId == null && nullToAbsent
          ? const Value.absent()
          : Value(parentSesionId),
    );
  }

  factory SesionEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return SesionEventoData(
      sesionAprendizajeId:
          serializer.fromJson<int>(json['sesionAprendizajeId']),
      unidadAprendizajeId:
          serializer.fromJson<int?>(json['unidadAprendizajeId']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      proposito: serializer.fromJson<String?>(json['proposito']),
      horas: serializer.fromJson<int?>(json['horas']),
      contenido: serializer.fromJson<String?>(json['contenido']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      fechaEjecucion: serializer.fromJson<int?>(json['fechaEjecucion']),
      fechaReprogramacion:
          serializer.fromJson<String?>(json['fechaReprogramacion']),
      fechaPublicacion: serializer.fromJson<String?>(json['fechaPublicacion']),
      nroSesion: serializer.fromJson<int?>(json['nroSesion']),
      rolId: serializer.fromJson<int?>(json['rolId']),
      estadoEjecucionId: serializer.fromJson<int?>(json['estadoEjecucionId']),
      fechaRealizada: serializer.fromJson<int?>(json['fechaRealizada']),
      fechaEjecucionFin: serializer.fromJson<int?>(json['fechaEjecucionFin']),
      estadoEvaluacion: serializer.fromJson<bool?>(json['estadoEvaluacion']),
      evaluados: serializer.fromJson<int?>(json['evaluados']),
      docenteid: serializer.fromJson<int?>(json['docenteid']),
      parentSesionId: serializer.fromJson<int?>(json['parentSesionId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'sesionAprendizajeId': serializer.toJson<int>(sesionAprendizajeId),
      'unidadAprendizajeId': serializer.toJson<int?>(unidadAprendizajeId),
      'titulo': serializer.toJson<String?>(titulo),
      'proposito': serializer.toJson<String?>(proposito),
      'horas': serializer.toJson<int?>(horas),
      'contenido': serializer.toJson<String?>(contenido),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'estadoId': serializer.toJson<int?>(estadoId),
      'fechaEjecucion': serializer.toJson<int?>(fechaEjecucion),
      'fechaReprogramacion': serializer.toJson<String?>(fechaReprogramacion),
      'fechaPublicacion': serializer.toJson<String?>(fechaPublicacion),
      'nroSesion': serializer.toJson<int?>(nroSesion),
      'rolId': serializer.toJson<int?>(rolId),
      'estadoEjecucionId': serializer.toJson<int?>(estadoEjecucionId),
      'fechaRealizada': serializer.toJson<int?>(fechaRealizada),
      'fechaEjecucionFin': serializer.toJson<int?>(fechaEjecucionFin),
      'estadoEvaluacion': serializer.toJson<bool?>(estadoEvaluacion),
      'evaluados': serializer.toJson<int?>(evaluados),
      'docenteid': serializer.toJson<int?>(docenteid),
      'parentSesionId': serializer.toJson<int?>(parentSesionId),
    };
  }

  SesionEventoData copyWith(
          {int? sesionAprendizajeId,
          int? unidadAprendizajeId,
          String? titulo,
          String? proposito,
          int? horas,
          String? contenido,
          int? usuarioCreacionId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? estadoId,
          int? fechaEjecucion,
          String? fechaReprogramacion,
          String? fechaPublicacion,
          int? nroSesion,
          int? rolId,
          int? estadoEjecucionId,
          int? fechaRealizada,
          int? fechaEjecucionFin,
          bool? estadoEvaluacion,
          int? evaluados,
          int? docenteid,
          int? parentSesionId}) =>
      SesionEventoData(
        sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
        unidadAprendizajeId: unidadAprendizajeId ?? this.unidadAprendizajeId,
        titulo: titulo ?? this.titulo,
        proposito: proposito ?? this.proposito,
        horas: horas ?? this.horas,
        contenido: contenido ?? this.contenido,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        estadoId: estadoId ?? this.estadoId,
        fechaEjecucion: fechaEjecucion ?? this.fechaEjecucion,
        fechaReprogramacion: fechaReprogramacion ?? this.fechaReprogramacion,
        fechaPublicacion: fechaPublicacion ?? this.fechaPublicacion,
        nroSesion: nroSesion ?? this.nroSesion,
        rolId: rolId ?? this.rolId,
        estadoEjecucionId: estadoEjecucionId ?? this.estadoEjecucionId,
        fechaRealizada: fechaRealizada ?? this.fechaRealizada,
        fechaEjecucionFin: fechaEjecucionFin ?? this.fechaEjecucionFin,
        estadoEvaluacion: estadoEvaluacion ?? this.estadoEvaluacion,
        evaluados: evaluados ?? this.evaluados,
        docenteid: docenteid ?? this.docenteid,
        parentSesionId: parentSesionId ?? this.parentSesionId,
      );
  @override
  String toString() {
    return (StringBuffer('SesionEventoData(')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('unidadAprendizajeId: $unidadAprendizajeId, ')
          ..write('titulo: $titulo, ')
          ..write('proposito: $proposito, ')
          ..write('horas: $horas, ')
          ..write('contenido: $contenido, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('estadoId: $estadoId, ')
          ..write('fechaEjecucion: $fechaEjecucion, ')
          ..write('fechaReprogramacion: $fechaReprogramacion, ')
          ..write('fechaPublicacion: $fechaPublicacion, ')
          ..write('nroSesion: $nroSesion, ')
          ..write('rolId: $rolId, ')
          ..write('estadoEjecucionId: $estadoEjecucionId, ')
          ..write('fechaRealizada: $fechaRealizada, ')
          ..write('fechaEjecucionFin: $fechaEjecucionFin, ')
          ..write('estadoEvaluacion: $estadoEvaluacion, ')
          ..write('evaluados: $evaluados, ')
          ..write('docenteid: $docenteid, ')
          ..write('parentSesionId: $parentSesionId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      sesionAprendizajeId.hashCode,
      $mrjc(
          unidadAprendizajeId.hashCode,
          $mrjc(
              titulo.hashCode,
              $mrjc(
                  proposito.hashCode,
                  $mrjc(
                      horas.hashCode,
                      $mrjc(
                          contenido.hashCode,
                          $mrjc(
                              usuarioCreacionId.hashCode,
                              $mrjc(
                                  fechaCreacion.hashCode,
                                  $mrjc(
                                      usuarioAccionId.hashCode,
                                      $mrjc(
                                          fechaAccion.hashCode,
                                          $mrjc(
                                              estadoId.hashCode,
                                              $mrjc(
                                                  fechaEjecucion.hashCode,
                                                  $mrjc(
                                                      fechaReprogramacion
                                                          .hashCode,
                                                      $mrjc(
                                                          fechaPublicacion
                                                              .hashCode,
                                                          $mrjc(
                                                              nroSesion
                                                                  .hashCode,
                                                              $mrjc(
                                                                  rolId
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      estadoEjecucionId
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          fechaRealizada
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              fechaEjecucionFin.hashCode,
                                                                              $mrjc(estadoEvaluacion.hashCode, $mrjc(evaluados.hashCode, $mrjc(docenteid.hashCode, parentSesionId.hashCode)))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SesionEventoData &&
          other.sesionAprendizajeId == this.sesionAprendizajeId &&
          other.unidadAprendizajeId == this.unidadAprendizajeId &&
          other.titulo == this.titulo &&
          other.proposito == this.proposito &&
          other.horas == this.horas &&
          other.contenido == this.contenido &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.estadoId == this.estadoId &&
          other.fechaEjecucion == this.fechaEjecucion &&
          other.fechaReprogramacion == this.fechaReprogramacion &&
          other.fechaPublicacion == this.fechaPublicacion &&
          other.nroSesion == this.nroSesion &&
          other.rolId == this.rolId &&
          other.estadoEjecucionId == this.estadoEjecucionId &&
          other.fechaRealizada == this.fechaRealizada &&
          other.fechaEjecucionFin == this.fechaEjecucionFin &&
          other.estadoEvaluacion == this.estadoEvaluacion &&
          other.evaluados == this.evaluados &&
          other.docenteid == this.docenteid &&
          other.parentSesionId == this.parentSesionId);
}

class SesionEventoCompanion extends UpdateCompanion<SesionEventoData> {
  final Value<int> sesionAprendizajeId;
  final Value<int?> unidadAprendizajeId;
  final Value<String?> titulo;
  final Value<String?> proposito;
  final Value<int?> horas;
  final Value<String?> contenido;
  final Value<int?> usuarioCreacionId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> estadoId;
  final Value<int?> fechaEjecucion;
  final Value<String?> fechaReprogramacion;
  final Value<String?> fechaPublicacion;
  final Value<int?> nroSesion;
  final Value<int?> rolId;
  final Value<int?> estadoEjecucionId;
  final Value<int?> fechaRealizada;
  final Value<int?> fechaEjecucionFin;
  final Value<bool?> estadoEvaluacion;
  final Value<int?> evaluados;
  final Value<int?> docenteid;
  final Value<int?> parentSesionId;
  const SesionEventoCompanion({
    this.sesionAprendizajeId = const Value.absent(),
    this.unidadAprendizajeId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.proposito = const Value.absent(),
    this.horas = const Value.absent(),
    this.contenido = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.fechaEjecucion = const Value.absent(),
    this.fechaReprogramacion = const Value.absent(),
    this.fechaPublicacion = const Value.absent(),
    this.nroSesion = const Value.absent(),
    this.rolId = const Value.absent(),
    this.estadoEjecucionId = const Value.absent(),
    this.fechaRealizada = const Value.absent(),
    this.fechaEjecucionFin = const Value.absent(),
    this.estadoEvaluacion = const Value.absent(),
    this.evaluados = const Value.absent(),
    this.docenteid = const Value.absent(),
    this.parentSesionId = const Value.absent(),
  });
  SesionEventoCompanion.insert({
    this.sesionAprendizajeId = const Value.absent(),
    this.unidadAprendizajeId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.proposito = const Value.absent(),
    this.horas = const Value.absent(),
    this.contenido = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.fechaEjecucion = const Value.absent(),
    this.fechaReprogramacion = const Value.absent(),
    this.fechaPublicacion = const Value.absent(),
    this.nroSesion = const Value.absent(),
    this.rolId = const Value.absent(),
    this.estadoEjecucionId = const Value.absent(),
    this.fechaRealizada = const Value.absent(),
    this.fechaEjecucionFin = const Value.absent(),
    this.estadoEvaluacion = const Value.absent(),
    this.evaluados = const Value.absent(),
    this.docenteid = const Value.absent(),
    this.parentSesionId = const Value.absent(),
  });
  static Insertable<SesionEventoData> custom({
    Expression<int>? sesionAprendizajeId,
    Expression<int?>? unidadAprendizajeId,
    Expression<String?>? titulo,
    Expression<String?>? proposito,
    Expression<int?>? horas,
    Expression<String?>? contenido,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? estadoId,
    Expression<int?>? fechaEjecucion,
    Expression<String?>? fechaReprogramacion,
    Expression<String?>? fechaPublicacion,
    Expression<int?>? nroSesion,
    Expression<int?>? rolId,
    Expression<int?>? estadoEjecucionId,
    Expression<int?>? fechaRealizada,
    Expression<int?>? fechaEjecucionFin,
    Expression<bool?>? estadoEvaluacion,
    Expression<int?>? evaluados,
    Expression<int?>? docenteid,
    Expression<int?>? parentSesionId,
  }) {
    return RawValuesInsertable({
      if (sesionAprendizajeId != null)
        'sesion_aprendizaje_id': sesionAprendizajeId,
      if (unidadAprendizajeId != null)
        'unidad_aprendizaje_id': unidadAprendizajeId,
      if (titulo != null) 'titulo': titulo,
      if (proposito != null) 'proposito': proposito,
      if (horas != null) 'horas': horas,
      if (contenido != null) 'contenido': contenido,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (estadoId != null) 'estado_id': estadoId,
      if (fechaEjecucion != null) 'fecha_ejecucion': fechaEjecucion,
      if (fechaReprogramacion != null)
        'fecha_reprogramacion': fechaReprogramacion,
      if (fechaPublicacion != null) 'fecha_publicacion': fechaPublicacion,
      if (nroSesion != null) 'nro_sesion': nroSesion,
      if (rolId != null) 'rol_id': rolId,
      if (estadoEjecucionId != null) 'estado_ejecucion_id': estadoEjecucionId,
      if (fechaRealizada != null) 'fecha_realizada': fechaRealizada,
      if (fechaEjecucionFin != null) 'fecha_ejecucion_fin': fechaEjecucionFin,
      if (estadoEvaluacion != null) 'estado_evaluacion': estadoEvaluacion,
      if (evaluados != null) 'evaluados': evaluados,
      if (docenteid != null) 'docenteid': docenteid,
      if (parentSesionId != null) 'parent_sesion_id': parentSesionId,
    });
  }

  SesionEventoCompanion copyWith(
      {Value<int>? sesionAprendizajeId,
      Value<int?>? unidadAprendizajeId,
      Value<String?>? titulo,
      Value<String?>? proposito,
      Value<int?>? horas,
      Value<String?>? contenido,
      Value<int?>? usuarioCreacionId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? estadoId,
      Value<int?>? fechaEjecucion,
      Value<String?>? fechaReprogramacion,
      Value<String?>? fechaPublicacion,
      Value<int?>? nroSesion,
      Value<int?>? rolId,
      Value<int?>? estadoEjecucionId,
      Value<int?>? fechaRealizada,
      Value<int?>? fechaEjecucionFin,
      Value<bool?>? estadoEvaluacion,
      Value<int?>? evaluados,
      Value<int?>? docenteid,
      Value<int?>? parentSesionId}) {
    return SesionEventoCompanion(
      sesionAprendizajeId: sesionAprendizajeId ?? this.sesionAprendizajeId,
      unidadAprendizajeId: unidadAprendizajeId ?? this.unidadAprendizajeId,
      titulo: titulo ?? this.titulo,
      proposito: proposito ?? this.proposito,
      horas: horas ?? this.horas,
      contenido: contenido ?? this.contenido,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      estadoId: estadoId ?? this.estadoId,
      fechaEjecucion: fechaEjecucion ?? this.fechaEjecucion,
      fechaReprogramacion: fechaReprogramacion ?? this.fechaReprogramacion,
      fechaPublicacion: fechaPublicacion ?? this.fechaPublicacion,
      nroSesion: nroSesion ?? this.nroSesion,
      rolId: rolId ?? this.rolId,
      estadoEjecucionId: estadoEjecucionId ?? this.estadoEjecucionId,
      fechaRealizada: fechaRealizada ?? this.fechaRealizada,
      fechaEjecucionFin: fechaEjecucionFin ?? this.fechaEjecucionFin,
      estadoEvaluacion: estadoEvaluacion ?? this.estadoEvaluacion,
      evaluados: evaluados ?? this.evaluados,
      docenteid: docenteid ?? this.docenteid,
      parentSesionId: parentSesionId ?? this.parentSesionId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (sesionAprendizajeId.present) {
      map['sesion_aprendizaje_id'] = Variable<int>(sesionAprendizajeId.value);
    }
    if (unidadAprendizajeId.present) {
      map['unidad_aprendizaje_id'] = Variable<int?>(unidadAprendizajeId.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (proposito.present) {
      map['proposito'] = Variable<String?>(proposito.value);
    }
    if (horas.present) {
      map['horas'] = Variable<int?>(horas.value);
    }
    if (contenido.present) {
      map['contenido'] = Variable<String?>(contenido.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (fechaEjecucion.present) {
      map['fecha_ejecucion'] = Variable<int?>(fechaEjecucion.value);
    }
    if (fechaReprogramacion.present) {
      map['fecha_reprogramacion'] =
          Variable<String?>(fechaReprogramacion.value);
    }
    if (fechaPublicacion.present) {
      map['fecha_publicacion'] = Variable<String?>(fechaPublicacion.value);
    }
    if (nroSesion.present) {
      map['nro_sesion'] = Variable<int?>(nroSesion.value);
    }
    if (rolId.present) {
      map['rol_id'] = Variable<int?>(rolId.value);
    }
    if (estadoEjecucionId.present) {
      map['estado_ejecucion_id'] = Variable<int?>(estadoEjecucionId.value);
    }
    if (fechaRealizada.present) {
      map['fecha_realizada'] = Variable<int?>(fechaRealizada.value);
    }
    if (fechaEjecucionFin.present) {
      map['fecha_ejecucion_fin'] = Variable<int?>(fechaEjecucionFin.value);
    }
    if (estadoEvaluacion.present) {
      map['estado_evaluacion'] = Variable<bool?>(estadoEvaluacion.value);
    }
    if (evaluados.present) {
      map['evaluados'] = Variable<int?>(evaluados.value);
    }
    if (docenteid.present) {
      map['docenteid'] = Variable<int?>(docenteid.value);
    }
    if (parentSesionId.present) {
      map['parent_sesion_id'] = Variable<int?>(parentSesionId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SesionEventoCompanion(')
          ..write('sesionAprendizajeId: $sesionAprendizajeId, ')
          ..write('unidadAprendizajeId: $unidadAprendizajeId, ')
          ..write('titulo: $titulo, ')
          ..write('proposito: $proposito, ')
          ..write('horas: $horas, ')
          ..write('contenido: $contenido, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('estadoId: $estadoId, ')
          ..write('fechaEjecucion: $fechaEjecucion, ')
          ..write('fechaReprogramacion: $fechaReprogramacion, ')
          ..write('fechaPublicacion: $fechaPublicacion, ')
          ..write('nroSesion: $nroSesion, ')
          ..write('rolId: $rolId, ')
          ..write('estadoEjecucionId: $estadoEjecucionId, ')
          ..write('fechaRealizada: $fechaRealizada, ')
          ..write('fechaEjecucionFin: $fechaEjecucionFin, ')
          ..write('estadoEvaluacion: $estadoEvaluacion, ')
          ..write('evaluados: $evaluados, ')
          ..write('docenteid: $docenteid, ')
          ..write('parentSesionId: $parentSesionId')
          ..write(')'))
        .toString();
  }
}

class $SesionEventoTable extends SesionEvento
    with TableInfo<$SesionEventoTable, SesionEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $SesionEventoTable(this._db, [this._alias]);
  final VerificationMeta _sesionAprendizajeIdMeta =
      const VerificationMeta('sesionAprendizajeId');
  late final GeneratedColumn<int?> sesionAprendizajeId = GeneratedColumn<int?>(
      'sesion_aprendizaje_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _unidadAprendizajeIdMeta =
      const VerificationMeta('unidadAprendizajeId');
  late final GeneratedColumn<int?> unidadAprendizajeId = GeneratedColumn<int?>(
      'unidad_aprendizaje_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _propositoMeta = const VerificationMeta('proposito');
  late final GeneratedColumn<String?> proposito = GeneratedColumn<String?>(
      'proposito', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _horasMeta = const VerificationMeta('horas');
  late final GeneratedColumn<int?> horas = GeneratedColumn<int?>(
      'horas', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _contenidoMeta = const VerificationMeta('contenido');
  late final GeneratedColumn<String?> contenido = GeneratedColumn<String?>(
      'contenido', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEjecucionMeta =
      const VerificationMeta('fechaEjecucion');
  late final GeneratedColumn<int?> fechaEjecucion = GeneratedColumn<int?>(
      'fecha_ejecucion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaReprogramacionMeta =
      const VerificationMeta('fechaReprogramacion');
  late final GeneratedColumn<String?> fechaReprogramacion =
      GeneratedColumn<String?>('fecha_reprogramacion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _fechaPublicacionMeta =
      const VerificationMeta('fechaPublicacion');
  late final GeneratedColumn<String?> fechaPublicacion =
      GeneratedColumn<String?>('fecha_publicacion', aliasedName, true,
          typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _nroSesionMeta = const VerificationMeta('nroSesion');
  late final GeneratedColumn<int?> nroSesion = GeneratedColumn<int?>(
      'nro_sesion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _rolIdMeta = const VerificationMeta('rolId');
  late final GeneratedColumn<int?> rolId = GeneratedColumn<int?>(
      'rol_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoEjecucionIdMeta =
      const VerificationMeta('estadoEjecucionId');
  late final GeneratedColumn<int?> estadoEjecucionId = GeneratedColumn<int?>(
      'estado_ejecucion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRealizadaMeta =
      const VerificationMeta('fechaRealizada');
  late final GeneratedColumn<int?> fechaRealizada = GeneratedColumn<int?>(
      'fecha_realizada', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEjecucionFinMeta =
      const VerificationMeta('fechaEjecucionFin');
  late final GeneratedColumn<int?> fechaEjecucionFin = GeneratedColumn<int?>(
      'fecha_ejecucion_fin', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoEvaluacionMeta =
      const VerificationMeta('estadoEvaluacion');
  late final GeneratedColumn<bool?> estadoEvaluacion = GeneratedColumn<bool?>(
      'estado_evaluacion', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estado_evaluacion IN (0, 1))');
  final VerificationMeta _evaluadosMeta = const VerificationMeta('evaluados');
  late final GeneratedColumn<int?> evaluados = GeneratedColumn<int?>(
      'evaluados', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _docenteidMeta = const VerificationMeta('docenteid');
  late final GeneratedColumn<int?> docenteid = GeneratedColumn<int?>(
      'docenteid', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _parentSesionIdMeta =
      const VerificationMeta('parentSesionId');
  late final GeneratedColumn<int?> parentSesionId = GeneratedColumn<int?>(
      'parent_sesion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        sesionAprendizajeId,
        unidadAprendizajeId,
        titulo,
        proposito,
        horas,
        contenido,
        usuarioCreacionId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        estadoId,
        fechaEjecucion,
        fechaReprogramacion,
        fechaPublicacion,
        nroSesion,
        rolId,
        estadoEjecucionId,
        fechaRealizada,
        fechaEjecucionFin,
        estadoEvaluacion,
        evaluados,
        docenteid,
        parentSesionId
      ];
  @override
  String get aliasedName => _alias ?? 'sesion_evento';
  @override
  String get actualTableName => 'sesion_evento';
  @override
  VerificationContext validateIntegrity(Insertable<SesionEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('sesion_aprendizaje_id')) {
      context.handle(
          _sesionAprendizajeIdMeta,
          sesionAprendizajeId.isAcceptableOrUnknown(
              data['sesion_aprendizaje_id']!, _sesionAprendizajeIdMeta));
    }
    if (data.containsKey('unidad_aprendizaje_id')) {
      context.handle(
          _unidadAprendizajeIdMeta,
          unidadAprendizajeId.isAcceptableOrUnknown(
              data['unidad_aprendizaje_id']!, _unidadAprendizajeIdMeta));
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('proposito')) {
      context.handle(_propositoMeta,
          proposito.isAcceptableOrUnknown(data['proposito']!, _propositoMeta));
    }
    if (data.containsKey('horas')) {
      context.handle(
          _horasMeta, horas.isAcceptableOrUnknown(data['horas']!, _horasMeta));
    }
    if (data.containsKey('contenido')) {
      context.handle(_contenidoMeta,
          contenido.isAcceptableOrUnknown(data['contenido']!, _contenidoMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('fecha_ejecucion')) {
      context.handle(
          _fechaEjecucionMeta,
          fechaEjecucion.isAcceptableOrUnknown(
              data['fecha_ejecucion']!, _fechaEjecucionMeta));
    }
    if (data.containsKey('fecha_reprogramacion')) {
      context.handle(
          _fechaReprogramacionMeta,
          fechaReprogramacion.isAcceptableOrUnknown(
              data['fecha_reprogramacion']!, _fechaReprogramacionMeta));
    }
    if (data.containsKey('fecha_publicacion')) {
      context.handle(
          _fechaPublicacionMeta,
          fechaPublicacion.isAcceptableOrUnknown(
              data['fecha_publicacion']!, _fechaPublicacionMeta));
    }
    if (data.containsKey('nro_sesion')) {
      context.handle(_nroSesionMeta,
          nroSesion.isAcceptableOrUnknown(data['nro_sesion']!, _nroSesionMeta));
    }
    if (data.containsKey('rol_id')) {
      context.handle(
          _rolIdMeta, rolId.isAcceptableOrUnknown(data['rol_id']!, _rolIdMeta));
    }
    if (data.containsKey('estado_ejecucion_id')) {
      context.handle(
          _estadoEjecucionIdMeta,
          estadoEjecucionId.isAcceptableOrUnknown(
              data['estado_ejecucion_id']!, _estadoEjecucionIdMeta));
    }
    if (data.containsKey('fecha_realizada')) {
      context.handle(
          _fechaRealizadaMeta,
          fechaRealizada.isAcceptableOrUnknown(
              data['fecha_realizada']!, _fechaRealizadaMeta));
    }
    if (data.containsKey('fecha_ejecucion_fin')) {
      context.handle(
          _fechaEjecucionFinMeta,
          fechaEjecucionFin.isAcceptableOrUnknown(
              data['fecha_ejecucion_fin']!, _fechaEjecucionFinMeta));
    }
    if (data.containsKey('estado_evaluacion')) {
      context.handle(
          _estadoEvaluacionMeta,
          estadoEvaluacion.isAcceptableOrUnknown(
              data['estado_evaluacion']!, _estadoEvaluacionMeta));
    }
    if (data.containsKey('evaluados')) {
      context.handle(_evaluadosMeta,
          evaluados.isAcceptableOrUnknown(data['evaluados']!, _evaluadosMeta));
    }
    if (data.containsKey('docenteid')) {
      context.handle(_docenteidMeta,
          docenteid.isAcceptableOrUnknown(data['docenteid']!, _docenteidMeta));
    }
    if (data.containsKey('parent_sesion_id')) {
      context.handle(
          _parentSesionIdMeta,
          parentSesionId.isAcceptableOrUnknown(
              data['parent_sesion_id']!, _parentSesionIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {sesionAprendizajeId};
  @override
  SesionEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return SesionEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $SesionEventoTable createAlias(String alias) {
    return $SesionEventoTable(_db, alias);
  }
}

class RelUnidadEventoData extends DataClass
    implements Insertable<RelUnidadEventoData> {
  final int unidadaprendizajeId;
  final int tipoid;
  RelUnidadEventoData(
      {required this.unidadaprendizajeId, required this.tipoid});
  factory RelUnidadEventoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RelUnidadEventoData(
      unidadaprendizajeId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}unidadaprendizaje_id'])!,
      tipoid: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipoid'])!,
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['unidadaprendizaje_id'] = Variable<int>(unidadaprendizajeId);
    map['tipoid'] = Variable<int>(tipoid);
    return map;
  }

  RelUnidadEventoCompanion toCompanion(bool nullToAbsent) {
    return RelUnidadEventoCompanion(
      unidadaprendizajeId: Value(unidadaprendizajeId),
      tipoid: Value(tipoid),
    );
  }

  factory RelUnidadEventoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RelUnidadEventoData(
      unidadaprendizajeId:
          serializer.fromJson<int>(json['unidadaprendizajeId']),
      tipoid: serializer.fromJson<int>(json['tipoid']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'unidadaprendizajeId': serializer.toJson<int>(unidadaprendizajeId),
      'tipoid': serializer.toJson<int>(tipoid),
    };
  }

  RelUnidadEventoData copyWith({int? unidadaprendizajeId, int? tipoid}) =>
      RelUnidadEventoData(
        unidadaprendizajeId: unidadaprendizajeId ?? this.unidadaprendizajeId,
        tipoid: tipoid ?? this.tipoid,
      );
  @override
  String toString() {
    return (StringBuffer('RelUnidadEventoData(')
          ..write('unidadaprendizajeId: $unidadaprendizajeId, ')
          ..write('tipoid: $tipoid')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      $mrjf($mrjc(unidadaprendizajeId.hashCode, tipoid.hashCode));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RelUnidadEventoData &&
          other.unidadaprendizajeId == this.unidadaprendizajeId &&
          other.tipoid == this.tipoid);
}

class RelUnidadEventoCompanion extends UpdateCompanion<RelUnidadEventoData> {
  final Value<int> unidadaprendizajeId;
  final Value<int> tipoid;
  const RelUnidadEventoCompanion({
    this.unidadaprendizajeId = const Value.absent(),
    this.tipoid = const Value.absent(),
  });
  RelUnidadEventoCompanion.insert({
    required int unidadaprendizajeId,
    required int tipoid,
  })  : unidadaprendizajeId = Value(unidadaprendizajeId),
        tipoid = Value(tipoid);
  static Insertable<RelUnidadEventoData> custom({
    Expression<int>? unidadaprendizajeId,
    Expression<int>? tipoid,
  }) {
    return RawValuesInsertable({
      if (unidadaprendizajeId != null)
        'unidadaprendizaje_id': unidadaprendizajeId,
      if (tipoid != null) 'tipoid': tipoid,
    });
  }

  RelUnidadEventoCompanion copyWith(
      {Value<int>? unidadaprendizajeId, Value<int>? tipoid}) {
    return RelUnidadEventoCompanion(
      unidadaprendizajeId: unidadaprendizajeId ?? this.unidadaprendizajeId,
      tipoid: tipoid ?? this.tipoid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (unidadaprendizajeId.present) {
      map['unidadaprendizaje_id'] = Variable<int>(unidadaprendizajeId.value);
    }
    if (tipoid.present) {
      map['tipoid'] = Variable<int>(tipoid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RelUnidadEventoCompanion(')
          ..write('unidadaprendizajeId: $unidadaprendizajeId, ')
          ..write('tipoid: $tipoid')
          ..write(')'))
        .toString();
  }
}

class $RelUnidadEventoTable extends RelUnidadEvento
    with TableInfo<$RelUnidadEventoTable, RelUnidadEventoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RelUnidadEventoTable(this._db, [this._alias]);
  final VerificationMeta _unidadaprendizajeIdMeta =
      const VerificationMeta('unidadaprendizajeId');
  late final GeneratedColumn<int?> unidadaprendizajeId = GeneratedColumn<int?>(
      'unidadaprendizaje_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _tipoidMeta = const VerificationMeta('tipoid');
  late final GeneratedColumn<int?> tipoid = GeneratedColumn<int?>(
      'tipoid', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [unidadaprendizajeId, tipoid];
  @override
  String get aliasedName => _alias ?? 'rel_unidad_evento';
  @override
  String get actualTableName => 'rel_unidad_evento';
  @override
  VerificationContext validateIntegrity(
      Insertable<RelUnidadEventoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('unidadaprendizaje_id')) {
      context.handle(
          _unidadaprendizajeIdMeta,
          unidadaprendizajeId.isAcceptableOrUnknown(
              data['unidadaprendizaje_id']!, _unidadaprendizajeIdMeta));
    } else if (isInserting) {
      context.missing(_unidadaprendizajeIdMeta);
    }
    if (data.containsKey('tipoid')) {
      context.handle(_tipoidMeta,
          tipoid.isAcceptableOrUnknown(data['tipoid']!, _tipoidMeta));
    } else if (isInserting) {
      context.missing(_tipoidMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {unidadaprendizajeId, tipoid};
  @override
  RelUnidadEventoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return RelUnidadEventoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RelUnidadEventoTable createAlias(String alias) {
    return $RelUnidadEventoTable(_db, alias);
  }
}

class RubroUpdateServidorData extends DataClass
    implements Insertable<RubroUpdateServidorData> {
  final int calendarioId;
  final int silaboEventoId;
  RubroUpdateServidorData(
      {required this.calendarioId, required this.silaboEventoId});
  factory RubroUpdateServidorData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return RubroUpdateServidorData(
      calendarioId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}calendario_id'])!,
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id'])!,
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['calendario_id'] = Variable<int>(calendarioId);
    map['silabo_evento_id'] = Variable<int>(silaboEventoId);
    return map;
  }

  RubroUpdateServidorCompanion toCompanion(bool nullToAbsent) {
    return RubroUpdateServidorCompanion(
      calendarioId: Value(calendarioId),
      silaboEventoId: Value(silaboEventoId),
    );
  }

  factory RubroUpdateServidorData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return RubroUpdateServidorData(
      calendarioId: serializer.fromJson<int>(json['calendarioId']),
      silaboEventoId: serializer.fromJson<int>(json['silaboEventoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'calendarioId': serializer.toJson<int>(calendarioId),
      'silaboEventoId': serializer.toJson<int>(silaboEventoId),
    };
  }

  RubroUpdateServidorData copyWith({int? calendarioId, int? silaboEventoId}) =>
      RubroUpdateServidorData(
        calendarioId: calendarioId ?? this.calendarioId,
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      );
  @override
  String toString() {
    return (StringBuffer('RubroUpdateServidorData(')
          ..write('calendarioId: $calendarioId, ')
          ..write('silaboEventoId: $silaboEventoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      $mrjf($mrjc(calendarioId.hashCode, silaboEventoId.hashCode));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RubroUpdateServidorData &&
          other.calendarioId == this.calendarioId &&
          other.silaboEventoId == this.silaboEventoId);
}

class RubroUpdateServidorCompanion
    extends UpdateCompanion<RubroUpdateServidorData> {
  final Value<int> calendarioId;
  final Value<int> silaboEventoId;
  const RubroUpdateServidorCompanion({
    this.calendarioId = const Value.absent(),
    this.silaboEventoId = const Value.absent(),
  });
  RubroUpdateServidorCompanion.insert({
    required int calendarioId,
    required int silaboEventoId,
  })  : calendarioId = Value(calendarioId),
        silaboEventoId = Value(silaboEventoId);
  static Insertable<RubroUpdateServidorData> custom({
    Expression<int>? calendarioId,
    Expression<int>? silaboEventoId,
  }) {
    return RawValuesInsertable({
      if (calendarioId != null) 'calendario_id': calendarioId,
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
    });
  }

  RubroUpdateServidorCompanion copyWith(
      {Value<int>? calendarioId, Value<int>? silaboEventoId}) {
    return RubroUpdateServidorCompanion(
      calendarioId: calendarioId ?? this.calendarioId,
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (calendarioId.present) {
      map['calendario_id'] = Variable<int>(calendarioId.value);
    }
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int>(silaboEventoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RubroUpdateServidorCompanion(')
          ..write('calendarioId: $calendarioId, ')
          ..write('silaboEventoId: $silaboEventoId')
          ..write(')'))
        .toString();
  }
}

class $RubroUpdateServidorTable extends RubroUpdateServidor
    with TableInfo<$RubroUpdateServidorTable, RubroUpdateServidorData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $RubroUpdateServidorTable(this._db, [this._alias]);
  final VerificationMeta _calendarioIdMeta =
      const VerificationMeta('calendarioId');
  late final GeneratedColumn<int?> calendarioId = GeneratedColumn<int?>(
      'calendario_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [calendarioId, silaboEventoId];
  @override
  String get aliasedName => _alias ?? 'rubro_update_servidor';
  @override
  String get actualTableName => 'rubro_update_servidor';
  @override
  VerificationContext validateIntegrity(
      Insertable<RubroUpdateServidorData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('calendario_id')) {
      context.handle(
          _calendarioIdMeta,
          calendarioId.isAcceptableOrUnknown(
              data['calendario_id']!, _calendarioIdMeta));
    } else if (isInserting) {
      context.missing(_calendarioIdMeta);
    }
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    } else if (isInserting) {
      context.missing(_silaboEventoIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {calendarioId, silaboEventoId};
  @override
  RubroUpdateServidorData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return RubroUpdateServidorData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $RubroUpdateServidorTable createAlias(String alias) {
    return $RubroUpdateServidorTable(_db, alias);
  }
}

class CalendarioPeriodoCargaCursoData extends DataClass
    implements Insertable<CalendarioPeriodoCargaCursoData> {
  final int calendarioPeriodoId;
  final DateTime? fechaInicio;
  final DateTime? fechaFin;
  final int? calendarioAcademicoId;
  final int? tipoId;
  final int? estadoId;
  final bool? selecionado;
  final int? diazPlazo;
  final String? nombre;
  final int? habilitado;
  final int cargaCursoId;
  CalendarioPeriodoCargaCursoData(
      {required this.calendarioPeriodoId,
      this.fechaInicio,
      this.fechaFin,
      this.calendarioAcademicoId,
      this.tipoId,
      this.estadoId,
      this.selecionado,
      this.diazPlazo,
      this.nombre,
      this.habilitado,
      required this.cargaCursoId});
  factory CalendarioPeriodoCargaCursoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CalendarioPeriodoCargaCursoData(
      calendarioPeriodoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_periodo_id'])!,
      fechaInicio: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_inicio']),
      fechaFin: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_fin']),
      calendarioAcademicoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}calendario_academico_id']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      selecionado: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}selecionado']),
      diazPlazo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}diaz_plazo']),
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      habilitado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}habilitado']),
      cargaCursoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}carga_curso_id'])!,
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['calendario_periodo_id'] = Variable<int>(calendarioPeriodoId);
    if (!nullToAbsent || fechaInicio != null) {
      map['fecha_inicio'] = Variable<DateTime?>(fechaInicio);
    }
    if (!nullToAbsent || fechaFin != null) {
      map['fecha_fin'] = Variable<DateTime?>(fechaFin);
    }
    if (!nullToAbsent || calendarioAcademicoId != null) {
      map['calendario_academico_id'] = Variable<int?>(calendarioAcademicoId);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || selecionado != null) {
      map['selecionado'] = Variable<bool?>(selecionado);
    }
    if (!nullToAbsent || diazPlazo != null) {
      map['diaz_plazo'] = Variable<int?>(diazPlazo);
    }
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || habilitado != null) {
      map['habilitado'] = Variable<int?>(habilitado);
    }
    map['carga_curso_id'] = Variable<int>(cargaCursoId);
    return map;
  }

  CalendarioPeriodoCargaCursoCompanion toCompanion(bool nullToAbsent) {
    return CalendarioPeriodoCargaCursoCompanion(
      calendarioPeriodoId: Value(calendarioPeriodoId),
      fechaInicio: fechaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaInicio),
      fechaFin: fechaFin == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaFin),
      calendarioAcademicoId: calendarioAcademicoId == null && nullToAbsent
          ? const Value.absent()
          : Value(calendarioAcademicoId),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      selecionado: selecionado == null && nullToAbsent
          ? const Value.absent()
          : Value(selecionado),
      diazPlazo: diazPlazo == null && nullToAbsent
          ? const Value.absent()
          : Value(diazPlazo),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      habilitado: habilitado == null && nullToAbsent
          ? const Value.absent()
          : Value(habilitado),
      cargaCursoId: Value(cargaCursoId),
    );
  }

  factory CalendarioPeriodoCargaCursoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CalendarioPeriodoCargaCursoData(
      calendarioPeriodoId:
          serializer.fromJson<int>(json['calendarioPeriodoId']),
      fechaInicio: serializer.fromJson<DateTime?>(json['fechaInicio']),
      fechaFin: serializer.fromJson<DateTime?>(json['fechaFin']),
      calendarioAcademicoId:
          serializer.fromJson<int?>(json['calendarioAcademicoId']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      selecionado: serializer.fromJson<bool?>(json['selecionado']),
      diazPlazo: serializer.fromJson<int?>(json['diazPlazo']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      habilitado: serializer.fromJson<int?>(json['habilitado']),
      cargaCursoId: serializer.fromJson<int>(json['cargaCursoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'calendarioPeriodoId': serializer.toJson<int>(calendarioPeriodoId),
      'fechaInicio': serializer.toJson<DateTime?>(fechaInicio),
      'fechaFin': serializer.toJson<DateTime?>(fechaFin),
      'calendarioAcademicoId': serializer.toJson<int?>(calendarioAcademicoId),
      'tipoId': serializer.toJson<int?>(tipoId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'selecionado': serializer.toJson<bool?>(selecionado),
      'diazPlazo': serializer.toJson<int?>(diazPlazo),
      'nombre': serializer.toJson<String?>(nombre),
      'habilitado': serializer.toJson<int?>(habilitado),
      'cargaCursoId': serializer.toJson<int>(cargaCursoId),
    };
  }

  CalendarioPeriodoCargaCursoData copyWith(
          {int? calendarioPeriodoId,
          DateTime? fechaInicio,
          DateTime? fechaFin,
          int? calendarioAcademicoId,
          int? tipoId,
          int? estadoId,
          bool? selecionado,
          int? diazPlazo,
          String? nombre,
          int? habilitado,
          int? cargaCursoId}) =>
      CalendarioPeriodoCargaCursoData(
        calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
        fechaInicio: fechaInicio ?? this.fechaInicio,
        fechaFin: fechaFin ?? this.fechaFin,
        calendarioAcademicoId:
            calendarioAcademicoId ?? this.calendarioAcademicoId,
        tipoId: tipoId ?? this.tipoId,
        estadoId: estadoId ?? this.estadoId,
        selecionado: selecionado ?? this.selecionado,
        diazPlazo: diazPlazo ?? this.diazPlazo,
        nombre: nombre ?? this.nombre,
        habilitado: habilitado ?? this.habilitado,
        cargaCursoId: cargaCursoId ?? this.cargaCursoId,
      );
  @override
  String toString() {
    return (StringBuffer('CalendarioPeriodoCargaCursoData(')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin, ')
          ..write('calendarioAcademicoId: $calendarioAcademicoId, ')
          ..write('tipoId: $tipoId, ')
          ..write('estadoId: $estadoId, ')
          ..write('selecionado: $selecionado, ')
          ..write('diazPlazo: $diazPlazo, ')
          ..write('nombre: $nombre, ')
          ..write('habilitado: $habilitado, ')
          ..write('cargaCursoId: $cargaCursoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      calendarioPeriodoId.hashCode,
      $mrjc(
          fechaInicio.hashCode,
          $mrjc(
              fechaFin.hashCode,
              $mrjc(
                  calendarioAcademicoId.hashCode,
                  $mrjc(
                      tipoId.hashCode,
                      $mrjc(
                          estadoId.hashCode,
                          $mrjc(
                              selecionado.hashCode,
                              $mrjc(
                                  diazPlazo.hashCode,
                                  $mrjc(
                                      nombre.hashCode,
                                      $mrjc(habilitado.hashCode,
                                          cargaCursoId.hashCode)))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CalendarioPeriodoCargaCursoData &&
          other.calendarioPeriodoId == this.calendarioPeriodoId &&
          other.fechaInicio == this.fechaInicio &&
          other.fechaFin == this.fechaFin &&
          other.calendarioAcademicoId == this.calendarioAcademicoId &&
          other.tipoId == this.tipoId &&
          other.estadoId == this.estadoId &&
          other.selecionado == this.selecionado &&
          other.diazPlazo == this.diazPlazo &&
          other.nombre == this.nombre &&
          other.habilitado == this.habilitado &&
          other.cargaCursoId == this.cargaCursoId);
}

class CalendarioPeriodoCargaCursoCompanion
    extends UpdateCompanion<CalendarioPeriodoCargaCursoData> {
  final Value<int> calendarioPeriodoId;
  final Value<DateTime?> fechaInicio;
  final Value<DateTime?> fechaFin;
  final Value<int?> calendarioAcademicoId;
  final Value<int?> tipoId;
  final Value<int?> estadoId;
  final Value<bool?> selecionado;
  final Value<int?> diazPlazo;
  final Value<String?> nombre;
  final Value<int?> habilitado;
  final Value<int> cargaCursoId;
  const CalendarioPeriodoCargaCursoCompanion({
    this.calendarioPeriodoId = const Value.absent(),
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
    this.calendarioAcademicoId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.selecionado = const Value.absent(),
    this.diazPlazo = const Value.absent(),
    this.nombre = const Value.absent(),
    this.habilitado = const Value.absent(),
    this.cargaCursoId = const Value.absent(),
  });
  CalendarioPeriodoCargaCursoCompanion.insert({
    required int calendarioPeriodoId,
    this.fechaInicio = const Value.absent(),
    this.fechaFin = const Value.absent(),
    this.calendarioAcademicoId = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.selecionado = const Value.absent(),
    this.diazPlazo = const Value.absent(),
    this.nombre = const Value.absent(),
    this.habilitado = const Value.absent(),
    required int cargaCursoId,
  })  : calendarioPeriodoId = Value(calendarioPeriodoId),
        cargaCursoId = Value(cargaCursoId);
  static Insertable<CalendarioPeriodoCargaCursoData> custom({
    Expression<int>? calendarioPeriodoId,
    Expression<DateTime?>? fechaInicio,
    Expression<DateTime?>? fechaFin,
    Expression<int?>? calendarioAcademicoId,
    Expression<int?>? tipoId,
    Expression<int?>? estadoId,
    Expression<bool?>? selecionado,
    Expression<int?>? diazPlazo,
    Expression<String?>? nombre,
    Expression<int?>? habilitado,
    Expression<int>? cargaCursoId,
  }) {
    return RawValuesInsertable({
      if (calendarioPeriodoId != null)
        'calendario_periodo_id': calendarioPeriodoId,
      if (fechaInicio != null) 'fecha_inicio': fechaInicio,
      if (fechaFin != null) 'fecha_fin': fechaFin,
      if (calendarioAcademicoId != null)
        'calendario_academico_id': calendarioAcademicoId,
      if (tipoId != null) 'tipo_id': tipoId,
      if (estadoId != null) 'estado_id': estadoId,
      if (selecionado != null) 'selecionado': selecionado,
      if (diazPlazo != null) 'diaz_plazo': diazPlazo,
      if (nombre != null) 'nombre': nombre,
      if (habilitado != null) 'habilitado': habilitado,
      if (cargaCursoId != null) 'carga_curso_id': cargaCursoId,
    });
  }

  CalendarioPeriodoCargaCursoCompanion copyWith(
      {Value<int>? calendarioPeriodoId,
      Value<DateTime?>? fechaInicio,
      Value<DateTime?>? fechaFin,
      Value<int?>? calendarioAcademicoId,
      Value<int?>? tipoId,
      Value<int?>? estadoId,
      Value<bool?>? selecionado,
      Value<int?>? diazPlazo,
      Value<String?>? nombre,
      Value<int?>? habilitado,
      Value<int>? cargaCursoId}) {
    return CalendarioPeriodoCargaCursoCompanion(
      calendarioPeriodoId: calendarioPeriodoId ?? this.calendarioPeriodoId,
      fechaInicio: fechaInicio ?? this.fechaInicio,
      fechaFin: fechaFin ?? this.fechaFin,
      calendarioAcademicoId:
          calendarioAcademicoId ?? this.calendarioAcademicoId,
      tipoId: tipoId ?? this.tipoId,
      estadoId: estadoId ?? this.estadoId,
      selecionado: selecionado ?? this.selecionado,
      diazPlazo: diazPlazo ?? this.diazPlazo,
      nombre: nombre ?? this.nombre,
      habilitado: habilitado ?? this.habilitado,
      cargaCursoId: cargaCursoId ?? this.cargaCursoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (calendarioPeriodoId.present) {
      map['calendario_periodo_id'] = Variable<int>(calendarioPeriodoId.value);
    }
    if (fechaInicio.present) {
      map['fecha_inicio'] = Variable<DateTime?>(fechaInicio.value);
    }
    if (fechaFin.present) {
      map['fecha_fin'] = Variable<DateTime?>(fechaFin.value);
    }
    if (calendarioAcademicoId.present) {
      map['calendario_academico_id'] =
          Variable<int?>(calendarioAcademicoId.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (selecionado.present) {
      map['selecionado'] = Variable<bool?>(selecionado.value);
    }
    if (diazPlazo.present) {
      map['diaz_plazo'] = Variable<int?>(diazPlazo.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (habilitado.present) {
      map['habilitado'] = Variable<int?>(habilitado.value);
    }
    if (cargaCursoId.present) {
      map['carga_curso_id'] = Variable<int>(cargaCursoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CalendarioPeriodoCargaCursoCompanion(')
          ..write('calendarioPeriodoId: $calendarioPeriodoId, ')
          ..write('fechaInicio: $fechaInicio, ')
          ..write('fechaFin: $fechaFin, ')
          ..write('calendarioAcademicoId: $calendarioAcademicoId, ')
          ..write('tipoId: $tipoId, ')
          ..write('estadoId: $estadoId, ')
          ..write('selecionado: $selecionado, ')
          ..write('diazPlazo: $diazPlazo, ')
          ..write('nombre: $nombre, ')
          ..write('habilitado: $habilitado, ')
          ..write('cargaCursoId: $cargaCursoId')
          ..write(')'))
        .toString();
  }
}

class $CalendarioPeriodoCargaCursoTable extends CalendarioPeriodoCargaCurso
    with
        TableInfo<$CalendarioPeriodoCargaCursoTable,
            CalendarioPeriodoCargaCursoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $CalendarioPeriodoCargaCursoTable(this._db, [this._alias]);
  final VerificationMeta _calendarioPeriodoIdMeta =
      const VerificationMeta('calendarioPeriodoId');
  late final GeneratedColumn<int?> calendarioPeriodoId = GeneratedColumn<int?>(
      'calendario_periodo_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _fechaInicioMeta =
      const VerificationMeta('fechaInicio');
  late final GeneratedColumn<DateTime?> fechaInicio =
      GeneratedColumn<DateTime?>('fecha_inicio', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaFinMeta = const VerificationMeta('fechaFin');
  late final GeneratedColumn<DateTime?> fechaFin = GeneratedColumn<DateTime?>(
      'fecha_fin', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _calendarioAcademicoIdMeta =
      const VerificationMeta('calendarioAcademicoId');
  late final GeneratedColumn<int?> calendarioAcademicoId =
      GeneratedColumn<int?>('calendario_academico_id', aliasedName, true,
          typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _selecionadoMeta =
      const VerificationMeta('selecionado');
  late final GeneratedColumn<bool?> selecionado = GeneratedColumn<bool?>(
      'selecionado', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (selecionado IN (0, 1))');
  final VerificationMeta _diazPlazoMeta = const VerificationMeta('diazPlazo');
  late final GeneratedColumn<int?> diazPlazo = GeneratedColumn<int?>(
      'diaz_plazo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _habilitadoMeta = const VerificationMeta('habilitado');
  late final GeneratedColumn<int?> habilitado = GeneratedColumn<int?>(
      'habilitado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _cargaCursoIdMeta =
      const VerificationMeta('cargaCursoId');
  late final GeneratedColumn<int?> cargaCursoId = GeneratedColumn<int?>(
      'carga_curso_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        calendarioPeriodoId,
        fechaInicio,
        fechaFin,
        calendarioAcademicoId,
        tipoId,
        estadoId,
        selecionado,
        diazPlazo,
        nombre,
        habilitado,
        cargaCursoId
      ];
  @override
  String get aliasedName => _alias ?? 'calendario_periodo_carga_curso';
  @override
  String get actualTableName => 'calendario_periodo_carga_curso';
  @override
  VerificationContext validateIntegrity(
      Insertable<CalendarioPeriodoCargaCursoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('calendario_periodo_id')) {
      context.handle(
          _calendarioPeriodoIdMeta,
          calendarioPeriodoId.isAcceptableOrUnknown(
              data['calendario_periodo_id']!, _calendarioPeriodoIdMeta));
    } else if (isInserting) {
      context.missing(_calendarioPeriodoIdMeta);
    }
    if (data.containsKey('fecha_inicio')) {
      context.handle(
          _fechaInicioMeta,
          fechaInicio.isAcceptableOrUnknown(
              data['fecha_inicio']!, _fechaInicioMeta));
    }
    if (data.containsKey('fecha_fin')) {
      context.handle(_fechaFinMeta,
          fechaFin.isAcceptableOrUnknown(data['fecha_fin']!, _fechaFinMeta));
    }
    if (data.containsKey('calendario_academico_id')) {
      context.handle(
          _calendarioAcademicoIdMeta,
          calendarioAcademicoId.isAcceptableOrUnknown(
              data['calendario_academico_id']!, _calendarioAcademicoIdMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('selecionado')) {
      context.handle(
          _selecionadoMeta,
          selecionado.isAcceptableOrUnknown(
              data['selecionado']!, _selecionadoMeta));
    }
    if (data.containsKey('diaz_plazo')) {
      context.handle(_diazPlazoMeta,
          diazPlazo.isAcceptableOrUnknown(data['diaz_plazo']!, _diazPlazoMeta));
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('habilitado')) {
      context.handle(
          _habilitadoMeta,
          habilitado.isAcceptableOrUnknown(
              data['habilitado']!, _habilitadoMeta));
    }
    if (data.containsKey('carga_curso_id')) {
      context.handle(
          _cargaCursoIdMeta,
          cargaCursoId.isAcceptableOrUnknown(
              data['carga_curso_id']!, _cargaCursoIdMeta));
    } else if (isInserting) {
      context.missing(_cargaCursoIdMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {calendarioPeriodoId, cargaCursoId};
  @override
  CalendarioPeriodoCargaCursoData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return CalendarioPeriodoCargaCursoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CalendarioPeriodoCargaCursoTable createAlias(String alias) {
    return $CalendarioPeriodoCargaCursoTable(_db, alias);
  }
}

class TipoNotaResultadoData extends DataClass
    implements Insertable<TipoNotaResultadoData> {
  final int silaboEventoId;
  final String tipoNotaId;
  final String? nombre;
  final int? tipoId;
  final String? tiponombre;
  final String? valorDefecto;
  final double? longitudPaso;
  final bool? intervalo;
  final bool? estatico;
  final int? entidadId;
  final int? georeferenciaId;
  final int? organigramaId;
  final int? estadoId;
  final int? tipoFuenteId;
  final int? valorMinimo;
  final int? valorMaximo;
  final int? escalaEvaluacionId;
  final String? escalanombre;
  final int? escalavalorMinimo;
  final int? escalavalorMaximo;
  final int? escalaestado;
  final bool? escaladefecto;
  final int? escalaentidadId;
  final int? programaEducativoId;
  TipoNotaResultadoData(
      {required this.silaboEventoId,
      required this.tipoNotaId,
      this.nombre,
      this.tipoId,
      this.tiponombre,
      this.valorDefecto,
      this.longitudPaso,
      this.intervalo,
      this.estatico,
      this.entidadId,
      this.georeferenciaId,
      this.organigramaId,
      this.estadoId,
      this.tipoFuenteId,
      this.valorMinimo,
      this.valorMaximo,
      this.escalaEvaluacionId,
      this.escalanombre,
      this.escalavalorMinimo,
      this.escalavalorMaximo,
      this.escalaestado,
      this.escaladefecto,
      this.escalaentidadId,
      this.programaEducativoId});
  factory TipoNotaResultadoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TipoNotaResultadoData(
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id'])!,
      tipoNotaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_nota_id'])!,
      nombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}nombre']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      tiponombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tiponombre']),
      valorDefecto: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_defecto']),
      longitudPaso: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}longitud_paso']),
      intervalo: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}intervalo']),
      estatico: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estatico']),
      entidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}entidad_id']),
      georeferenciaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}georeferencia_id']),
      organigramaId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}organigrama_id']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      tipoFuenteId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_fuente_id']),
      valorMinimo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_minimo']),
      valorMaximo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_maximo']),
      escalaEvaluacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}escala_evaluacion_id']),
      escalanombre: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escalanombre']),
      escalavalorMinimo: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}escalavalor_minimo']),
      escalavalorMaximo: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}escalavalor_maximo']),
      escalaestado: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escalaestado']),
      escaladefecto: const BoolType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escaladefecto']),
      escalaentidadId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}escalaentidad_id']),
      programaEducativoId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}programa_educativo_id']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['silabo_evento_id'] = Variable<int>(silaboEventoId);
    map['tipo_nota_id'] = Variable<String>(tipoNotaId);
    if (!nullToAbsent || nombre != null) {
      map['nombre'] = Variable<String?>(nombre);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || tiponombre != null) {
      map['tiponombre'] = Variable<String?>(tiponombre);
    }
    if (!nullToAbsent || valorDefecto != null) {
      map['valor_defecto'] = Variable<String?>(valorDefecto);
    }
    if (!nullToAbsent || longitudPaso != null) {
      map['longitud_paso'] = Variable<double?>(longitudPaso);
    }
    if (!nullToAbsent || intervalo != null) {
      map['intervalo'] = Variable<bool?>(intervalo);
    }
    if (!nullToAbsent || estatico != null) {
      map['estatico'] = Variable<bool?>(estatico);
    }
    if (!nullToAbsent || entidadId != null) {
      map['entidad_id'] = Variable<int?>(entidadId);
    }
    if (!nullToAbsent || georeferenciaId != null) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId);
    }
    if (!nullToAbsent || organigramaId != null) {
      map['organigrama_id'] = Variable<int?>(organigramaId);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || tipoFuenteId != null) {
      map['tipo_fuente_id'] = Variable<int?>(tipoFuenteId);
    }
    if (!nullToAbsent || valorMinimo != null) {
      map['valor_minimo'] = Variable<int?>(valorMinimo);
    }
    if (!nullToAbsent || valorMaximo != null) {
      map['valor_maximo'] = Variable<int?>(valorMaximo);
    }
    if (!nullToAbsent || escalaEvaluacionId != null) {
      map['escala_evaluacion_id'] = Variable<int?>(escalaEvaluacionId);
    }
    if (!nullToAbsent || escalanombre != null) {
      map['escalanombre'] = Variable<String?>(escalanombre);
    }
    if (!nullToAbsent || escalavalorMinimo != null) {
      map['escalavalor_minimo'] = Variable<int?>(escalavalorMinimo);
    }
    if (!nullToAbsent || escalavalorMaximo != null) {
      map['escalavalor_maximo'] = Variable<int?>(escalavalorMaximo);
    }
    if (!nullToAbsent || escalaestado != null) {
      map['escalaestado'] = Variable<int?>(escalaestado);
    }
    if (!nullToAbsent || escaladefecto != null) {
      map['escaladefecto'] = Variable<bool?>(escaladefecto);
    }
    if (!nullToAbsent || escalaentidadId != null) {
      map['escalaentidad_id'] = Variable<int?>(escalaentidadId);
    }
    if (!nullToAbsent || programaEducativoId != null) {
      map['programa_educativo_id'] = Variable<int?>(programaEducativoId);
    }
    return map;
  }

  TipoNotaResultadoCompanion toCompanion(bool nullToAbsent) {
    return TipoNotaResultadoCompanion(
      silaboEventoId: Value(silaboEventoId),
      tipoNotaId: Value(tipoNotaId),
      nombre:
          nombre == null && nullToAbsent ? const Value.absent() : Value(nombre),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      tiponombre: tiponombre == null && nullToAbsent
          ? const Value.absent()
          : Value(tiponombre),
      valorDefecto: valorDefecto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDefecto),
      longitudPaso: longitudPaso == null && nullToAbsent
          ? const Value.absent()
          : Value(longitudPaso),
      intervalo: intervalo == null && nullToAbsent
          ? const Value.absent()
          : Value(intervalo),
      estatico: estatico == null && nullToAbsent
          ? const Value.absent()
          : Value(estatico),
      entidadId: entidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(entidadId),
      georeferenciaId: georeferenciaId == null && nullToAbsent
          ? const Value.absent()
          : Value(georeferenciaId),
      organigramaId: organigramaId == null && nullToAbsent
          ? const Value.absent()
          : Value(organigramaId),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      tipoFuenteId: tipoFuenteId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoFuenteId),
      valorMinimo: valorMinimo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMinimo),
      valorMaximo: valorMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMaximo),
      escalaEvaluacionId: escalaEvaluacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(escalaEvaluacionId),
      escalanombre: escalanombre == null && nullToAbsent
          ? const Value.absent()
          : Value(escalanombre),
      escalavalorMinimo: escalavalorMinimo == null && nullToAbsent
          ? const Value.absent()
          : Value(escalavalorMinimo),
      escalavalorMaximo: escalavalorMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(escalavalorMaximo),
      escalaestado: escalaestado == null && nullToAbsent
          ? const Value.absent()
          : Value(escalaestado),
      escaladefecto: escaladefecto == null && nullToAbsent
          ? const Value.absent()
          : Value(escaladefecto),
      escalaentidadId: escalaentidadId == null && nullToAbsent
          ? const Value.absent()
          : Value(escalaentidadId),
      programaEducativoId: programaEducativoId == null && nullToAbsent
          ? const Value.absent()
          : Value(programaEducativoId),
    );
  }

  factory TipoNotaResultadoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return TipoNotaResultadoData(
      silaboEventoId: serializer.fromJson<int>(json['silaboEventoId']),
      tipoNotaId: serializer.fromJson<String>(json['tipoNotaId']),
      nombre: serializer.fromJson<String?>(json['nombre']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      tiponombre: serializer.fromJson<String?>(json['tiponombre']),
      valorDefecto: serializer.fromJson<String?>(json['valorDefecto']),
      longitudPaso: serializer.fromJson<double?>(json['longitudPaso']),
      intervalo: serializer.fromJson<bool?>(json['intervalo']),
      estatico: serializer.fromJson<bool?>(json['estatico']),
      entidadId: serializer.fromJson<int?>(json['entidadId']),
      georeferenciaId: serializer.fromJson<int?>(json['georeferenciaId']),
      organigramaId: serializer.fromJson<int?>(json['organigramaId']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      tipoFuenteId: serializer.fromJson<int?>(json['tipoFuenteId']),
      valorMinimo: serializer.fromJson<int?>(json['valorMinimo']),
      valorMaximo: serializer.fromJson<int?>(json['valorMaximo']),
      escalaEvaluacionId: serializer.fromJson<int?>(json['escalaEvaluacionId']),
      escalanombre: serializer.fromJson<String?>(json['escalanombre']),
      escalavalorMinimo: serializer.fromJson<int?>(json['escalavalorMinimo']),
      escalavalorMaximo: serializer.fromJson<int?>(json['escalavalorMaximo']),
      escalaestado: serializer.fromJson<int?>(json['escalaestado']),
      escaladefecto: serializer.fromJson<bool?>(json['escaladefecto']),
      escalaentidadId: serializer.fromJson<int?>(json['escalaentidadId']),
      programaEducativoId:
          serializer.fromJson<int?>(json['programaEducativoId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'silaboEventoId': serializer.toJson<int>(silaboEventoId),
      'tipoNotaId': serializer.toJson<String>(tipoNotaId),
      'nombre': serializer.toJson<String?>(nombre),
      'tipoId': serializer.toJson<int?>(tipoId),
      'tiponombre': serializer.toJson<String?>(tiponombre),
      'valorDefecto': serializer.toJson<String?>(valorDefecto),
      'longitudPaso': serializer.toJson<double?>(longitudPaso),
      'intervalo': serializer.toJson<bool?>(intervalo),
      'estatico': serializer.toJson<bool?>(estatico),
      'entidadId': serializer.toJson<int?>(entidadId),
      'georeferenciaId': serializer.toJson<int?>(georeferenciaId),
      'organigramaId': serializer.toJson<int?>(organigramaId),
      'estadoId': serializer.toJson<int?>(estadoId),
      'tipoFuenteId': serializer.toJson<int?>(tipoFuenteId),
      'valorMinimo': serializer.toJson<int?>(valorMinimo),
      'valorMaximo': serializer.toJson<int?>(valorMaximo),
      'escalaEvaluacionId': serializer.toJson<int?>(escalaEvaluacionId),
      'escalanombre': serializer.toJson<String?>(escalanombre),
      'escalavalorMinimo': serializer.toJson<int?>(escalavalorMinimo),
      'escalavalorMaximo': serializer.toJson<int?>(escalavalorMaximo),
      'escalaestado': serializer.toJson<int?>(escalaestado),
      'escaladefecto': serializer.toJson<bool?>(escaladefecto),
      'escalaentidadId': serializer.toJson<int?>(escalaentidadId),
      'programaEducativoId': serializer.toJson<int?>(programaEducativoId),
    };
  }

  TipoNotaResultadoData copyWith(
          {int? silaboEventoId,
          String? tipoNotaId,
          String? nombre,
          int? tipoId,
          String? tiponombre,
          String? valorDefecto,
          double? longitudPaso,
          bool? intervalo,
          bool? estatico,
          int? entidadId,
          int? georeferenciaId,
          int? organigramaId,
          int? estadoId,
          int? tipoFuenteId,
          int? valorMinimo,
          int? valorMaximo,
          int? escalaEvaluacionId,
          String? escalanombre,
          int? escalavalorMinimo,
          int? escalavalorMaximo,
          int? escalaestado,
          bool? escaladefecto,
          int? escalaentidadId,
          int? programaEducativoId}) =>
      TipoNotaResultadoData(
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
        tipoNotaId: tipoNotaId ?? this.tipoNotaId,
        nombre: nombre ?? this.nombre,
        tipoId: tipoId ?? this.tipoId,
        tiponombre: tiponombre ?? this.tiponombre,
        valorDefecto: valorDefecto ?? this.valorDefecto,
        longitudPaso: longitudPaso ?? this.longitudPaso,
        intervalo: intervalo ?? this.intervalo,
        estatico: estatico ?? this.estatico,
        entidadId: entidadId ?? this.entidadId,
        georeferenciaId: georeferenciaId ?? this.georeferenciaId,
        organigramaId: organigramaId ?? this.organigramaId,
        estadoId: estadoId ?? this.estadoId,
        tipoFuenteId: tipoFuenteId ?? this.tipoFuenteId,
        valorMinimo: valorMinimo ?? this.valorMinimo,
        valorMaximo: valorMaximo ?? this.valorMaximo,
        escalaEvaluacionId: escalaEvaluacionId ?? this.escalaEvaluacionId,
        escalanombre: escalanombre ?? this.escalanombre,
        escalavalorMinimo: escalavalorMinimo ?? this.escalavalorMinimo,
        escalavalorMaximo: escalavalorMaximo ?? this.escalavalorMaximo,
        escalaestado: escalaestado ?? this.escalaestado,
        escaladefecto: escaladefecto ?? this.escaladefecto,
        escalaentidadId: escalaentidadId ?? this.escalaentidadId,
        programaEducativoId: programaEducativoId ?? this.programaEducativoId,
      );
  @override
  String toString() {
    return (StringBuffer('TipoNotaResultadoData(')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('nombre: $nombre, ')
          ..write('tipoId: $tipoId, ')
          ..write('tiponombre: $tiponombre, ')
          ..write('valorDefecto: $valorDefecto, ')
          ..write('longitudPaso: $longitudPaso, ')
          ..write('intervalo: $intervalo, ')
          ..write('estatico: $estatico, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoFuenteId: $tipoFuenteId, ')
          ..write('valorMinimo: $valorMinimo, ')
          ..write('valorMaximo: $valorMaximo, ')
          ..write('escalaEvaluacionId: $escalaEvaluacionId, ')
          ..write('escalanombre: $escalanombre, ')
          ..write('escalavalorMinimo: $escalavalorMinimo, ')
          ..write('escalavalorMaximo: $escalavalorMaximo, ')
          ..write('escalaestado: $escalaestado, ')
          ..write('escaladefecto: $escaladefecto, ')
          ..write('escalaentidadId: $escalaentidadId, ')
          ..write('programaEducativoId: $programaEducativoId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      silaboEventoId.hashCode,
      $mrjc(
          tipoNotaId.hashCode,
          $mrjc(
              nombre.hashCode,
              $mrjc(
                  tipoId.hashCode,
                  $mrjc(
                      tiponombre.hashCode,
                      $mrjc(
                          valorDefecto.hashCode,
                          $mrjc(
                              longitudPaso.hashCode,
                              $mrjc(
                                  intervalo.hashCode,
                                  $mrjc(
                                      estatico.hashCode,
                                      $mrjc(
                                          entidadId.hashCode,
                                          $mrjc(
                                              georeferenciaId.hashCode,
                                              $mrjc(
                                                  organigramaId.hashCode,
                                                  $mrjc(
                                                      estadoId.hashCode,
                                                      $mrjc(
                                                          tipoFuenteId.hashCode,
                                                          $mrjc(
                                                              valorMinimo
                                                                  .hashCode,
                                                              $mrjc(
                                                                  valorMaximo
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      escalaEvaluacionId
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          escalanombre
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              escalavalorMinimo.hashCode,
                                                                              $mrjc(escalavalorMaximo.hashCode, $mrjc(escalaestado.hashCode, $mrjc(escaladefecto.hashCode, $mrjc(escalaentidadId.hashCode, programaEducativoId.hashCode))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TipoNotaResultadoData &&
          other.silaboEventoId == this.silaboEventoId &&
          other.tipoNotaId == this.tipoNotaId &&
          other.nombre == this.nombre &&
          other.tipoId == this.tipoId &&
          other.tiponombre == this.tiponombre &&
          other.valorDefecto == this.valorDefecto &&
          other.longitudPaso == this.longitudPaso &&
          other.intervalo == this.intervalo &&
          other.estatico == this.estatico &&
          other.entidadId == this.entidadId &&
          other.georeferenciaId == this.georeferenciaId &&
          other.organigramaId == this.organigramaId &&
          other.estadoId == this.estadoId &&
          other.tipoFuenteId == this.tipoFuenteId &&
          other.valorMinimo == this.valorMinimo &&
          other.valorMaximo == this.valorMaximo &&
          other.escalaEvaluacionId == this.escalaEvaluacionId &&
          other.escalanombre == this.escalanombre &&
          other.escalavalorMinimo == this.escalavalorMinimo &&
          other.escalavalorMaximo == this.escalavalorMaximo &&
          other.escalaestado == this.escalaestado &&
          other.escaladefecto == this.escaladefecto &&
          other.escalaentidadId == this.escalaentidadId &&
          other.programaEducativoId == this.programaEducativoId);
}

class TipoNotaResultadoCompanion
    extends UpdateCompanion<TipoNotaResultadoData> {
  final Value<int> silaboEventoId;
  final Value<String> tipoNotaId;
  final Value<String?> nombre;
  final Value<int?> tipoId;
  final Value<String?> tiponombre;
  final Value<String?> valorDefecto;
  final Value<double?> longitudPaso;
  final Value<bool?> intervalo;
  final Value<bool?> estatico;
  final Value<int?> entidadId;
  final Value<int?> georeferenciaId;
  final Value<int?> organigramaId;
  final Value<int?> estadoId;
  final Value<int?> tipoFuenteId;
  final Value<int?> valorMinimo;
  final Value<int?> valorMaximo;
  final Value<int?> escalaEvaluacionId;
  final Value<String?> escalanombre;
  final Value<int?> escalavalorMinimo;
  final Value<int?> escalavalorMaximo;
  final Value<int?> escalaestado;
  final Value<bool?> escaladefecto;
  final Value<int?> escalaentidadId;
  final Value<int?> programaEducativoId;
  const TipoNotaResultadoCompanion({
    this.silaboEventoId = const Value.absent(),
    this.tipoNotaId = const Value.absent(),
    this.nombre = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.tiponombre = const Value.absent(),
    this.valorDefecto = const Value.absent(),
    this.longitudPaso = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.estatico = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoFuenteId = const Value.absent(),
    this.valorMinimo = const Value.absent(),
    this.valorMaximo = const Value.absent(),
    this.escalaEvaluacionId = const Value.absent(),
    this.escalanombre = const Value.absent(),
    this.escalavalorMinimo = const Value.absent(),
    this.escalavalorMaximo = const Value.absent(),
    this.escalaestado = const Value.absent(),
    this.escaladefecto = const Value.absent(),
    this.escalaentidadId = const Value.absent(),
    this.programaEducativoId = const Value.absent(),
  });
  TipoNotaResultadoCompanion.insert({
    required int silaboEventoId,
    required String tipoNotaId,
    this.nombre = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.tiponombre = const Value.absent(),
    this.valorDefecto = const Value.absent(),
    this.longitudPaso = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.estatico = const Value.absent(),
    this.entidadId = const Value.absent(),
    this.georeferenciaId = const Value.absent(),
    this.organigramaId = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.tipoFuenteId = const Value.absent(),
    this.valorMinimo = const Value.absent(),
    this.valorMaximo = const Value.absent(),
    this.escalaEvaluacionId = const Value.absent(),
    this.escalanombre = const Value.absent(),
    this.escalavalorMinimo = const Value.absent(),
    this.escalavalorMaximo = const Value.absent(),
    this.escalaestado = const Value.absent(),
    this.escaladefecto = const Value.absent(),
    this.escalaentidadId = const Value.absent(),
    this.programaEducativoId = const Value.absent(),
  })  : silaboEventoId = Value(silaboEventoId),
        tipoNotaId = Value(tipoNotaId);
  static Insertable<TipoNotaResultadoData> custom({
    Expression<int>? silaboEventoId,
    Expression<String>? tipoNotaId,
    Expression<String?>? nombre,
    Expression<int?>? tipoId,
    Expression<String?>? tiponombre,
    Expression<String?>? valorDefecto,
    Expression<double?>? longitudPaso,
    Expression<bool?>? intervalo,
    Expression<bool?>? estatico,
    Expression<int?>? entidadId,
    Expression<int?>? georeferenciaId,
    Expression<int?>? organigramaId,
    Expression<int?>? estadoId,
    Expression<int?>? tipoFuenteId,
    Expression<int?>? valorMinimo,
    Expression<int?>? valorMaximo,
    Expression<int?>? escalaEvaluacionId,
    Expression<String?>? escalanombre,
    Expression<int?>? escalavalorMinimo,
    Expression<int?>? escalavalorMaximo,
    Expression<int?>? escalaestado,
    Expression<bool?>? escaladefecto,
    Expression<int?>? escalaentidadId,
    Expression<int?>? programaEducativoId,
  }) {
    return RawValuesInsertable({
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
      if (tipoNotaId != null) 'tipo_nota_id': tipoNotaId,
      if (nombre != null) 'nombre': nombre,
      if (tipoId != null) 'tipo_id': tipoId,
      if (tiponombre != null) 'tiponombre': tiponombre,
      if (valorDefecto != null) 'valor_defecto': valorDefecto,
      if (longitudPaso != null) 'longitud_paso': longitudPaso,
      if (intervalo != null) 'intervalo': intervalo,
      if (estatico != null) 'estatico': estatico,
      if (entidadId != null) 'entidad_id': entidadId,
      if (georeferenciaId != null) 'georeferencia_id': georeferenciaId,
      if (organigramaId != null) 'organigrama_id': organigramaId,
      if (estadoId != null) 'estado_id': estadoId,
      if (tipoFuenteId != null) 'tipo_fuente_id': tipoFuenteId,
      if (valorMinimo != null) 'valor_minimo': valorMinimo,
      if (valorMaximo != null) 'valor_maximo': valorMaximo,
      if (escalaEvaluacionId != null)
        'escala_evaluacion_id': escalaEvaluacionId,
      if (escalanombre != null) 'escalanombre': escalanombre,
      if (escalavalorMinimo != null) 'escalavalor_minimo': escalavalorMinimo,
      if (escalavalorMaximo != null) 'escalavalor_maximo': escalavalorMaximo,
      if (escalaestado != null) 'escalaestado': escalaestado,
      if (escaladefecto != null) 'escaladefecto': escaladefecto,
      if (escalaentidadId != null) 'escalaentidad_id': escalaentidadId,
      if (programaEducativoId != null)
        'programa_educativo_id': programaEducativoId,
    });
  }

  TipoNotaResultadoCompanion copyWith(
      {Value<int>? silaboEventoId,
      Value<String>? tipoNotaId,
      Value<String?>? nombre,
      Value<int?>? tipoId,
      Value<String?>? tiponombre,
      Value<String?>? valorDefecto,
      Value<double?>? longitudPaso,
      Value<bool?>? intervalo,
      Value<bool?>? estatico,
      Value<int?>? entidadId,
      Value<int?>? georeferenciaId,
      Value<int?>? organigramaId,
      Value<int?>? estadoId,
      Value<int?>? tipoFuenteId,
      Value<int?>? valorMinimo,
      Value<int?>? valorMaximo,
      Value<int?>? escalaEvaluacionId,
      Value<String?>? escalanombre,
      Value<int?>? escalavalorMinimo,
      Value<int?>? escalavalorMaximo,
      Value<int?>? escalaestado,
      Value<bool?>? escaladefecto,
      Value<int?>? escalaentidadId,
      Value<int?>? programaEducativoId}) {
    return TipoNotaResultadoCompanion(
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      tipoNotaId: tipoNotaId ?? this.tipoNotaId,
      nombre: nombre ?? this.nombre,
      tipoId: tipoId ?? this.tipoId,
      tiponombre: tiponombre ?? this.tiponombre,
      valorDefecto: valorDefecto ?? this.valorDefecto,
      longitudPaso: longitudPaso ?? this.longitudPaso,
      intervalo: intervalo ?? this.intervalo,
      estatico: estatico ?? this.estatico,
      entidadId: entidadId ?? this.entidadId,
      georeferenciaId: georeferenciaId ?? this.georeferenciaId,
      organigramaId: organigramaId ?? this.organigramaId,
      estadoId: estadoId ?? this.estadoId,
      tipoFuenteId: tipoFuenteId ?? this.tipoFuenteId,
      valorMinimo: valorMinimo ?? this.valorMinimo,
      valorMaximo: valorMaximo ?? this.valorMaximo,
      escalaEvaluacionId: escalaEvaluacionId ?? this.escalaEvaluacionId,
      escalanombre: escalanombre ?? this.escalanombre,
      escalavalorMinimo: escalavalorMinimo ?? this.escalavalorMinimo,
      escalavalorMaximo: escalavalorMaximo ?? this.escalavalorMaximo,
      escalaestado: escalaestado ?? this.escalaestado,
      escaladefecto: escaladefecto ?? this.escaladefecto,
      escalaentidadId: escalaentidadId ?? this.escalaentidadId,
      programaEducativoId: programaEducativoId ?? this.programaEducativoId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int>(silaboEventoId.value);
    }
    if (tipoNotaId.present) {
      map['tipo_nota_id'] = Variable<String>(tipoNotaId.value);
    }
    if (nombre.present) {
      map['nombre'] = Variable<String?>(nombre.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (tiponombre.present) {
      map['tiponombre'] = Variable<String?>(tiponombre.value);
    }
    if (valorDefecto.present) {
      map['valor_defecto'] = Variable<String?>(valorDefecto.value);
    }
    if (longitudPaso.present) {
      map['longitud_paso'] = Variable<double?>(longitudPaso.value);
    }
    if (intervalo.present) {
      map['intervalo'] = Variable<bool?>(intervalo.value);
    }
    if (estatico.present) {
      map['estatico'] = Variable<bool?>(estatico.value);
    }
    if (entidadId.present) {
      map['entidad_id'] = Variable<int?>(entidadId.value);
    }
    if (georeferenciaId.present) {
      map['georeferencia_id'] = Variable<int?>(georeferenciaId.value);
    }
    if (organigramaId.present) {
      map['organigrama_id'] = Variable<int?>(organigramaId.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (tipoFuenteId.present) {
      map['tipo_fuente_id'] = Variable<int?>(tipoFuenteId.value);
    }
    if (valorMinimo.present) {
      map['valor_minimo'] = Variable<int?>(valorMinimo.value);
    }
    if (valorMaximo.present) {
      map['valor_maximo'] = Variable<int?>(valorMaximo.value);
    }
    if (escalaEvaluacionId.present) {
      map['escala_evaluacion_id'] = Variable<int?>(escalaEvaluacionId.value);
    }
    if (escalanombre.present) {
      map['escalanombre'] = Variable<String?>(escalanombre.value);
    }
    if (escalavalorMinimo.present) {
      map['escalavalor_minimo'] = Variable<int?>(escalavalorMinimo.value);
    }
    if (escalavalorMaximo.present) {
      map['escalavalor_maximo'] = Variable<int?>(escalavalorMaximo.value);
    }
    if (escalaestado.present) {
      map['escalaestado'] = Variable<int?>(escalaestado.value);
    }
    if (escaladefecto.present) {
      map['escaladefecto'] = Variable<bool?>(escaladefecto.value);
    }
    if (escalaentidadId.present) {
      map['escalaentidad_id'] = Variable<int?>(escalaentidadId.value);
    }
    if (programaEducativoId.present) {
      map['programa_educativo_id'] = Variable<int?>(programaEducativoId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TipoNotaResultadoCompanion(')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('nombre: $nombre, ')
          ..write('tipoId: $tipoId, ')
          ..write('tiponombre: $tiponombre, ')
          ..write('valorDefecto: $valorDefecto, ')
          ..write('longitudPaso: $longitudPaso, ')
          ..write('intervalo: $intervalo, ')
          ..write('estatico: $estatico, ')
          ..write('entidadId: $entidadId, ')
          ..write('georeferenciaId: $georeferenciaId, ')
          ..write('organigramaId: $organigramaId, ')
          ..write('estadoId: $estadoId, ')
          ..write('tipoFuenteId: $tipoFuenteId, ')
          ..write('valorMinimo: $valorMinimo, ')
          ..write('valorMaximo: $valorMaximo, ')
          ..write('escalaEvaluacionId: $escalaEvaluacionId, ')
          ..write('escalanombre: $escalanombre, ')
          ..write('escalavalorMinimo: $escalavalorMinimo, ')
          ..write('escalavalorMaximo: $escalavalorMaximo, ')
          ..write('escalaestado: $escalaestado, ')
          ..write('escaladefecto: $escaladefecto, ')
          ..write('escalaentidadId: $escalaentidadId, ')
          ..write('programaEducativoId: $programaEducativoId')
          ..write(')'))
        .toString();
  }
}

class $TipoNotaResultadoTable extends TipoNotaResultado
    with TableInfo<$TipoNotaResultadoTable, TipoNotaResultadoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $TipoNotaResultadoTable(this._db, [this._alias]);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _tipoNotaIdMeta = const VerificationMeta('tipoNotaId');
  late final GeneratedColumn<String?> tipoNotaId = GeneratedColumn<String?>(
      'tipo_nota_id', aliasedName, false,
      typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _nombreMeta = const VerificationMeta('nombre');
  late final GeneratedColumn<String?> nombre = GeneratedColumn<String?>(
      'nombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tiponombreMeta = const VerificationMeta('tiponombre');
  late final GeneratedColumn<String?> tiponombre = GeneratedColumn<String?>(
      'tiponombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _valorDefectoMeta =
      const VerificationMeta('valorDefecto');
  late final GeneratedColumn<String?> valorDefecto = GeneratedColumn<String?>(
      'valor_defecto', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _longitudPasoMeta =
      const VerificationMeta('longitudPaso');
  late final GeneratedColumn<double?> longitudPaso = GeneratedColumn<double?>(
      'longitud_paso', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _intervaloMeta = const VerificationMeta('intervalo');
  late final GeneratedColumn<bool?> intervalo = GeneratedColumn<bool?>(
      'intervalo', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (intervalo IN (0, 1))');
  final VerificationMeta _estaticoMeta = const VerificationMeta('estatico');
  late final GeneratedColumn<bool?> estatico = GeneratedColumn<bool?>(
      'estatico', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (estatico IN (0, 1))');
  final VerificationMeta _entidadIdMeta = const VerificationMeta('entidadId');
  late final GeneratedColumn<int?> entidadId = GeneratedColumn<int?>(
      'entidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _georeferenciaIdMeta =
      const VerificationMeta('georeferenciaId');
  late final GeneratedColumn<int?> georeferenciaId = GeneratedColumn<int?>(
      'georeferencia_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _organigramaIdMeta =
      const VerificationMeta('organigramaId');
  late final GeneratedColumn<int?> organigramaId = GeneratedColumn<int?>(
      'organigrama_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _tipoFuenteIdMeta =
      const VerificationMeta('tipoFuenteId');
  late final GeneratedColumn<int?> tipoFuenteId = GeneratedColumn<int?>(
      'tipo_fuente_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _valorMinimoMeta =
      const VerificationMeta('valorMinimo');
  late final GeneratedColumn<int?> valorMinimo = GeneratedColumn<int?>(
      'valor_minimo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _valorMaximoMeta =
      const VerificationMeta('valorMaximo');
  late final GeneratedColumn<int?> valorMaximo = GeneratedColumn<int?>(
      'valor_maximo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalaEvaluacionIdMeta =
      const VerificationMeta('escalaEvaluacionId');
  late final GeneratedColumn<int?> escalaEvaluacionId = GeneratedColumn<int?>(
      'escala_evaluacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalanombreMeta =
      const VerificationMeta('escalanombre');
  late final GeneratedColumn<String?> escalanombre = GeneratedColumn<String?>(
      'escalanombre', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _escalavalorMinimoMeta =
      const VerificationMeta('escalavalorMinimo');
  late final GeneratedColumn<int?> escalavalorMinimo = GeneratedColumn<int?>(
      'escalavalor_minimo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalavalorMaximoMeta =
      const VerificationMeta('escalavalorMaximo');
  late final GeneratedColumn<int?> escalavalorMaximo = GeneratedColumn<int?>(
      'escalavalor_maximo', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escalaestadoMeta =
      const VerificationMeta('escalaestado');
  late final GeneratedColumn<int?> escalaestado = GeneratedColumn<int?>(
      'escalaestado', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _escaladefectoMeta =
      const VerificationMeta('escaladefecto');
  late final GeneratedColumn<bool?> escaladefecto = GeneratedColumn<bool?>(
      'escaladefecto', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (escaladefecto IN (0, 1))');
  final VerificationMeta _escalaentidadIdMeta =
      const VerificationMeta('escalaentidadId');
  late final GeneratedColumn<int?> escalaentidadId = GeneratedColumn<int?>(
      'escalaentidad_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _programaEducativoIdMeta =
      const VerificationMeta('programaEducativoId');
  late final GeneratedColumn<int?> programaEducativoId = GeneratedColumn<int?>(
      'programa_educativo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        silaboEventoId,
        tipoNotaId,
        nombre,
        tipoId,
        tiponombre,
        valorDefecto,
        longitudPaso,
        intervalo,
        estatico,
        entidadId,
        georeferenciaId,
        organigramaId,
        estadoId,
        tipoFuenteId,
        valorMinimo,
        valorMaximo,
        escalaEvaluacionId,
        escalanombre,
        escalavalorMinimo,
        escalavalorMaximo,
        escalaestado,
        escaladefecto,
        escalaentidadId,
        programaEducativoId
      ];
  @override
  String get aliasedName => _alias ?? 'tipo_nota_resultado';
  @override
  String get actualTableName => 'tipo_nota_resultado';
  @override
  VerificationContext validateIntegrity(
      Insertable<TipoNotaResultadoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    } else if (isInserting) {
      context.missing(_silaboEventoIdMeta);
    }
    if (data.containsKey('tipo_nota_id')) {
      context.handle(
          _tipoNotaIdMeta,
          tipoNotaId.isAcceptableOrUnknown(
              data['tipo_nota_id']!, _tipoNotaIdMeta));
    } else if (isInserting) {
      context.missing(_tipoNotaIdMeta);
    }
    if (data.containsKey('nombre')) {
      context.handle(_nombreMeta,
          nombre.isAcceptableOrUnknown(data['nombre']!, _nombreMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('tiponombre')) {
      context.handle(
          _tiponombreMeta,
          tiponombre.isAcceptableOrUnknown(
              data['tiponombre']!, _tiponombreMeta));
    }
    if (data.containsKey('valor_defecto')) {
      context.handle(
          _valorDefectoMeta,
          valorDefecto.isAcceptableOrUnknown(
              data['valor_defecto']!, _valorDefectoMeta));
    }
    if (data.containsKey('longitud_paso')) {
      context.handle(
          _longitudPasoMeta,
          longitudPaso.isAcceptableOrUnknown(
              data['longitud_paso']!, _longitudPasoMeta));
    }
    if (data.containsKey('intervalo')) {
      context.handle(_intervaloMeta,
          intervalo.isAcceptableOrUnknown(data['intervalo']!, _intervaloMeta));
    }
    if (data.containsKey('estatico')) {
      context.handle(_estaticoMeta,
          estatico.isAcceptableOrUnknown(data['estatico']!, _estaticoMeta));
    }
    if (data.containsKey('entidad_id')) {
      context.handle(_entidadIdMeta,
          entidadId.isAcceptableOrUnknown(data['entidad_id']!, _entidadIdMeta));
    }
    if (data.containsKey('georeferencia_id')) {
      context.handle(
          _georeferenciaIdMeta,
          georeferenciaId.isAcceptableOrUnknown(
              data['georeferencia_id']!, _georeferenciaIdMeta));
    }
    if (data.containsKey('organigrama_id')) {
      context.handle(
          _organigramaIdMeta,
          organigramaId.isAcceptableOrUnknown(
              data['organigrama_id']!, _organigramaIdMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('tipo_fuente_id')) {
      context.handle(
          _tipoFuenteIdMeta,
          tipoFuenteId.isAcceptableOrUnknown(
              data['tipo_fuente_id']!, _tipoFuenteIdMeta));
    }
    if (data.containsKey('valor_minimo')) {
      context.handle(
          _valorMinimoMeta,
          valorMinimo.isAcceptableOrUnknown(
              data['valor_minimo']!, _valorMinimoMeta));
    }
    if (data.containsKey('valor_maximo')) {
      context.handle(
          _valorMaximoMeta,
          valorMaximo.isAcceptableOrUnknown(
              data['valor_maximo']!, _valorMaximoMeta));
    }
    if (data.containsKey('escala_evaluacion_id')) {
      context.handle(
          _escalaEvaluacionIdMeta,
          escalaEvaluacionId.isAcceptableOrUnknown(
              data['escala_evaluacion_id']!, _escalaEvaluacionIdMeta));
    }
    if (data.containsKey('escalanombre')) {
      context.handle(
          _escalanombreMeta,
          escalanombre.isAcceptableOrUnknown(
              data['escalanombre']!, _escalanombreMeta));
    }
    if (data.containsKey('escalavalor_minimo')) {
      context.handle(
          _escalavalorMinimoMeta,
          escalavalorMinimo.isAcceptableOrUnknown(
              data['escalavalor_minimo']!, _escalavalorMinimoMeta));
    }
    if (data.containsKey('escalavalor_maximo')) {
      context.handle(
          _escalavalorMaximoMeta,
          escalavalorMaximo.isAcceptableOrUnknown(
              data['escalavalor_maximo']!, _escalavalorMaximoMeta));
    }
    if (data.containsKey('escalaestado')) {
      context.handle(
          _escalaestadoMeta,
          escalaestado.isAcceptableOrUnknown(
              data['escalaestado']!, _escalaestadoMeta));
    }
    if (data.containsKey('escaladefecto')) {
      context.handle(
          _escaladefectoMeta,
          escaladefecto.isAcceptableOrUnknown(
              data['escaladefecto']!, _escaladefectoMeta));
    }
    if (data.containsKey('escalaentidad_id')) {
      context.handle(
          _escalaentidadIdMeta,
          escalaentidadId.isAcceptableOrUnknown(
              data['escalaentidad_id']!, _escalaentidadIdMeta));
    }
    if (data.containsKey('programa_educativo_id')) {
      context.handle(
          _programaEducativoIdMeta,
          programaEducativoId.isAcceptableOrUnknown(
              data['programa_educativo_id']!, _programaEducativoIdMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {tipoNotaId, silaboEventoId};
  @override
  TipoNotaResultadoData map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TipoNotaResultadoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TipoNotaResultadoTable createAlias(String alias) {
    return $TipoNotaResultadoTable(_db, alias);
  }
}

class ValorTipoNotaResultadoData extends DataClass
    implements Insertable<ValorTipoNotaResultadoData> {
  final int silaboEventoId;
  final String valorTipoNotaId;
  final String? tipoNotaId;
  final String? titulo;
  final String? alias;
  final double? limiteInferior;
  final double? limiteSuperior;
  final double? valorNumerico;
  final String? icono;
  final int? estadoId;
  final bool? incluidoLInferior;
  final bool? incluidoLSuperior;
  final int? tipoId;
  final int? usuarioCreacionId;
  final int? usuarioCreadorId;
  final int? fechaCreacion;
  final int? usuarioAccionId;
  final int? fechaAccion;
  final int? fechaEnvio;
  final int? fechaEntrega;
  final int? fechaRecibido;
  final int? fechaVisto;
  final int? fechaRespuesta;
  final String? getSTime;
  ValorTipoNotaResultadoData(
      {required this.silaboEventoId,
      required this.valorTipoNotaId,
      this.tipoNotaId,
      this.titulo,
      this.alias,
      this.limiteInferior,
      this.limiteSuperior,
      this.valorNumerico,
      this.icono,
      this.estadoId,
      this.incluidoLInferior,
      this.incluidoLSuperior,
      this.tipoId,
      this.usuarioCreacionId,
      this.usuarioCreadorId,
      this.fechaCreacion,
      this.usuarioAccionId,
      this.fechaAccion,
      this.fechaEnvio,
      this.fechaEntrega,
      this.fechaRecibido,
      this.fechaVisto,
      this.fechaRespuesta,
      this.getSTime});
  factory ValorTipoNotaResultadoData.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ValorTipoNotaResultadoData(
      silaboEventoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}silabo_evento_id'])!,
      valorTipoNotaId: const StringType().mapFromDatabaseResponse(
          data['${effectivePrefix}valor_tipo_nota_id'])!,
      tipoNotaId: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_nota_id']),
      titulo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}titulo']),
      alias: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}alias']),
      limiteInferior: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}limite_inferior']),
      limiteSuperior: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}limite_superior']),
      valorNumerico: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}valor_numerico']),
      icono: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}icono']),
      estadoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}estado_id']),
      incluidoLInferior: const BoolType().mapFromDatabaseResponse(
          data['${effectivePrefix}incluido_l_inferior']),
      incluidoLSuperior: const BoolType().mapFromDatabaseResponse(
          data['${effectivePrefix}incluido_l_superior']),
      tipoId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tipo_id']),
      usuarioCreacionId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creacion_id']),
      usuarioCreadorId: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}usuario_creador_id']),
      fechaCreacion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_creacion']),
      usuarioAccionId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}usuario_accion_id']),
      fechaAccion: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_accion']),
      fechaEnvio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_envio']),
      fechaEntrega: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_entrega']),
      fechaRecibido: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_recibido']),
      fechaVisto: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_visto']),
      fechaRespuesta: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}fecha_respuesta']),
      getSTime: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}get_s_time']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['silabo_evento_id'] = Variable<int>(silaboEventoId);
    map['valor_tipo_nota_id'] = Variable<String>(valorTipoNotaId);
    if (!nullToAbsent || tipoNotaId != null) {
      map['tipo_nota_id'] = Variable<String?>(tipoNotaId);
    }
    if (!nullToAbsent || titulo != null) {
      map['titulo'] = Variable<String?>(titulo);
    }
    if (!nullToAbsent || alias != null) {
      map['alias'] = Variable<String?>(alias);
    }
    if (!nullToAbsent || limiteInferior != null) {
      map['limite_inferior'] = Variable<double?>(limiteInferior);
    }
    if (!nullToAbsent || limiteSuperior != null) {
      map['limite_superior'] = Variable<double?>(limiteSuperior);
    }
    if (!nullToAbsent || valorNumerico != null) {
      map['valor_numerico'] = Variable<double?>(valorNumerico);
    }
    if (!nullToAbsent || icono != null) {
      map['icono'] = Variable<String?>(icono);
    }
    if (!nullToAbsent || estadoId != null) {
      map['estado_id'] = Variable<int?>(estadoId);
    }
    if (!nullToAbsent || incluidoLInferior != null) {
      map['incluido_l_inferior'] = Variable<bool?>(incluidoLInferior);
    }
    if (!nullToAbsent || incluidoLSuperior != null) {
      map['incluido_l_superior'] = Variable<bool?>(incluidoLSuperior);
    }
    if (!nullToAbsent || tipoId != null) {
      map['tipo_id'] = Variable<int?>(tipoId);
    }
    if (!nullToAbsent || usuarioCreacionId != null) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId);
    }
    if (!nullToAbsent || usuarioCreadorId != null) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId);
    }
    if (!nullToAbsent || fechaCreacion != null) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion);
    }
    if (!nullToAbsent || usuarioAccionId != null) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId);
    }
    if (!nullToAbsent || fechaAccion != null) {
      map['fecha_accion'] = Variable<int?>(fechaAccion);
    }
    if (!nullToAbsent || fechaEnvio != null) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio);
    }
    if (!nullToAbsent || fechaEntrega != null) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega);
    }
    if (!nullToAbsent || fechaRecibido != null) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido);
    }
    if (!nullToAbsent || fechaVisto != null) {
      map['fecha_visto'] = Variable<int?>(fechaVisto);
    }
    if (!nullToAbsent || fechaRespuesta != null) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta);
    }
    if (!nullToAbsent || getSTime != null) {
      map['get_s_time'] = Variable<String?>(getSTime);
    }
    return map;
  }

  ValorTipoNotaResultadoCompanion toCompanion(bool nullToAbsent) {
    return ValorTipoNotaResultadoCompanion(
      silaboEventoId: Value(silaboEventoId),
      valorTipoNotaId: Value(valorTipoNotaId),
      tipoNotaId: tipoNotaId == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoNotaId),
      titulo:
          titulo == null && nullToAbsent ? const Value.absent() : Value(titulo),
      alias:
          alias == null && nullToAbsent ? const Value.absent() : Value(alias),
      limiteInferior: limiteInferior == null && nullToAbsent
          ? const Value.absent()
          : Value(limiteInferior),
      limiteSuperior: limiteSuperior == null && nullToAbsent
          ? const Value.absent()
          : Value(limiteSuperior),
      valorNumerico: valorNumerico == null && nullToAbsent
          ? const Value.absent()
          : Value(valorNumerico),
      icono:
          icono == null && nullToAbsent ? const Value.absent() : Value(icono),
      estadoId: estadoId == null && nullToAbsent
          ? const Value.absent()
          : Value(estadoId),
      incluidoLInferior: incluidoLInferior == null && nullToAbsent
          ? const Value.absent()
          : Value(incluidoLInferior),
      incluidoLSuperior: incluidoLSuperior == null && nullToAbsent
          ? const Value.absent()
          : Value(incluidoLSuperior),
      tipoId:
          tipoId == null && nullToAbsent ? const Value.absent() : Value(tipoId),
      usuarioCreacionId: usuarioCreacionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreacionId),
      usuarioCreadorId: usuarioCreadorId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioCreadorId),
      fechaCreacion: fechaCreacion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaCreacion),
      usuarioAccionId: usuarioAccionId == null && nullToAbsent
          ? const Value.absent()
          : Value(usuarioAccionId),
      fechaAccion: fechaAccion == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaAccion),
      fechaEnvio: fechaEnvio == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEnvio),
      fechaEntrega: fechaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaEntrega),
      fechaRecibido: fechaRecibido == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRecibido),
      fechaVisto: fechaVisto == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaVisto),
      fechaRespuesta: fechaRespuesta == null && nullToAbsent
          ? const Value.absent()
          : Value(fechaRespuesta),
      getSTime: getSTime == null && nullToAbsent
          ? const Value.absent()
          : Value(getSTime),
    );
  }

  factory ValorTipoNotaResultadoData.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ValorTipoNotaResultadoData(
      silaboEventoId: serializer.fromJson<int>(json['silaboEventoId']),
      valorTipoNotaId: serializer.fromJson<String>(json['valorTipoNotaId']),
      tipoNotaId: serializer.fromJson<String?>(json['tipoNotaId']),
      titulo: serializer.fromJson<String?>(json['titulo']),
      alias: serializer.fromJson<String?>(json['alias']),
      limiteInferior: serializer.fromJson<double?>(json['limiteInferior']),
      limiteSuperior: serializer.fromJson<double?>(json['limiteSuperior']),
      valorNumerico: serializer.fromJson<double?>(json['valorNumerico']),
      icono: serializer.fromJson<String?>(json['icono']),
      estadoId: serializer.fromJson<int?>(json['estadoId']),
      incluidoLInferior: serializer.fromJson<bool?>(json['incluidoLInferior']),
      incluidoLSuperior: serializer.fromJson<bool?>(json['incluidoLSuperior']),
      tipoId: serializer.fromJson<int?>(json['tipoId']),
      usuarioCreacionId: serializer.fromJson<int?>(json['usuarioCreacionId']),
      usuarioCreadorId: serializer.fromJson<int?>(json['usuarioCreadorId']),
      fechaCreacion: serializer.fromJson<int?>(json['fechaCreacion']),
      usuarioAccionId: serializer.fromJson<int?>(json['usuarioAccionId']),
      fechaAccion: serializer.fromJson<int?>(json['fechaAccion']),
      fechaEnvio: serializer.fromJson<int?>(json['fechaEnvio']),
      fechaEntrega: serializer.fromJson<int?>(json['fechaEntrega']),
      fechaRecibido: serializer.fromJson<int?>(json['fechaRecibido']),
      fechaVisto: serializer.fromJson<int?>(json['fechaVisto']),
      fechaRespuesta: serializer.fromJson<int?>(json['fechaRespuesta']),
      getSTime: serializer.fromJson<String?>(json['getSTime']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'silaboEventoId': serializer.toJson<int>(silaboEventoId),
      'valorTipoNotaId': serializer.toJson<String>(valorTipoNotaId),
      'tipoNotaId': serializer.toJson<String?>(tipoNotaId),
      'titulo': serializer.toJson<String?>(titulo),
      'alias': serializer.toJson<String?>(alias),
      'limiteInferior': serializer.toJson<double?>(limiteInferior),
      'limiteSuperior': serializer.toJson<double?>(limiteSuperior),
      'valorNumerico': serializer.toJson<double?>(valorNumerico),
      'icono': serializer.toJson<String?>(icono),
      'estadoId': serializer.toJson<int?>(estadoId),
      'incluidoLInferior': serializer.toJson<bool?>(incluidoLInferior),
      'incluidoLSuperior': serializer.toJson<bool?>(incluidoLSuperior),
      'tipoId': serializer.toJson<int?>(tipoId),
      'usuarioCreacionId': serializer.toJson<int?>(usuarioCreacionId),
      'usuarioCreadorId': serializer.toJson<int?>(usuarioCreadorId),
      'fechaCreacion': serializer.toJson<int?>(fechaCreacion),
      'usuarioAccionId': serializer.toJson<int?>(usuarioAccionId),
      'fechaAccion': serializer.toJson<int?>(fechaAccion),
      'fechaEnvio': serializer.toJson<int?>(fechaEnvio),
      'fechaEntrega': serializer.toJson<int?>(fechaEntrega),
      'fechaRecibido': serializer.toJson<int?>(fechaRecibido),
      'fechaVisto': serializer.toJson<int?>(fechaVisto),
      'fechaRespuesta': serializer.toJson<int?>(fechaRespuesta),
      'getSTime': serializer.toJson<String?>(getSTime),
    };
  }

  ValorTipoNotaResultadoData copyWith(
          {int? silaboEventoId,
          String? valorTipoNotaId,
          String? tipoNotaId,
          String? titulo,
          String? alias,
          double? limiteInferior,
          double? limiteSuperior,
          double? valorNumerico,
          String? icono,
          int? estadoId,
          bool? incluidoLInferior,
          bool? incluidoLSuperior,
          int? tipoId,
          int? usuarioCreacionId,
          int? usuarioCreadorId,
          int? fechaCreacion,
          int? usuarioAccionId,
          int? fechaAccion,
          int? fechaEnvio,
          int? fechaEntrega,
          int? fechaRecibido,
          int? fechaVisto,
          int? fechaRespuesta,
          String? getSTime}) =>
      ValorTipoNotaResultadoData(
        silaboEventoId: silaboEventoId ?? this.silaboEventoId,
        valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
        tipoNotaId: tipoNotaId ?? this.tipoNotaId,
        titulo: titulo ?? this.titulo,
        alias: alias ?? this.alias,
        limiteInferior: limiteInferior ?? this.limiteInferior,
        limiteSuperior: limiteSuperior ?? this.limiteSuperior,
        valorNumerico: valorNumerico ?? this.valorNumerico,
        icono: icono ?? this.icono,
        estadoId: estadoId ?? this.estadoId,
        incluidoLInferior: incluidoLInferior ?? this.incluidoLInferior,
        incluidoLSuperior: incluidoLSuperior ?? this.incluidoLSuperior,
        tipoId: tipoId ?? this.tipoId,
        usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
        usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
        fechaCreacion: fechaCreacion ?? this.fechaCreacion,
        usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
        fechaAccion: fechaAccion ?? this.fechaAccion,
        fechaEnvio: fechaEnvio ?? this.fechaEnvio,
        fechaEntrega: fechaEntrega ?? this.fechaEntrega,
        fechaRecibido: fechaRecibido ?? this.fechaRecibido,
        fechaVisto: fechaVisto ?? this.fechaVisto,
        fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
        getSTime: getSTime ?? this.getSTime,
      );
  @override
  String toString() {
    return (StringBuffer('ValorTipoNotaResultadoData(')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('titulo: $titulo, ')
          ..write('alias: $alias, ')
          ..write('limiteInferior: $limiteInferior, ')
          ..write('limiteSuperior: $limiteSuperior, ')
          ..write('valorNumerico: $valorNumerico, ')
          ..write('icono: $icono, ')
          ..write('estadoId: $estadoId, ')
          ..write('incluidoLInferior: $incluidoLInferior, ')
          ..write('incluidoLSuperior: $incluidoLSuperior, ')
          ..write('tipoId: $tipoId, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      silaboEventoId.hashCode,
      $mrjc(
          valorTipoNotaId.hashCode,
          $mrjc(
              tipoNotaId.hashCode,
              $mrjc(
                  titulo.hashCode,
                  $mrjc(
                      alias.hashCode,
                      $mrjc(
                          limiteInferior.hashCode,
                          $mrjc(
                              limiteSuperior.hashCode,
                              $mrjc(
                                  valorNumerico.hashCode,
                                  $mrjc(
                                      icono.hashCode,
                                      $mrjc(
                                          estadoId.hashCode,
                                          $mrjc(
                                              incluidoLInferior.hashCode,
                                              $mrjc(
                                                  incluidoLSuperior.hashCode,
                                                  $mrjc(
                                                      tipoId.hashCode,
                                                      $mrjc(
                                                          usuarioCreacionId
                                                              .hashCode,
                                                          $mrjc(
                                                              usuarioCreadorId
                                                                  .hashCode,
                                                              $mrjc(
                                                                  fechaCreacion
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      usuarioAccionId
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          fechaAccion
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              fechaEnvio.hashCode,
                                                                              $mrjc(fechaEntrega.hashCode, $mrjc(fechaRecibido.hashCode, $mrjc(fechaVisto.hashCode, $mrjc(fechaRespuesta.hashCode, getSTime.hashCode))))))))))))))))))))))));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ValorTipoNotaResultadoData &&
          other.silaboEventoId == this.silaboEventoId &&
          other.valorTipoNotaId == this.valorTipoNotaId &&
          other.tipoNotaId == this.tipoNotaId &&
          other.titulo == this.titulo &&
          other.alias == this.alias &&
          other.limiteInferior == this.limiteInferior &&
          other.limiteSuperior == this.limiteSuperior &&
          other.valorNumerico == this.valorNumerico &&
          other.icono == this.icono &&
          other.estadoId == this.estadoId &&
          other.incluidoLInferior == this.incluidoLInferior &&
          other.incluidoLSuperior == this.incluidoLSuperior &&
          other.tipoId == this.tipoId &&
          other.usuarioCreacionId == this.usuarioCreacionId &&
          other.usuarioCreadorId == this.usuarioCreadorId &&
          other.fechaCreacion == this.fechaCreacion &&
          other.usuarioAccionId == this.usuarioAccionId &&
          other.fechaAccion == this.fechaAccion &&
          other.fechaEnvio == this.fechaEnvio &&
          other.fechaEntrega == this.fechaEntrega &&
          other.fechaRecibido == this.fechaRecibido &&
          other.fechaVisto == this.fechaVisto &&
          other.fechaRespuesta == this.fechaRespuesta &&
          other.getSTime == this.getSTime);
}

class ValorTipoNotaResultadoCompanion
    extends UpdateCompanion<ValorTipoNotaResultadoData> {
  final Value<int> silaboEventoId;
  final Value<String> valorTipoNotaId;
  final Value<String?> tipoNotaId;
  final Value<String?> titulo;
  final Value<String?> alias;
  final Value<double?> limiteInferior;
  final Value<double?> limiteSuperior;
  final Value<double?> valorNumerico;
  final Value<String?> icono;
  final Value<int?> estadoId;
  final Value<bool?> incluidoLInferior;
  final Value<bool?> incluidoLSuperior;
  final Value<int?> tipoId;
  final Value<int?> usuarioCreacionId;
  final Value<int?> usuarioCreadorId;
  final Value<int?> fechaCreacion;
  final Value<int?> usuarioAccionId;
  final Value<int?> fechaAccion;
  final Value<int?> fechaEnvio;
  final Value<int?> fechaEntrega;
  final Value<int?> fechaRecibido;
  final Value<int?> fechaVisto;
  final Value<int?> fechaRespuesta;
  final Value<String?> getSTime;
  const ValorTipoNotaResultadoCompanion({
    this.silaboEventoId = const Value.absent(),
    this.valorTipoNotaId = const Value.absent(),
    this.tipoNotaId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.alias = const Value.absent(),
    this.limiteInferior = const Value.absent(),
    this.limiteSuperior = const Value.absent(),
    this.valorNumerico = const Value.absent(),
    this.icono = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.incluidoLInferior = const Value.absent(),
    this.incluidoLSuperior = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  });
  ValorTipoNotaResultadoCompanion.insert({
    required int silaboEventoId,
    required String valorTipoNotaId,
    this.tipoNotaId = const Value.absent(),
    this.titulo = const Value.absent(),
    this.alias = const Value.absent(),
    this.limiteInferior = const Value.absent(),
    this.limiteSuperior = const Value.absent(),
    this.valorNumerico = const Value.absent(),
    this.icono = const Value.absent(),
    this.estadoId = const Value.absent(),
    this.incluidoLInferior = const Value.absent(),
    this.incluidoLSuperior = const Value.absent(),
    this.tipoId = const Value.absent(),
    this.usuarioCreacionId = const Value.absent(),
    this.usuarioCreadorId = const Value.absent(),
    this.fechaCreacion = const Value.absent(),
    this.usuarioAccionId = const Value.absent(),
    this.fechaAccion = const Value.absent(),
    this.fechaEnvio = const Value.absent(),
    this.fechaEntrega = const Value.absent(),
    this.fechaRecibido = const Value.absent(),
    this.fechaVisto = const Value.absent(),
    this.fechaRespuesta = const Value.absent(),
    this.getSTime = const Value.absent(),
  })  : silaboEventoId = Value(silaboEventoId),
        valorTipoNotaId = Value(valorTipoNotaId);
  static Insertable<ValorTipoNotaResultadoData> custom({
    Expression<int>? silaboEventoId,
    Expression<String>? valorTipoNotaId,
    Expression<String?>? tipoNotaId,
    Expression<String?>? titulo,
    Expression<String?>? alias,
    Expression<double?>? limiteInferior,
    Expression<double?>? limiteSuperior,
    Expression<double?>? valorNumerico,
    Expression<String?>? icono,
    Expression<int?>? estadoId,
    Expression<bool?>? incluidoLInferior,
    Expression<bool?>? incluidoLSuperior,
    Expression<int?>? tipoId,
    Expression<int?>? usuarioCreacionId,
    Expression<int?>? usuarioCreadorId,
    Expression<int?>? fechaCreacion,
    Expression<int?>? usuarioAccionId,
    Expression<int?>? fechaAccion,
    Expression<int?>? fechaEnvio,
    Expression<int?>? fechaEntrega,
    Expression<int?>? fechaRecibido,
    Expression<int?>? fechaVisto,
    Expression<int?>? fechaRespuesta,
    Expression<String?>? getSTime,
  }) {
    return RawValuesInsertable({
      if (silaboEventoId != null) 'silabo_evento_id': silaboEventoId,
      if (valorTipoNotaId != null) 'valor_tipo_nota_id': valorTipoNotaId,
      if (tipoNotaId != null) 'tipo_nota_id': tipoNotaId,
      if (titulo != null) 'titulo': titulo,
      if (alias != null) 'alias': alias,
      if (limiteInferior != null) 'limite_inferior': limiteInferior,
      if (limiteSuperior != null) 'limite_superior': limiteSuperior,
      if (valorNumerico != null) 'valor_numerico': valorNumerico,
      if (icono != null) 'icono': icono,
      if (estadoId != null) 'estado_id': estadoId,
      if (incluidoLInferior != null) 'incluido_l_inferior': incluidoLInferior,
      if (incluidoLSuperior != null) 'incluido_l_superior': incluidoLSuperior,
      if (tipoId != null) 'tipo_id': tipoId,
      if (usuarioCreacionId != null) 'usuario_creacion_id': usuarioCreacionId,
      if (usuarioCreadorId != null) 'usuario_creador_id': usuarioCreadorId,
      if (fechaCreacion != null) 'fecha_creacion': fechaCreacion,
      if (usuarioAccionId != null) 'usuario_accion_id': usuarioAccionId,
      if (fechaAccion != null) 'fecha_accion': fechaAccion,
      if (fechaEnvio != null) 'fecha_envio': fechaEnvio,
      if (fechaEntrega != null) 'fecha_entrega': fechaEntrega,
      if (fechaRecibido != null) 'fecha_recibido': fechaRecibido,
      if (fechaVisto != null) 'fecha_visto': fechaVisto,
      if (fechaRespuesta != null) 'fecha_respuesta': fechaRespuesta,
      if (getSTime != null) 'get_s_time': getSTime,
    });
  }

  ValorTipoNotaResultadoCompanion copyWith(
      {Value<int>? silaboEventoId,
      Value<String>? valorTipoNotaId,
      Value<String?>? tipoNotaId,
      Value<String?>? titulo,
      Value<String?>? alias,
      Value<double?>? limiteInferior,
      Value<double?>? limiteSuperior,
      Value<double?>? valorNumerico,
      Value<String?>? icono,
      Value<int?>? estadoId,
      Value<bool?>? incluidoLInferior,
      Value<bool?>? incluidoLSuperior,
      Value<int?>? tipoId,
      Value<int?>? usuarioCreacionId,
      Value<int?>? usuarioCreadorId,
      Value<int?>? fechaCreacion,
      Value<int?>? usuarioAccionId,
      Value<int?>? fechaAccion,
      Value<int?>? fechaEnvio,
      Value<int?>? fechaEntrega,
      Value<int?>? fechaRecibido,
      Value<int?>? fechaVisto,
      Value<int?>? fechaRespuesta,
      Value<String?>? getSTime}) {
    return ValorTipoNotaResultadoCompanion(
      silaboEventoId: silaboEventoId ?? this.silaboEventoId,
      valorTipoNotaId: valorTipoNotaId ?? this.valorTipoNotaId,
      tipoNotaId: tipoNotaId ?? this.tipoNotaId,
      titulo: titulo ?? this.titulo,
      alias: alias ?? this.alias,
      limiteInferior: limiteInferior ?? this.limiteInferior,
      limiteSuperior: limiteSuperior ?? this.limiteSuperior,
      valorNumerico: valorNumerico ?? this.valorNumerico,
      icono: icono ?? this.icono,
      estadoId: estadoId ?? this.estadoId,
      incluidoLInferior: incluidoLInferior ?? this.incluidoLInferior,
      incluidoLSuperior: incluidoLSuperior ?? this.incluidoLSuperior,
      tipoId: tipoId ?? this.tipoId,
      usuarioCreacionId: usuarioCreacionId ?? this.usuarioCreacionId,
      usuarioCreadorId: usuarioCreadorId ?? this.usuarioCreadorId,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
      usuarioAccionId: usuarioAccionId ?? this.usuarioAccionId,
      fechaAccion: fechaAccion ?? this.fechaAccion,
      fechaEnvio: fechaEnvio ?? this.fechaEnvio,
      fechaEntrega: fechaEntrega ?? this.fechaEntrega,
      fechaRecibido: fechaRecibido ?? this.fechaRecibido,
      fechaVisto: fechaVisto ?? this.fechaVisto,
      fechaRespuesta: fechaRespuesta ?? this.fechaRespuesta,
      getSTime: getSTime ?? this.getSTime,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (silaboEventoId.present) {
      map['silabo_evento_id'] = Variable<int>(silaboEventoId.value);
    }
    if (valorTipoNotaId.present) {
      map['valor_tipo_nota_id'] = Variable<String>(valorTipoNotaId.value);
    }
    if (tipoNotaId.present) {
      map['tipo_nota_id'] = Variable<String?>(tipoNotaId.value);
    }
    if (titulo.present) {
      map['titulo'] = Variable<String?>(titulo.value);
    }
    if (alias.present) {
      map['alias'] = Variable<String?>(alias.value);
    }
    if (limiteInferior.present) {
      map['limite_inferior'] = Variable<double?>(limiteInferior.value);
    }
    if (limiteSuperior.present) {
      map['limite_superior'] = Variable<double?>(limiteSuperior.value);
    }
    if (valorNumerico.present) {
      map['valor_numerico'] = Variable<double?>(valorNumerico.value);
    }
    if (icono.present) {
      map['icono'] = Variable<String?>(icono.value);
    }
    if (estadoId.present) {
      map['estado_id'] = Variable<int?>(estadoId.value);
    }
    if (incluidoLInferior.present) {
      map['incluido_l_inferior'] = Variable<bool?>(incluidoLInferior.value);
    }
    if (incluidoLSuperior.present) {
      map['incluido_l_superior'] = Variable<bool?>(incluidoLSuperior.value);
    }
    if (tipoId.present) {
      map['tipo_id'] = Variable<int?>(tipoId.value);
    }
    if (usuarioCreacionId.present) {
      map['usuario_creacion_id'] = Variable<int?>(usuarioCreacionId.value);
    }
    if (usuarioCreadorId.present) {
      map['usuario_creador_id'] = Variable<int?>(usuarioCreadorId.value);
    }
    if (fechaCreacion.present) {
      map['fecha_creacion'] = Variable<int?>(fechaCreacion.value);
    }
    if (usuarioAccionId.present) {
      map['usuario_accion_id'] = Variable<int?>(usuarioAccionId.value);
    }
    if (fechaAccion.present) {
      map['fecha_accion'] = Variable<int?>(fechaAccion.value);
    }
    if (fechaEnvio.present) {
      map['fecha_envio'] = Variable<int?>(fechaEnvio.value);
    }
    if (fechaEntrega.present) {
      map['fecha_entrega'] = Variable<int?>(fechaEntrega.value);
    }
    if (fechaRecibido.present) {
      map['fecha_recibido'] = Variable<int?>(fechaRecibido.value);
    }
    if (fechaVisto.present) {
      map['fecha_visto'] = Variable<int?>(fechaVisto.value);
    }
    if (fechaRespuesta.present) {
      map['fecha_respuesta'] = Variable<int?>(fechaRespuesta.value);
    }
    if (getSTime.present) {
      map['get_s_time'] = Variable<String?>(getSTime.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ValorTipoNotaResultadoCompanion(')
          ..write('silaboEventoId: $silaboEventoId, ')
          ..write('valorTipoNotaId: $valorTipoNotaId, ')
          ..write('tipoNotaId: $tipoNotaId, ')
          ..write('titulo: $titulo, ')
          ..write('alias: $alias, ')
          ..write('limiteInferior: $limiteInferior, ')
          ..write('limiteSuperior: $limiteSuperior, ')
          ..write('valorNumerico: $valorNumerico, ')
          ..write('icono: $icono, ')
          ..write('estadoId: $estadoId, ')
          ..write('incluidoLInferior: $incluidoLInferior, ')
          ..write('incluidoLSuperior: $incluidoLSuperior, ')
          ..write('tipoId: $tipoId, ')
          ..write('usuarioCreacionId: $usuarioCreacionId, ')
          ..write('usuarioCreadorId: $usuarioCreadorId, ')
          ..write('fechaCreacion: $fechaCreacion, ')
          ..write('usuarioAccionId: $usuarioAccionId, ')
          ..write('fechaAccion: $fechaAccion, ')
          ..write('fechaEnvio: $fechaEnvio, ')
          ..write('fechaEntrega: $fechaEntrega, ')
          ..write('fechaRecibido: $fechaRecibido, ')
          ..write('fechaVisto: $fechaVisto, ')
          ..write('fechaRespuesta: $fechaRespuesta, ')
          ..write('getSTime: $getSTime')
          ..write(')'))
        .toString();
  }
}

class $ValorTipoNotaResultadoTable extends ValorTipoNotaResultado
    with TableInfo<$ValorTipoNotaResultadoTable, ValorTipoNotaResultadoData> {
  final GeneratedDatabase _db;
  final String? _alias;
  $ValorTipoNotaResultadoTable(this._db, [this._alias]);
  final VerificationMeta _silaboEventoIdMeta =
      const VerificationMeta('silaboEventoId');
  late final GeneratedColumn<int?> silaboEventoId = GeneratedColumn<int?>(
      'silabo_evento_id', aliasedName, false,
      typeName: 'INTEGER', requiredDuringInsert: true);
  final VerificationMeta _valorTipoNotaIdMeta =
      const VerificationMeta('valorTipoNotaId');
  late final GeneratedColumn<String?> valorTipoNotaId =
      GeneratedColumn<String?>('valor_tipo_nota_id', aliasedName, false,
          typeName: 'TEXT', requiredDuringInsert: true);
  final VerificationMeta _tipoNotaIdMeta = const VerificationMeta('tipoNotaId');
  late final GeneratedColumn<String?> tipoNotaId = GeneratedColumn<String?>(
      'tipo_nota_id', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _tituloMeta = const VerificationMeta('titulo');
  late final GeneratedColumn<String?> titulo = GeneratedColumn<String?>(
      'titulo', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _aliasMeta = const VerificationMeta('alias');
  late final GeneratedColumn<String?> alias = GeneratedColumn<String?>(
      'alias', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _limiteInferiorMeta =
      const VerificationMeta('limiteInferior');
  late final GeneratedColumn<double?> limiteInferior = GeneratedColumn<double?>(
      'limite_inferior', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _limiteSuperiorMeta =
      const VerificationMeta('limiteSuperior');
  late final GeneratedColumn<double?> limiteSuperior = GeneratedColumn<double?>(
      'limite_superior', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _valorNumericoMeta =
      const VerificationMeta('valorNumerico');
  late final GeneratedColumn<double?> valorNumerico = GeneratedColumn<double?>(
      'valor_numerico', aliasedName, true,
      typeName: 'REAL', requiredDuringInsert: false);
  final VerificationMeta _iconoMeta = const VerificationMeta('icono');
  late final GeneratedColumn<String?> icono = GeneratedColumn<String?>(
      'icono', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  final VerificationMeta _estadoIdMeta = const VerificationMeta('estadoId');
  late final GeneratedColumn<int?> estadoId = GeneratedColumn<int?>(
      'estado_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _incluidoLInferiorMeta =
      const VerificationMeta('incluidoLInferior');
  late final GeneratedColumn<bool?> incluidoLInferior = GeneratedColumn<bool?>(
      'incluido_l_inferior', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (incluido_l_inferior IN (0, 1))');
  final VerificationMeta _incluidoLSuperiorMeta =
      const VerificationMeta('incluidoLSuperior');
  late final GeneratedColumn<bool?> incluidoLSuperior = GeneratedColumn<bool?>(
      'incluido_l_superior', aliasedName, true,
      typeName: 'INTEGER',
      requiredDuringInsert: false,
      defaultConstraints: 'CHECK (incluido_l_superior IN (0, 1))');
  final VerificationMeta _tipoIdMeta = const VerificationMeta('tipoId');
  late final GeneratedColumn<int?> tipoId = GeneratedColumn<int?>(
      'tipo_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreacionIdMeta =
      const VerificationMeta('usuarioCreacionId');
  late final GeneratedColumn<int?> usuarioCreacionId = GeneratedColumn<int?>(
      'usuario_creacion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioCreadorIdMeta =
      const VerificationMeta('usuarioCreadorId');
  late final GeneratedColumn<int?> usuarioCreadorId = GeneratedColumn<int?>(
      'usuario_creador_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaCreacionMeta =
      const VerificationMeta('fechaCreacion');
  late final GeneratedColumn<int?> fechaCreacion = GeneratedColumn<int?>(
      'fecha_creacion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _usuarioAccionIdMeta =
      const VerificationMeta('usuarioAccionId');
  late final GeneratedColumn<int?> usuarioAccionId = GeneratedColumn<int?>(
      'usuario_accion_id', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaAccionMeta =
      const VerificationMeta('fechaAccion');
  late final GeneratedColumn<int?> fechaAccion = GeneratedColumn<int?>(
      'fecha_accion', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEnvioMeta = const VerificationMeta('fechaEnvio');
  late final GeneratedColumn<int?> fechaEnvio = GeneratedColumn<int?>(
      'fecha_envio', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaEntregaMeta =
      const VerificationMeta('fechaEntrega');
  late final GeneratedColumn<int?> fechaEntrega = GeneratedColumn<int?>(
      'fecha_entrega', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRecibidoMeta =
      const VerificationMeta('fechaRecibido');
  late final GeneratedColumn<int?> fechaRecibido = GeneratedColumn<int?>(
      'fecha_recibido', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaVistoMeta = const VerificationMeta('fechaVisto');
  late final GeneratedColumn<int?> fechaVisto = GeneratedColumn<int?>(
      'fecha_visto', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _fechaRespuestaMeta =
      const VerificationMeta('fechaRespuesta');
  late final GeneratedColumn<int?> fechaRespuesta = GeneratedColumn<int?>(
      'fecha_respuesta', aliasedName, true,
      typeName: 'INTEGER', requiredDuringInsert: false);
  final VerificationMeta _getSTimeMeta = const VerificationMeta('getSTime');
  late final GeneratedColumn<String?> getSTime = GeneratedColumn<String?>(
      'get_s_time', aliasedName, true,
      typeName: 'TEXT', requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        silaboEventoId,
        valorTipoNotaId,
        tipoNotaId,
        titulo,
        alias,
        limiteInferior,
        limiteSuperior,
        valorNumerico,
        icono,
        estadoId,
        incluidoLInferior,
        incluidoLSuperior,
        tipoId,
        usuarioCreacionId,
        usuarioCreadorId,
        fechaCreacion,
        usuarioAccionId,
        fechaAccion,
        fechaEnvio,
        fechaEntrega,
        fechaRecibido,
        fechaVisto,
        fechaRespuesta,
        getSTime
      ];
  @override
  String get aliasedName => _alias ?? 'valor_tipo_nota_resultado';
  @override
  String get actualTableName => 'valor_tipo_nota_resultado';
  @override
  VerificationContext validateIntegrity(
      Insertable<ValorTipoNotaResultadoData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('silabo_evento_id')) {
      context.handle(
          _silaboEventoIdMeta,
          silaboEventoId.isAcceptableOrUnknown(
              data['silabo_evento_id']!, _silaboEventoIdMeta));
    } else if (isInserting) {
      context.missing(_silaboEventoIdMeta);
    }
    if (data.containsKey('valor_tipo_nota_id')) {
      context.handle(
          _valorTipoNotaIdMeta,
          valorTipoNotaId.isAcceptableOrUnknown(
              data['valor_tipo_nota_id']!, _valorTipoNotaIdMeta));
    } else if (isInserting) {
      context.missing(_valorTipoNotaIdMeta);
    }
    if (data.containsKey('tipo_nota_id')) {
      context.handle(
          _tipoNotaIdMeta,
          tipoNotaId.isAcceptableOrUnknown(
              data['tipo_nota_id']!, _tipoNotaIdMeta));
    }
    if (data.containsKey('titulo')) {
      context.handle(_tituloMeta,
          titulo.isAcceptableOrUnknown(data['titulo']!, _tituloMeta));
    }
    if (data.containsKey('alias')) {
      context.handle(
          _aliasMeta, alias.isAcceptableOrUnknown(data['alias']!, _aliasMeta));
    }
    if (data.containsKey('limite_inferior')) {
      context.handle(
          _limiteInferiorMeta,
          limiteInferior.isAcceptableOrUnknown(
              data['limite_inferior']!, _limiteInferiorMeta));
    }
    if (data.containsKey('limite_superior')) {
      context.handle(
          _limiteSuperiorMeta,
          limiteSuperior.isAcceptableOrUnknown(
              data['limite_superior']!, _limiteSuperiorMeta));
    }
    if (data.containsKey('valor_numerico')) {
      context.handle(
          _valorNumericoMeta,
          valorNumerico.isAcceptableOrUnknown(
              data['valor_numerico']!, _valorNumericoMeta));
    }
    if (data.containsKey('icono')) {
      context.handle(
          _iconoMeta, icono.isAcceptableOrUnknown(data['icono']!, _iconoMeta));
    }
    if (data.containsKey('estado_id')) {
      context.handle(_estadoIdMeta,
          estadoId.isAcceptableOrUnknown(data['estado_id']!, _estadoIdMeta));
    }
    if (data.containsKey('incluido_l_inferior')) {
      context.handle(
          _incluidoLInferiorMeta,
          incluidoLInferior.isAcceptableOrUnknown(
              data['incluido_l_inferior']!, _incluidoLInferiorMeta));
    }
    if (data.containsKey('incluido_l_superior')) {
      context.handle(
          _incluidoLSuperiorMeta,
          incluidoLSuperior.isAcceptableOrUnknown(
              data['incluido_l_superior']!, _incluidoLSuperiorMeta));
    }
    if (data.containsKey('tipo_id')) {
      context.handle(_tipoIdMeta,
          tipoId.isAcceptableOrUnknown(data['tipo_id']!, _tipoIdMeta));
    }
    if (data.containsKey('usuario_creacion_id')) {
      context.handle(
          _usuarioCreacionIdMeta,
          usuarioCreacionId.isAcceptableOrUnknown(
              data['usuario_creacion_id']!, _usuarioCreacionIdMeta));
    }
    if (data.containsKey('usuario_creador_id')) {
      context.handle(
          _usuarioCreadorIdMeta,
          usuarioCreadorId.isAcceptableOrUnknown(
              data['usuario_creador_id']!, _usuarioCreadorIdMeta));
    }
    if (data.containsKey('fecha_creacion')) {
      context.handle(
          _fechaCreacionMeta,
          fechaCreacion.isAcceptableOrUnknown(
              data['fecha_creacion']!, _fechaCreacionMeta));
    }
    if (data.containsKey('usuario_accion_id')) {
      context.handle(
          _usuarioAccionIdMeta,
          usuarioAccionId.isAcceptableOrUnknown(
              data['usuario_accion_id']!, _usuarioAccionIdMeta));
    }
    if (data.containsKey('fecha_accion')) {
      context.handle(
          _fechaAccionMeta,
          fechaAccion.isAcceptableOrUnknown(
              data['fecha_accion']!, _fechaAccionMeta));
    }
    if (data.containsKey('fecha_envio')) {
      context.handle(
          _fechaEnvioMeta,
          fechaEnvio.isAcceptableOrUnknown(
              data['fecha_envio']!, _fechaEnvioMeta));
    }
    if (data.containsKey('fecha_entrega')) {
      context.handle(
          _fechaEntregaMeta,
          fechaEntrega.isAcceptableOrUnknown(
              data['fecha_entrega']!, _fechaEntregaMeta));
    }
    if (data.containsKey('fecha_recibido')) {
      context.handle(
          _fechaRecibidoMeta,
          fechaRecibido.isAcceptableOrUnknown(
              data['fecha_recibido']!, _fechaRecibidoMeta));
    }
    if (data.containsKey('fecha_visto')) {
      context.handle(
          _fechaVistoMeta,
          fechaVisto.isAcceptableOrUnknown(
              data['fecha_visto']!, _fechaVistoMeta));
    }
    if (data.containsKey('fecha_respuesta')) {
      context.handle(
          _fechaRespuestaMeta,
          fechaRespuesta.isAcceptableOrUnknown(
              data['fecha_respuesta']!, _fechaRespuestaMeta));
    }
    if (data.containsKey('get_s_time')) {
      context.handle(_getSTimeMeta,
          getSTime.isAcceptableOrUnknown(data['get_s_time']!, _getSTimeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {valorTipoNotaId, silaboEventoId};
  @override
  ValorTipoNotaResultadoData map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return ValorTipoNotaResultadoData.fromData(data, _db,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ValorTipoNotaResultadoTable createAlias(String alias) {
    return $ValorTipoNotaResultadoTable(_db, alias);
  }
}

abstract class _$AppDataBase extends GeneratedDatabase {
  _$AppDataBase(QueryExecutor e) : super(SqlTypeSystem.defaultInstance, e);
  late final $SessionUserTable sessionUser = $SessionUserTable(this);
  late final $UsuarioRolGeoreferenciaTable usuarioRolGeoreferencia =
      $UsuarioRolGeoreferenciaTable(this);
  late final $RolTable rol = $RolTable(this);
  late final $GeoreferenciaTable georeferencia = $GeoreferenciaTable(this);
  late final $EntidadTable entidad = $EntidadTable(this);
  late final $PersonaTable persona = $PersonaTable(this);
  late final $EmpleadoTable empleado = $EmpleadoTable(this);
  late final $AnioAcademicoTable anioAcademico = $AnioAcademicoTable(this);
  late final $ParametroConfiguracionTable parametroConfiguracion =
      $ParametroConfiguracionTable(this);
  late final $AulaTable aula = $AulaTable(this);
  late final $CargaAcademicaTable cargaAcademica = $CargaAcademicaTable(this);
  late final $CargaCursoDocenteTable cargaCursoDocente =
      $CargaCursoDocenteTable(this);
  late final $CargaCursoDocenteDetTable cargaCursoDocenteDet =
      $CargaCursoDocenteDetTable(this);
  late final $CargaCursoTable cargaCurso = $CargaCursoTable(this);
  late final $CursosTable cursos = $CursosTable(this);
  late final $ParametrosDisenioTable parametrosDisenio =
      $ParametrosDisenioTable(this);
  late final $NivelAcademicoTable nivelAcademico = $NivelAcademicoTable(this);
  late final $PeriodosTable periodos = $PeriodosTable(this);
  late final $PlanCursosTable planCursos = $PlanCursosTable(this);
  late final $PlanEstudioTable planEstudio = $PlanEstudioTable(this);
  late final $ProgramasEducativoTable programasEducativo =
      $ProgramasEducativoTable(this);
  late final $SeccionTable seccion = $SeccionTable(this);
  late final $SilaboEventoTable silaboEvento = $SilaboEventoTable(this);
  late final $CalendarioPeriodoTable calendarioPeriodo =
      $CalendarioPeriodoTable(this);
  late final $TiposTable tipos = $TiposTable(this);
  late final $HoraTable hora = $HoraTable(this);
  late final $HorarioProgramaTable horarioPrograma =
      $HorarioProgramaTable(this);
  late final $HorarioHoraTable horarioHora = $HorarioHoraTable(this);
  late final $DetalleHorarioTable detalleHorario = $DetalleHorarioTable(this);
  late final $DiaTable dia = $DiaTable(this);
  late final $HorarioDiaTable horarioDia = $HorarioDiaTable(this);
  late final $CursosDetHorarioTable cursosDetHorario =
      $CursosDetHorarioTable(this);
  late final $HorarioTable horario = $HorarioTable(this);
  late final $CalendarioAcademicoTable calendarioAcademico =
      $CalendarioAcademicoTable(this);
  late final $UsuarioTable usuario = $UsuarioTable(this);
  late final $WebConfigsTable webConfigs = $WebConfigsTable(this);
  late final $CriterioTable criterio = $CriterioTable(this);
  late final $TipoEvaluacionRubroTable tipoEvaluacionRubro =
      $TipoEvaluacionRubroTable(this);
  late final $TiposRubroTable tiposRubro = $TiposRubroTable(this);
  late final $TipoNotaRubroTable tipoNotaRubro = $TipoNotaRubroTable(this);
  late final $ValorTipoNotaRubroTable valorTipoNotaRubro =
      $ValorTipoNotaRubroTable(this);
  late final $RubroEvaluacionProcesoTable rubroEvaluacionProceso =
      $RubroEvaluacionProcesoTable(this);
  late final $ArchivoRubroTable archivoRubro = $ArchivoRubroTable(this);
  late final $EquipoEvaluacionTable equipoEvaluacion =
      $EquipoEvaluacionTable(this);
  late final $EvaluacionProcesoTable evaluacionProceso =
      $EvaluacionProcesoTable(this);
  late final $RubroCampotematicoTable rubroCampotematico =
      $RubroCampotematicoTable(this);
  late final $RubroComentarioTable rubroComentario =
      $RubroComentarioTable(this);
  late final $RubroEvalRNPFormulaTable rubroEvalRNPFormula =
      $RubroEvalRNPFormulaTable(this);
  late final $ContactoDocenteTable contactoDocente =
      $ContactoDocenteTable(this);
  late final $CriterioRubroEvaluacionTable criterioRubroEvaluacion =
      $CriterioRubroEvaluacionTable(this);
  late final $CalendarioTable calendario = $CalendarioTable(this);
  late final $CalendarioListaUsuarioTable calendarioListaUsuario =
      $CalendarioListaUsuarioTable(this);
  late final $EventoTable evento = $EventoTable(this);
  late final $EventoPersonaTable eventoPersona = $EventoPersonaTable(this);
  late final $ListaUsuarioDetalleTable listaUsuarioDetalle =
      $ListaUsuarioDetalleTable(this);
  late final $ListaUsuariosTable listaUsuarios = $ListaUsuariosTable(this);
  late final $PersonaEventoTable personaEvento = $PersonaEventoTable(this);
  late final $RelacionesEventoTable relacionesEvento =
      $RelacionesEventoTable(this);
  late final $TipoEventoTable tipoEvento = $TipoEventoTable(this);
  late final $UsuarioEventoTable usuarioEvento = $UsuarioEventoTable(this);
  late final $UnidadEventoTable unidadEvento = $UnidadEventoTable(this);
  late final $SesionEventoTable sesionEvento = $SesionEventoTable(this);
  late final $RelUnidadEventoTable relUnidadEvento =
      $RelUnidadEventoTable(this);
  late final $RubroUpdateServidorTable rubroUpdateServidor =
      $RubroUpdateServidorTable(this);
  late final $CalendarioPeriodoCargaCursoTable calendarioPeriodoCargaCurso =
      $CalendarioPeriodoCargaCursoTable(this);
  late final $TipoNotaResultadoTable tipoNotaResultado =
      $TipoNotaResultadoTable(this);
  late final $ValorTipoNotaResultadoTable valorTipoNotaResultado =
      $ValorTipoNotaResultadoTable(this);
  @override
  Iterable<TableInfo> get allTables => allSchemaEntities.whereType<TableInfo>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        sessionUser,
        usuarioRolGeoreferencia,
        rol,
        georeferencia,
        entidad,
        persona,
        empleado,
        anioAcademico,
        parametroConfiguracion,
        aula,
        cargaAcademica,
        cargaCursoDocente,
        cargaCursoDocenteDet,
        cargaCurso,
        cursos,
        parametrosDisenio,
        nivelAcademico,
        periodos,
        planCursos,
        planEstudio,
        programasEducativo,
        seccion,
        silaboEvento,
        calendarioPeriodo,
        tipos,
        hora,
        horarioPrograma,
        horarioHora,
        detalleHorario,
        dia,
        horarioDia,
        cursosDetHorario,
        horario,
        calendarioAcademico,
        usuario,
        webConfigs,
        criterio,
        tipoEvaluacionRubro,
        tiposRubro,
        tipoNotaRubro,
        valorTipoNotaRubro,
        rubroEvaluacionProceso,
        archivoRubro,
        equipoEvaluacion,
        evaluacionProceso,
        rubroCampotematico,
        rubroComentario,
        rubroEvalRNPFormula,
        contactoDocente,
        criterioRubroEvaluacion,
        calendario,
        calendarioListaUsuario,
        evento,
        eventoPersona,
        listaUsuarioDetalle,
        listaUsuarios,
        personaEvento,
        relacionesEvento,
        tipoEvento,
        usuarioEvento,
        unidadEvento,
        sesionEvento,
        relUnidadEvento,
        rubroUpdateServidor,
        calendarioPeriodoCargaCurso,
        tipoNotaResultado,
        valorTipoNotaResultado
      ];
}
